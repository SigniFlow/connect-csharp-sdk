/*
 * WorkFlow API
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using SigniFlow.Connect.Client;
using SigniFlow.Connect.Api;
using SigniFlow.Connect.Model;

namespace SigniFlow.Connect.Test
{
    /// <summary>
    ///  Class for testing AuthenticationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AuthenticationApiTests
    {
        private AuthenticationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AuthenticationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AuthenticationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' AuthenticationApi
            //Assert.IsInstanceOf(typeof(AuthenticationApi), instance);
        }

        
        /// <summary>
        /// Test Login
        /// </summary>
        [Test]
        public void LoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //LoginRequest loginRequest = null;
            //var response = instance.Login(contentType, loginRequest);
            //Assert.IsInstanceOf(typeof(LoginResponse), response, "response is LoginResponse");
        }
        
        /// <summary>
        /// Test PostLogout
        /// </summary>
        [Test]
        public void PostLogoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //LogoutRequest logoutRequest = null;
            //var response = instance.PostLogout(contentType, logoutRequest);
            //Assert.IsInstanceOf(typeof(LogoutResponse), response, "response is LogoutResponse");
        }
        
        /// <summary>
        /// Test PostTokenExtend
        /// </summary>
        [Test]
        public void PostTokenExtendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //TokenExtendRequest tokenExtendRequest = null;
            //var response = instance.PostTokenExtend(contentType, tokenExtendRequest);
            //Assert.IsInstanceOf(typeof(TokenExtendResponse), response, "response is TokenExtendResponse");
        }
        
        /// <summary>
        /// Test PostTokenValidate
        /// </summary>
        [Test]
        public void PostTokenValidateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //TokenValidateRequest tokenValidateRequest = null;
            //var response = instance.PostTokenValidate(contentType, tokenValidateRequest);
            //Assert.IsInstanceOf(typeof(TokenValidateResponse), response, "response is TokenValidateResponse");
        }
        
    }

}
