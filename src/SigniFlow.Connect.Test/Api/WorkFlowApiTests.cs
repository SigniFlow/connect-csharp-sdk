/*
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SigniFlow.Connect.Client;
using SigniFlow.Connect.Api;
// uncomment below to import models
//using SigniFlow.Connect.Model;

namespace SigniFlow.Connect.Test.Api
{
    /// <summary>
    ///  Class for testing WorkFlowApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WorkFlowApiTests : IDisposable
    {
        private WorkFlowApi instance;

        public WorkFlowApiTests()
        {
            instance = new WorkFlowApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WorkFlowApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' WorkFlowApi
            //Assert.IsType<WorkFlowApi>(instance);
        }

        /// <summary>
        /// Test CreateWorkflow
        /// </summary>
        [Fact]
        public void CreateWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //CreateWorkflowRequest createWorkflowRequest = null;
            //var response = instance.CreateWorkflow(contentType, createWorkflowRequest);
            //Assert.IsType<CreateWorkflowResponse>(response);
        }

        /// <summary>
        /// Test GetDocument
        /// </summary>
        [Fact]
        public void GetDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //GetDocumentRequest getDocumentRequest = null;
            //var response = instance.GetDocument(contentType, getDocumentRequest);
            //Assert.IsType<GetDocumentResponse>(response);
        }

        /// <summary>
        /// Test PostAddWorkflowStep
        /// </summary>
        [Fact]
        public void PostAddWorkflowStepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //AddWorkflowStepV2Request addWorkflowStepV2Request = null;
            //var response = instance.PostAddWorkflowStep(contentType, addWorkflowStepV2Request);
            //Assert.IsType<AddWokflowStepV2Response>(response);
        }

        /// <summary>
        /// Test PostCancelFlow
        /// </summary>
        [Fact]
        public void PostCancelFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //CancelFlowRequest cancelFlowRequest = null;
            //var response = instance.PostCancelFlow(contentType, cancelFlowRequest);
            //Assert.IsType<CancelFlowResponse>(response);
        }

        /// <summary>
        /// Test PostDeleteDoc
        /// </summary>
        [Fact]
        public void PostDeleteDocTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //DeleteDocRequest deleteDocRequest = null;
            //var response = instance.PostDeleteDoc(contentType, deleteDocRequest);
            //Assert.IsType<DeleteDocResponse>(response);
        }

        /// <summary>
        /// Test PostDocPrepperAddField
        /// </summary>
        [Fact]
        public void PostDocPrepperAddFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //DocPrepperAddFieldsFlowIDRequest docPrepperAddFieldsFlowIDRequest = null;
            //var response = instance.PostDocPrepperAddField(contentType, docPrepperAddFieldsFlowIDRequest);
            //Assert.IsType<DocPrepperAddFieldsFlowIDResponse>(response);
        }

        /// <summary>
        /// Test PostDocPrepperAdvancedFields
        /// </summary>
        [Fact]
        public void PostDocPrepperAdvancedFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //DocPrepperAddAdvancedFieldsRequest docPrepperAddAdvancedFieldsRequest = null;
            //var response = instance.PostDocPrepperAdvancedFields(contentType, docPrepperAddAdvancedFieldsRequest);
            //Assert.IsType<DocPrepperAddAdvancedFieldsResponse>(response);
        }

        /// <summary>
        /// Test PostFullWorkflow
        /// </summary>
        [Fact]
        public void PostFullWorkflowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //FullWorkflowRequest fullWorkflowRequest = null;
            //var response = instance.PostFullWorkflow(contentType, fullWorkflowRequest);
            //Assert.IsType<FullWorkflowResponse>(response);
        }

        /// <summary>
        /// Test PostGetDocStatus
        /// </summary>
        [Fact]
        public void PostGetDocStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //GetDocStatusRequest getDocStatusRequest = null;
            //var response = instance.PostGetDocStatus(contentType, getDocStatusRequest);
            //Assert.IsType<GetDocStatusResponse>(response);
        }

        /// <summary>
        /// Test PostInitiateFlow
        /// </summary>
        [Fact]
        public void PostInitiateFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //InitiateFlowRequest initiateFlowRequest = null;
            //var response = instance.PostInitiateFlow(contentType, initiateFlowRequest);
            //Assert.IsType<InitiateFlowResponse>(response);
        }

        /// <summary>
        /// Test PostInitiateFlowNoEmail
        /// </summary>
        [Fact]
        public void PostInitiateFlowNoEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //InitiateFlowNoEmailRequest initiateFlowNoEmailRequest = null;
            //var response = instance.PostInitiateFlowNoEmail(contentType, initiateFlowNoEmailRequest);
            //Assert.IsType<InitiateFlowNoEmailResponse>(response);
        }

        /// <summary>
        /// Test PostInitiateFlowNoInitialEmail
        /// </summary>
        [Fact]
        public void PostInitiateFlowNoInitialEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //InitiateFlowNoInitialEmailRequest initiateFlowNoInitialEmailRequest = null;
            //var response = instance.PostInitiateFlowNoInitialEmail(contentType, initiateFlowNoInitialEmailRequest);
            //Assert.IsType<InitiateFlowNoInitialEmailResponse>(response);
        }

        /// <summary>
        /// Test PostWorkflowSign
        /// </summary>
        [Fact]
        public void PostWorkflowSignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //WorkflowSignRequest workflowSignRequest = null;
            //var response = instance.PostWorkflowSign(contentType, workflowSignRequest);
            //Assert.IsType<WorkflowSignResponse>(response);
        }
    }
}
