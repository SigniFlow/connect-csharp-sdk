/*
 * WorkFlow API
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using SigniFlow.Connect.Client;
using SigniFlow.Connect.Api;
using SigniFlow.Connect.Model;

namespace SigniFlow.Connect.Test
{
    /// <summary>
    ///  Class for testing SigningCeremonyApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SigningCeremonyApiTests
    {
        private SigningCeremonyApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SigningCeremonyApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SigningCeremonyApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' SigningCeremonyApi
            //Assert.IsInstanceOf(typeof(SigningCeremonyApi), instance);
        }

        
        /// <summary>
        /// Test PostMultipleSignersSigningCeremony
        /// </summary>
        [Test]
        public void PostMultipleSignersSigningCeremonyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //MultipleSignersSigningCeremonyRequest multipleSignersSigningCeremonyRequest = null;
            //var response = instance.PostMultipleSignersSigningCeremony(contentType, multipleSignersSigningCeremonyRequest);
            //Assert.IsInstanceOf(typeof(MultipleSignersSigningCeremonyResponse), response, "response is MultipleSignersSigningCeremonyResponse");
        }
        
        /// <summary>
        /// Test PostSigningCeremonyV2
        /// </summary>
        [Test]
        public void PostSigningCeremonyV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //SigningCeremonyV2Request signingCeremonyV2Request = null;
            //var response = instance.PostSigningCeremonyV2(contentType, signingCeremonyV2Request);
            //Assert.IsInstanceOf(typeof(SigningCeremonyV2Response), response, "response is SigningCeremonyV2Response");
        }
        
    }

}
