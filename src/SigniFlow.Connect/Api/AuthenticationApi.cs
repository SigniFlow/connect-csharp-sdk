/*
 * WorkFlow API
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using SigniFlow.Connect.Client;
using SigniFlow.Connect.Model;

namespace SigniFlow.Connect.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Login
        /// </summary>
        /// <remarks>
        /// #### Generates an API Token to allow the user to login.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="loginRequest">##### Login Request Model</param>
        /// <returns>LoginResponse</returns>
        LoginResponse Login (string contentType, LoginRequest loginRequest);

        /// <summary>
        /// Login
        /// </summary>
        /// <remarks>
        /// #### Generates an API Token to allow the user to login.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="loginRequest">##### Login Request Model</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        ApiResponse<LoginResponse> LoginWithHttpInfo (string contentType, LoginRequest loginRequest);
        /// <summary>
        /// Logout
        /// </summary>
        /// <remarks>
        /// #### Used to log a user out of SigniFlow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="logoutRequest">##### Logout Request Model (optional)</param>
        /// <returns>LogoutResponse</returns>
        LogoutResponse PostLogout (string contentType, LogoutRequest logoutRequest = default(LogoutRequest));

        /// <summary>
        /// Logout
        /// </summary>
        /// <remarks>
        /// #### Used to log a user out of SigniFlow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="logoutRequest">##### Logout Request Model (optional)</param>
        /// <returns>ApiResponse of LogoutResponse</returns>
        ApiResponse<LogoutResponse> PostLogoutWithHttpInfo (string contentType, LogoutRequest logoutRequest = default(LogoutRequest));
        /// <summary>
        /// Token Extend
        /// </summary>
        /// <remarks>
        /// #### Used to extend the period of time in which the session token is valid.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="tokenExtendRequest">##### Token Extend Request Model (optional)</param>
        /// <returns>TokenExtendResponse</returns>
        TokenExtendResponse PostTokenExtend (string contentType, TokenExtendRequest tokenExtendRequest = default(TokenExtendRequest));

        /// <summary>
        /// Token Extend
        /// </summary>
        /// <remarks>
        /// #### Used to extend the period of time in which the session token is valid.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="tokenExtendRequest">##### Token Extend Request Model (optional)</param>
        /// <returns>ApiResponse of TokenExtendResponse</returns>
        ApiResponse<TokenExtendResponse> PostTokenExtendWithHttpInfo (string contentType, TokenExtendRequest tokenExtendRequest = default(TokenExtendRequest));
        /// <summary>
        /// Token Validate
        /// </summary>
        /// <remarks>
        /// #### Used to validate the user&#39;s session token.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="tokenValidateRequest">##### Token Validate Request Model (optional)</param>
        /// <returns>TokenValidateResponse</returns>
        TokenValidateResponse PostTokenValidate (string contentType, TokenValidateRequest tokenValidateRequest = default(TokenValidateRequest));

        /// <summary>
        /// Token Validate
        /// </summary>
        /// <remarks>
        /// #### Used to validate the user&#39;s session token.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="tokenValidateRequest">##### Token Validate Request Model (optional)</param>
        /// <returns>ApiResponse of TokenValidateResponse</returns>
        ApiResponse<TokenValidateResponse> PostTokenValidateWithHttpInfo (string contentType, TokenValidateRequest tokenValidateRequest = default(TokenValidateRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Login
        /// </summary>
        /// <remarks>
        /// #### Generates an API Token to allow the user to login.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="loginRequest">##### Login Request Model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LoginResponse</returns>
        System.Threading.Tasks.Task<LoginResponse> LoginAsync (string contentType, LoginRequest loginRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Login
        /// </summary>
        /// <remarks>
        /// #### Generates an API Token to allow the user to login.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="loginRequest">##### Login Request Model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoginResponse>> LoginWithHttpInfoAsync (string contentType, LoginRequest loginRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Logout
        /// </summary>
        /// <remarks>
        /// #### Used to log a user out of SigniFlow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="logoutRequest">##### Logout Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LogoutResponse</returns>
        System.Threading.Tasks.Task<LogoutResponse> PostLogoutAsync (string contentType, LogoutRequest logoutRequest = default(LogoutRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Logout
        /// </summary>
        /// <remarks>
        /// #### Used to log a user out of SigniFlow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="logoutRequest">##### Logout Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LogoutResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogoutResponse>> PostLogoutWithHttpInfoAsync (string contentType, LogoutRequest logoutRequest = default(LogoutRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Token Extend
        /// </summary>
        /// <remarks>
        /// #### Used to extend the period of time in which the session token is valid.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="tokenExtendRequest">##### Token Extend Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TokenExtendResponse</returns>
        System.Threading.Tasks.Task<TokenExtendResponse> PostTokenExtendAsync (string contentType, TokenExtendRequest tokenExtendRequest = default(TokenExtendRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Token Extend
        /// </summary>
        /// <remarks>
        /// #### Used to extend the period of time in which the session token is valid.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="tokenExtendRequest">##### Token Extend Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TokenExtendResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenExtendResponse>> PostTokenExtendWithHttpInfoAsync (string contentType, TokenExtendRequest tokenExtendRequest = default(TokenExtendRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Token Validate
        /// </summary>
        /// <remarks>
        /// #### Used to validate the user&#39;s session token.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="tokenValidateRequest">##### Token Validate Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TokenValidateResponse</returns>
        System.Threading.Tasks.Task<TokenValidateResponse> PostTokenValidateAsync (string contentType, TokenValidateRequest tokenValidateRequest = default(TokenValidateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Token Validate
        /// </summary>
        /// <remarks>
        /// #### Used to validate the user&#39;s session token.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="tokenValidateRequest">##### Token Validate Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TokenValidateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenValidateResponse>> PostTokenValidateWithHttpInfoAsync (string contentType, TokenValidateRequest tokenValidateRequest = default(TokenValidateRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthenticationApi : IAuthenticationApi
    {
        private SigniFlow.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(String basePath)
        {
            this.Configuration = new SigniFlow.Connect.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi()
        {
            this.Configuration = SigniFlow.Connect.Client.Configuration.Default;

            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticationApi(SigniFlow.Connect.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SigniFlow.Connect.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SigniFlow.Connect.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SigniFlow.Connect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Login #### Generates an API Token to allow the user to login.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="loginRequest">##### Login Request Model</param>
        /// <returns>LoginResponse</returns>
        public LoginResponse Login (string contentType, LoginRequest loginRequest)
        {
             ApiResponse<LoginResponse> localVarResponse = LoginWithHttpInfo(contentType, loginRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Login #### Generates an API Token to allow the user to login.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="loginRequest">##### Login Request Model</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        public ApiResponse<LoginResponse> LoginWithHttpInfo (string contentType, LoginRequest loginRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AuthenticationApi->Login");
            // verify the required parameter 'loginRequest' is set
            if (loginRequest == null)
                throw new ApiException(400, "Missing required parameter 'loginRequest' when calling AuthenticationApi->Login");

            var localVarPath = "/Login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (loginRequest != null && loginRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(loginRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loginRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoginResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LoginResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoginResponse)));
        }

        /// <summary>
        /// Login #### Generates an API Token to allow the user to login.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="loginRequest">##### Login Request Model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LoginResponse</returns>
        public async System.Threading.Tasks.Task<LoginResponse> LoginAsync (string contentType, LoginRequest loginRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<LoginResponse> localVarResponse = await LoginWithHttpInfoAsync(contentType, loginRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Login #### Generates an API Token to allow the user to login.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="loginRequest">##### Login Request Model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoginResponse>> LoginWithHttpInfoAsync (string contentType, LoginRequest loginRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AuthenticationApi->Login");
            // verify the required parameter 'loginRequest' is set
            if (loginRequest == null)
                throw new ApiException(400, "Missing required parameter 'loginRequest' when calling AuthenticationApi->Login");

            var localVarPath = "/Login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (loginRequest != null && loginRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(loginRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loginRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoginResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LoginResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoginResponse)));
        }

        /// <summary>
        /// Logout #### Used to log a user out of SigniFlow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="logoutRequest">##### Logout Request Model (optional)</param>
        /// <returns>LogoutResponse</returns>
        public LogoutResponse PostLogout (string contentType, LogoutRequest logoutRequest = default(LogoutRequest))
        {
             ApiResponse<LogoutResponse> localVarResponse = PostLogoutWithHttpInfo(contentType, logoutRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Logout #### Used to log a user out of SigniFlow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="logoutRequest">##### Logout Request Model (optional)</param>
        /// <returns>ApiResponse of LogoutResponse</returns>
        public ApiResponse<LogoutResponse> PostLogoutWithHttpInfo (string contentType, LogoutRequest logoutRequest = default(LogoutRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AuthenticationApi->PostLogout");

            var localVarPath = "/Logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (logoutRequest != null && logoutRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(logoutRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = logoutRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLogout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogoutResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogoutResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogoutResponse)));
        }

        /// <summary>
        /// Logout #### Used to log a user out of SigniFlow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="logoutRequest">##### Logout Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LogoutResponse</returns>
        public async System.Threading.Tasks.Task<LogoutResponse> PostLogoutAsync (string contentType, LogoutRequest logoutRequest = default(LogoutRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<LogoutResponse> localVarResponse = await PostLogoutWithHttpInfoAsync(contentType, logoutRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Logout #### Used to log a user out of SigniFlow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="logoutRequest">##### Logout Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LogoutResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogoutResponse>> PostLogoutWithHttpInfoAsync (string contentType, LogoutRequest logoutRequest = default(LogoutRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AuthenticationApi->PostLogout");

            var localVarPath = "/Logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (logoutRequest != null && logoutRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(logoutRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = logoutRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLogout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogoutResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogoutResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogoutResponse)));
        }

        /// <summary>
        /// Token Extend #### Used to extend the period of time in which the session token is valid.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="tokenExtendRequest">##### Token Extend Request Model (optional)</param>
        /// <returns>TokenExtendResponse</returns>
        public TokenExtendResponse PostTokenExtend (string contentType, TokenExtendRequest tokenExtendRequest = default(TokenExtendRequest))
        {
             ApiResponse<TokenExtendResponse> localVarResponse = PostTokenExtendWithHttpInfo(contentType, tokenExtendRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Token Extend #### Used to extend the period of time in which the session token is valid.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="tokenExtendRequest">##### Token Extend Request Model (optional)</param>
        /// <returns>ApiResponse of TokenExtendResponse</returns>
        public ApiResponse<TokenExtendResponse> PostTokenExtendWithHttpInfo (string contentType, TokenExtendRequest tokenExtendRequest = default(TokenExtendRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AuthenticationApi->PostTokenExtend");

            var localVarPath = "/TokenExtend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (tokenExtendRequest != null && tokenExtendRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tokenExtendRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokenExtendRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTokenExtend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenExtendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenExtendResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenExtendResponse)));
        }

        /// <summary>
        /// Token Extend #### Used to extend the period of time in which the session token is valid.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="tokenExtendRequest">##### Token Extend Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TokenExtendResponse</returns>
        public async System.Threading.Tasks.Task<TokenExtendResponse> PostTokenExtendAsync (string contentType, TokenExtendRequest tokenExtendRequest = default(TokenExtendRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TokenExtendResponse> localVarResponse = await PostTokenExtendWithHttpInfoAsync(contentType, tokenExtendRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Token Extend #### Used to extend the period of time in which the session token is valid.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="tokenExtendRequest">##### Token Extend Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TokenExtendResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokenExtendResponse>> PostTokenExtendWithHttpInfoAsync (string contentType, TokenExtendRequest tokenExtendRequest = default(TokenExtendRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AuthenticationApi->PostTokenExtend");

            var localVarPath = "/TokenExtend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (tokenExtendRequest != null && tokenExtendRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tokenExtendRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokenExtendRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTokenExtend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenExtendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenExtendResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenExtendResponse)));
        }

        /// <summary>
        /// Token Validate #### Used to validate the user&#39;s session token.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="tokenValidateRequest">##### Token Validate Request Model (optional)</param>
        /// <returns>TokenValidateResponse</returns>
        public TokenValidateResponse PostTokenValidate (string contentType, TokenValidateRequest tokenValidateRequest = default(TokenValidateRequest))
        {
             ApiResponse<TokenValidateResponse> localVarResponse = PostTokenValidateWithHttpInfo(contentType, tokenValidateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Token Validate #### Used to validate the user&#39;s session token.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="tokenValidateRequest">##### Token Validate Request Model (optional)</param>
        /// <returns>ApiResponse of TokenValidateResponse</returns>
        public ApiResponse<TokenValidateResponse> PostTokenValidateWithHttpInfo (string contentType, TokenValidateRequest tokenValidateRequest = default(TokenValidateRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AuthenticationApi->PostTokenValidate");

            var localVarPath = "/TokenValidate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (tokenValidateRequest != null && tokenValidateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tokenValidateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokenValidateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTokenValidate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenValidateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenValidateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenValidateResponse)));
        }

        /// <summary>
        /// Token Validate #### Used to validate the user&#39;s session token.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="tokenValidateRequest">##### Token Validate Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TokenValidateResponse</returns>
        public async System.Threading.Tasks.Task<TokenValidateResponse> PostTokenValidateAsync (string contentType, TokenValidateRequest tokenValidateRequest = default(TokenValidateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TokenValidateResponse> localVarResponse = await PostTokenValidateWithHttpInfoAsync(contentType, tokenValidateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Token Validate #### Used to validate the user&#39;s session token.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="tokenValidateRequest">##### Token Validate Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TokenValidateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokenValidateResponse>> PostTokenValidateWithHttpInfoAsync (string contentType, TokenValidateRequest tokenValidateRequest = default(TokenValidateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AuthenticationApi->PostTokenValidate");

            var localVarPath = "/TokenValidate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (tokenValidateRequest != null && tokenValidateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tokenValidateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokenValidateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTokenValidate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenValidateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenValidateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenValidateResponse)));
        }

    }
}
