/*
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SigniFlow.Connect.Client;
using SigniFlow.Connect.Model;

namespace SigniFlow.Connect.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkFlowApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Workflow
        /// </summary>
        /// <remarks>
        /// #### Used to start a new workflow by passing a Base64 encoded document to SigniFlow
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createWorkflowRequest">##### Create Workflow Request Model</param>
        /// <returns>CreateWorkflowResponse</returns>
        CreateWorkflowResponse CreateWorkflow(string contentType, CreateWorkflowRequest createWorkflowRequest);

        /// <summary>
        /// Create Workflow
        /// </summary>
        /// <remarks>
        /// #### Used to start a new workflow by passing a Base64 encoded document to SigniFlow
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createWorkflowRequest">##### Create Workflow Request Model</param>
        /// <returns>ApiResponse of CreateWorkflowResponse</returns>
        ApiResponse<CreateWorkflowResponse> CreateWorkflowWithHttpInfo(string contentType, CreateWorkflowRequest createWorkflowRequest);
        /// <summary>
        /// Get Document
        /// </summary>
        /// <remarks>
        /// #### Used to download a document from SigniFlow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentRequest">##### Get Document Request Model (optional)</param>
        /// <returns>GetDocumentResponse</returns>
        GetDocumentResponse GetDocument(string contentType, GetDocumentRequest getDocumentRequest = default(GetDocumentRequest));

        /// <summary>
        /// Get Document
        /// </summary>
        /// <remarks>
        /// #### Used to download a document from SigniFlow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentRequest">##### Get Document Request Model (optional)</param>
        /// <returns>ApiResponse of GetDocumentResponse</returns>
        ApiResponse<GetDocumentResponse> GetDocumentWithHttpInfo(string contentType, GetDocumentRequest getDocumentRequest = default(GetDocumentRequest));
        /// <summary>
        /// Add a Workflow step
        /// </summary>
        /// <remarks>
        /// #### Used to add a step to a document Workflow process.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="addWorkflowStepV2Request">##### Add A Workflow Step Request Model (optional)</param>
        /// <returns>AddWokflowStepV2Response</returns>
        AddWokflowStepV2Response PostAddWorkflowStep(string contentType, AddWorkflowStepV2Request addWorkflowStepV2Request = default(AddWorkflowStepV2Request));

        /// <summary>
        /// Add a Workflow step
        /// </summary>
        /// <remarks>
        /// #### Used to add a step to a document Workflow process.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="addWorkflowStepV2Request">##### Add A Workflow Step Request Model (optional)</param>
        /// <returns>ApiResponse of AddWokflowStepV2Response</returns>
        ApiResponse<AddWokflowStepV2Response> PostAddWorkflowStepWithHttpInfo(string contentType, AddWorkflowStepV2Request addWorkflowStepV2Request = default(AddWorkflowStepV2Request));
        /// <summary>
        /// Cancel Flow
        /// </summary>
        /// <remarks>
        /// #### Used to cancel a document workflow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="cancelFlowRequest">##### Cancel Flow Request Model (optional)</param>
        /// <returns>CancelFlowResponse</returns>
        CancelFlowResponse PostCancelFlow(string contentType, CancelFlowRequest cancelFlowRequest = default(CancelFlowRequest));

        /// <summary>
        /// Cancel Flow
        /// </summary>
        /// <remarks>
        /// #### Used to cancel a document workflow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="cancelFlowRequest">##### Cancel Flow Request Model (optional)</param>
        /// <returns>ApiResponse of CancelFlowResponse</returns>
        ApiResponse<CancelFlowResponse> PostCancelFlowWithHttpInfo(string contentType, CancelFlowRequest cancelFlowRequest = default(CancelFlowRequest));
        /// <summary>
        /// Delete Document
        /// </summary>
        /// <remarks>
        /// #### This is used to delete a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="deleteDocRequest">##### Delete Document Request Model (optional)</param>
        /// <returns>DeleteDocResponse</returns>
        DeleteDocResponse PostDeleteDoc(string contentType, DeleteDocRequest deleteDocRequest = default(DeleteDocRequest));

        /// <summary>
        /// Delete Document
        /// </summary>
        /// <remarks>
        /// #### This is used to delete a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="deleteDocRequest">##### Delete Document Request Model (optional)</param>
        /// <returns>ApiResponse of DeleteDocResponse</returns>
        ApiResponse<DeleteDocResponse> PostDeleteDocWithHttpInfo(string contentType, DeleteDocRequest deleteDocRequest = default(DeleteDocRequest));
        /// <summary>
        /// Document Prepper Add Fields
        /// </summary>
        /// <remarks>
        /// #### Used to add fields to a document using the user&#39;s FlowID.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddFieldsFlowIDRequest">##### Document Prepper Add Fields Request Model (optional)</param>
        /// <returns>DocPrepperAddFieldsFlowIDResponse</returns>
        DocPrepperAddFieldsFlowIDResponse PostDocPrepperAddField(string contentType, DocPrepperAddFieldsFlowIDRequest docPrepperAddFieldsFlowIDRequest = default(DocPrepperAddFieldsFlowIDRequest));

        /// <summary>
        /// Document Prepper Add Fields
        /// </summary>
        /// <remarks>
        /// #### Used to add fields to a document using the user&#39;s FlowID.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddFieldsFlowIDRequest">##### Document Prepper Add Fields Request Model (optional)</param>
        /// <returns>ApiResponse of DocPrepperAddFieldsFlowIDResponse</returns>
        ApiResponse<DocPrepperAddFieldsFlowIDResponse> PostDocPrepperAddFieldWithHttpInfo(string contentType, DocPrepperAddFieldsFlowIDRequest docPrepperAddFieldsFlowIDRequest = default(DocPrepperAddFieldsFlowIDRequest));
        /// <summary>
        /// Document Prepper Add Advanced Fields
        /// </summary>
        /// <remarks>
        /// #### Used to add advanced fields to a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddAdvancedFieldsRequest">##### Document Prepper Add Advanced Fields Request Model (optional)</param>
        /// <returns>DocPrepperAddAdvancedFieldsResponse</returns>
        DocPrepperAddAdvancedFieldsResponse PostDocPrepperAdvancedFields(string contentType, DocPrepperAddAdvancedFieldsRequest docPrepperAddAdvancedFieldsRequest = default(DocPrepperAddAdvancedFieldsRequest));

        /// <summary>
        /// Document Prepper Add Advanced Fields
        /// </summary>
        /// <remarks>
        /// #### Used to add advanced fields to a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddAdvancedFieldsRequest">##### Document Prepper Add Advanced Fields Request Model (optional)</param>
        /// <returns>ApiResponse of DocPrepperAddAdvancedFieldsResponse</returns>
        ApiResponse<DocPrepperAddAdvancedFieldsResponse> PostDocPrepperAdvancedFieldsWithHttpInfo(string contentType, DocPrepperAddAdvancedFieldsRequest docPrepperAddAdvancedFieldsRequest = default(DocPrepperAddAdvancedFieldsRequest));
        /// <summary>
        /// FullWorkflow
        /// </summary>
        /// <remarks>
        /// #### Used to create a fullworkflow for a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="fullWorkflowRequest">##### FullWorkflow Request Model (optional)</param>
        /// <returns>FullWorkflowResponse</returns>
        FullWorkflowResponse PostFullWorkflow(string contentType, FullWorkflowRequest fullWorkflowRequest = default(FullWorkflowRequest));

        /// <summary>
        /// FullWorkflow
        /// </summary>
        /// <remarks>
        /// #### Used to create a fullworkflow for a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="fullWorkflowRequest">##### FullWorkflow Request Model (optional)</param>
        /// <returns>ApiResponse of FullWorkflowResponse</returns>
        ApiResponse<FullWorkflowResponse> PostFullWorkflowWithHttpInfo(string contentType, FullWorkflowRequest fullWorkflowRequest = default(FullWorkflowRequest));
        /// <summary>
        /// Get Document Status
        /// </summary>
        /// <remarks>
        /// #### Used to get the status of the document ex. pending/completed/rejected.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocStatusRequest">##### Get Document Status Request Model (optional)</param>
        /// <returns>GetDocStatusResponse</returns>
        GetDocStatusResponse PostGetDocStatus(string contentType, GetDocStatusRequest getDocStatusRequest = default(GetDocStatusRequest));

        /// <summary>
        /// Get Document Status
        /// </summary>
        /// <remarks>
        /// #### Used to get the status of the document ex. pending/completed/rejected.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocStatusRequest">##### Get Document Status Request Model (optional)</param>
        /// <returns>ApiResponse of GetDocStatusResponse</returns>
        ApiResponse<GetDocStatusResponse> PostGetDocStatusWithHttpInfo(string contentType, GetDocStatusRequest getDocStatusRequest = default(GetDocStatusRequest));
        /// <summary>
        /// Initiate Flow
        /// </summary>
        /// <remarks>
        /// #### Used to initiate aworkflow of a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowRequest">##### Initiate Flow Request Model (optional)</param>
        /// <returns>InitiateFlowResponse</returns>
        InitiateFlowResponse PostInitiateFlow(string contentType, InitiateFlowRequest initiateFlowRequest = default(InitiateFlowRequest));

        /// <summary>
        /// Initiate Flow
        /// </summary>
        /// <remarks>
        /// #### Used to initiate aworkflow of a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowRequest">##### Initiate Flow Request Model (optional)</param>
        /// <returns>ApiResponse of InitiateFlowResponse</returns>
        ApiResponse<InitiateFlowResponse> PostInitiateFlowWithHttpInfo(string contentType, InitiateFlowRequest initiateFlowRequest = default(InitiateFlowRequest));
        /// <summary>
        /// Initiate Flow No Email
        /// </summary>
        /// <remarks>
        /// #### Used to initiate a workflow without sending out emails.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoEmailRequest">##### Initiate Flow No Email Request Model (optional)</param>
        /// <returns>InitiateFlowNoEmailResponse</returns>
        InitiateFlowNoEmailResponse PostInitiateFlowNoEmail(string contentType, InitiateFlowNoEmailRequest initiateFlowNoEmailRequest = default(InitiateFlowNoEmailRequest));

        /// <summary>
        /// Initiate Flow No Email
        /// </summary>
        /// <remarks>
        /// #### Used to initiate a workflow without sending out emails.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoEmailRequest">##### Initiate Flow No Email Request Model (optional)</param>
        /// <returns>ApiResponse of InitiateFlowNoEmailResponse</returns>
        ApiResponse<InitiateFlowNoEmailResponse> PostInitiateFlowNoEmailWithHttpInfo(string contentType, InitiateFlowNoEmailRequest initiateFlowNoEmailRequest = default(InitiateFlowNoEmailRequest));
        /// <summary>
        /// Initiate Flow No Initial Email
        /// </summary>
        /// <remarks>
        /// #### Used to initiate a document workflow without an initial email being sent to the user.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoInitialEmailRequest">##### Initiate Flow No Initial Email Request Model (optional)</param>
        /// <returns>InitiateFlowNoInitialEmailResponse</returns>
        InitiateFlowNoInitialEmailResponse PostInitiateFlowNoInitialEmail(string contentType, InitiateFlowNoInitialEmailRequest initiateFlowNoInitialEmailRequest = default(InitiateFlowNoInitialEmailRequest));

        /// <summary>
        /// Initiate Flow No Initial Email
        /// </summary>
        /// <remarks>
        /// #### Used to initiate a document workflow without an initial email being sent to the user.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoInitialEmailRequest">##### Initiate Flow No Initial Email Request Model (optional)</param>
        /// <returns>ApiResponse of InitiateFlowNoInitialEmailResponse</returns>
        ApiResponse<InitiateFlowNoInitialEmailResponse> PostInitiateFlowNoInitialEmailWithHttpInfo(string contentType, InitiateFlowNoInitialEmailRequest initiateFlowNoInitialEmailRequest = default(InitiateFlowNoInitialEmailRequest));
        /// <summary>
        /// Workflow Sign
        /// </summary>
        /// <remarks>
        /// #### Used to send a request to a user to sign a document workflow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="workflowSignRequest">##### Workflow Sign Request Model (optional)</param>
        /// <returns>WorkflowSignResponse</returns>
        WorkflowSignResponse PostWorkflowSign(string contentType, WorkflowSignRequest workflowSignRequest = default(WorkflowSignRequest));

        /// <summary>
        /// Workflow Sign
        /// </summary>
        /// <remarks>
        /// #### Used to send a request to a user to sign a document workflow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="workflowSignRequest">##### Workflow Sign Request Model (optional)</param>
        /// <returns>ApiResponse of WorkflowSignResponse</returns>
        ApiResponse<WorkflowSignResponse> PostWorkflowSignWithHttpInfo(string contentType, WorkflowSignRequest workflowSignRequest = default(WorkflowSignRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkFlowApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Workflow
        /// </summary>
        /// <remarks>
        /// #### Used to start a new workflow by passing a Base64 encoded document to SigniFlow
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createWorkflowRequest">##### Create Workflow Request Model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWorkflowResponse</returns>
        System.Threading.Tasks.Task<CreateWorkflowResponse> CreateWorkflowAsync(string contentType, CreateWorkflowRequest createWorkflowRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Workflow
        /// </summary>
        /// <remarks>
        /// #### Used to start a new workflow by passing a Base64 encoded document to SigniFlow
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createWorkflowRequest">##### Create Workflow Request Model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWorkflowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateWorkflowResponse>> CreateWorkflowWithHttpInfoAsync(string contentType, CreateWorkflowRequest createWorkflowRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Document
        /// </summary>
        /// <remarks>
        /// #### Used to download a document from SigniFlow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentRequest">##### Get Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDocumentResponse</returns>
        System.Threading.Tasks.Task<GetDocumentResponse> GetDocumentAsync(string contentType, GetDocumentRequest getDocumentRequest = default(GetDocumentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Document
        /// </summary>
        /// <remarks>
        /// #### Used to download a document from SigniFlow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentRequest">##### Get Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocumentResponse>> GetDocumentWithHttpInfoAsync(string contentType, GetDocumentRequest getDocumentRequest = default(GetDocumentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a Workflow step
        /// </summary>
        /// <remarks>
        /// #### Used to add a step to a document Workflow process.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="addWorkflowStepV2Request">##### Add A Workflow Step Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddWokflowStepV2Response</returns>
        System.Threading.Tasks.Task<AddWokflowStepV2Response> PostAddWorkflowStepAsync(string contentType, AddWorkflowStepV2Request addWorkflowStepV2Request = default(AddWorkflowStepV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a Workflow step
        /// </summary>
        /// <remarks>
        /// #### Used to add a step to a document Workflow process.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="addWorkflowStepV2Request">##### Add A Workflow Step Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddWokflowStepV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddWokflowStepV2Response>> PostAddWorkflowStepWithHttpInfoAsync(string contentType, AddWorkflowStepV2Request addWorkflowStepV2Request = default(AddWorkflowStepV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel Flow
        /// </summary>
        /// <remarks>
        /// #### Used to cancel a document workflow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="cancelFlowRequest">##### Cancel Flow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelFlowResponse</returns>
        System.Threading.Tasks.Task<CancelFlowResponse> PostCancelFlowAsync(string contentType, CancelFlowRequest cancelFlowRequest = default(CancelFlowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Flow
        /// </summary>
        /// <remarks>
        /// #### Used to cancel a document workflow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="cancelFlowRequest">##### Cancel Flow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelFlowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelFlowResponse>> PostCancelFlowWithHttpInfoAsync(string contentType, CancelFlowRequest cancelFlowRequest = default(CancelFlowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Document
        /// </summary>
        /// <remarks>
        /// #### This is used to delete a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="deleteDocRequest">##### Delete Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteDocResponse</returns>
        System.Threading.Tasks.Task<DeleteDocResponse> PostDeleteDocAsync(string contentType, DeleteDocRequest deleteDocRequest = default(DeleteDocRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Document
        /// </summary>
        /// <remarks>
        /// #### This is used to delete a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="deleteDocRequest">##### Delete Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteDocResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteDocResponse>> PostDeleteDocWithHttpInfoAsync(string contentType, DeleteDocRequest deleteDocRequest = default(DeleteDocRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Document Prepper Add Fields
        /// </summary>
        /// <remarks>
        /// #### Used to add fields to a document using the user&#39;s FlowID.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddFieldsFlowIDRequest">##### Document Prepper Add Fields Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocPrepperAddFieldsFlowIDResponse</returns>
        System.Threading.Tasks.Task<DocPrepperAddFieldsFlowIDResponse> PostDocPrepperAddFieldAsync(string contentType, DocPrepperAddFieldsFlowIDRequest docPrepperAddFieldsFlowIDRequest = default(DocPrepperAddFieldsFlowIDRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Document Prepper Add Fields
        /// </summary>
        /// <remarks>
        /// #### Used to add fields to a document using the user&#39;s FlowID.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddFieldsFlowIDRequest">##### Document Prepper Add Fields Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocPrepperAddFieldsFlowIDResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocPrepperAddFieldsFlowIDResponse>> PostDocPrepperAddFieldWithHttpInfoAsync(string contentType, DocPrepperAddFieldsFlowIDRequest docPrepperAddFieldsFlowIDRequest = default(DocPrepperAddFieldsFlowIDRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Document Prepper Add Advanced Fields
        /// </summary>
        /// <remarks>
        /// #### Used to add advanced fields to a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddAdvancedFieldsRequest">##### Document Prepper Add Advanced Fields Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocPrepperAddAdvancedFieldsResponse</returns>
        System.Threading.Tasks.Task<DocPrepperAddAdvancedFieldsResponse> PostDocPrepperAdvancedFieldsAsync(string contentType, DocPrepperAddAdvancedFieldsRequest docPrepperAddAdvancedFieldsRequest = default(DocPrepperAddAdvancedFieldsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Document Prepper Add Advanced Fields
        /// </summary>
        /// <remarks>
        /// #### Used to add advanced fields to a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddAdvancedFieldsRequest">##### Document Prepper Add Advanced Fields Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocPrepperAddAdvancedFieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocPrepperAddAdvancedFieldsResponse>> PostDocPrepperAdvancedFieldsWithHttpInfoAsync(string contentType, DocPrepperAddAdvancedFieldsRequest docPrepperAddAdvancedFieldsRequest = default(DocPrepperAddAdvancedFieldsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// FullWorkflow
        /// </summary>
        /// <remarks>
        /// #### Used to create a fullworkflow for a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="fullWorkflowRequest">##### FullWorkflow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FullWorkflowResponse</returns>
        System.Threading.Tasks.Task<FullWorkflowResponse> PostFullWorkflowAsync(string contentType, FullWorkflowRequest fullWorkflowRequest = default(FullWorkflowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// FullWorkflow
        /// </summary>
        /// <remarks>
        /// #### Used to create a fullworkflow for a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="fullWorkflowRequest">##### FullWorkflow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FullWorkflowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FullWorkflowResponse>> PostFullWorkflowWithHttpInfoAsync(string contentType, FullWorkflowRequest fullWorkflowRequest = default(FullWorkflowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Document Status
        /// </summary>
        /// <remarks>
        /// #### Used to get the status of the document ex. pending/completed/rejected.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocStatusRequest">##### Get Document Status Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDocStatusResponse</returns>
        System.Threading.Tasks.Task<GetDocStatusResponse> PostGetDocStatusAsync(string contentType, GetDocStatusRequest getDocStatusRequest = default(GetDocStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Document Status
        /// </summary>
        /// <remarks>
        /// #### Used to get the status of the document ex. pending/completed/rejected.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocStatusRequest">##### Get Document Status Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDocStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocStatusResponse>> PostGetDocStatusWithHttpInfoAsync(string contentType, GetDocStatusRequest getDocStatusRequest = default(GetDocStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Initiate Flow
        /// </summary>
        /// <remarks>
        /// #### Used to initiate aworkflow of a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowRequest">##### Initiate Flow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitiateFlowResponse</returns>
        System.Threading.Tasks.Task<InitiateFlowResponse> PostInitiateFlowAsync(string contentType, InitiateFlowRequest initiateFlowRequest = default(InitiateFlowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Initiate Flow
        /// </summary>
        /// <remarks>
        /// #### Used to initiate aworkflow of a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowRequest">##### Initiate Flow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitiateFlowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InitiateFlowResponse>> PostInitiateFlowWithHttpInfoAsync(string contentType, InitiateFlowRequest initiateFlowRequest = default(InitiateFlowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Initiate Flow No Email
        /// </summary>
        /// <remarks>
        /// #### Used to initiate a workflow without sending out emails.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoEmailRequest">##### Initiate Flow No Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitiateFlowNoEmailResponse</returns>
        System.Threading.Tasks.Task<InitiateFlowNoEmailResponse> PostInitiateFlowNoEmailAsync(string contentType, InitiateFlowNoEmailRequest initiateFlowNoEmailRequest = default(InitiateFlowNoEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Initiate Flow No Email
        /// </summary>
        /// <remarks>
        /// #### Used to initiate a workflow without sending out emails.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoEmailRequest">##### Initiate Flow No Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitiateFlowNoEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InitiateFlowNoEmailResponse>> PostInitiateFlowNoEmailWithHttpInfoAsync(string contentType, InitiateFlowNoEmailRequest initiateFlowNoEmailRequest = default(InitiateFlowNoEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Initiate Flow No Initial Email
        /// </summary>
        /// <remarks>
        /// #### Used to initiate a document workflow without an initial email being sent to the user.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoInitialEmailRequest">##### Initiate Flow No Initial Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitiateFlowNoInitialEmailResponse</returns>
        System.Threading.Tasks.Task<InitiateFlowNoInitialEmailResponse> PostInitiateFlowNoInitialEmailAsync(string contentType, InitiateFlowNoInitialEmailRequest initiateFlowNoInitialEmailRequest = default(InitiateFlowNoInitialEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Initiate Flow No Initial Email
        /// </summary>
        /// <remarks>
        /// #### Used to initiate a document workflow without an initial email being sent to the user.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoInitialEmailRequest">##### Initiate Flow No Initial Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitiateFlowNoInitialEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InitiateFlowNoInitialEmailResponse>> PostInitiateFlowNoInitialEmailWithHttpInfoAsync(string contentType, InitiateFlowNoInitialEmailRequest initiateFlowNoInitialEmailRequest = default(InitiateFlowNoInitialEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Workflow Sign
        /// </summary>
        /// <remarks>
        /// #### Used to send a request to a user to sign a document workflow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="workflowSignRequest">##### Workflow Sign Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowSignResponse</returns>
        System.Threading.Tasks.Task<WorkflowSignResponse> PostWorkflowSignAsync(string contentType, WorkflowSignRequest workflowSignRequest = default(WorkflowSignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Workflow Sign
        /// </summary>
        /// <remarks>
        /// #### Used to send a request to a user to sign a document workflow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="workflowSignRequest">##### Workflow Sign Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowSignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowSignResponse>> PostWorkflowSignWithHttpInfoAsync(string contentType, WorkflowSignRequest workflowSignRequest = default(WorkflowSignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkFlowApi : IWorkFlowApiSync, IWorkFlowApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkFlowApi : IWorkFlowApi
    {
        private SigniFlow.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkFlowApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkFlowApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkFlowApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkFlowApi(String basePath)
        {
            this.Configuration = SigniFlow.Connect.Client.Configuration.MergeConfigurations(
                SigniFlow.Connect.Client.GlobalConfiguration.Instance,
                new SigniFlow.Connect.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SigniFlow.Connect.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SigniFlow.Connect.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkFlowApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkFlowApi(SigniFlow.Connect.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SigniFlow.Connect.Client.Configuration.MergeConfigurations(
                SigniFlow.Connect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SigniFlow.Connect.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SigniFlow.Connect.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkFlowApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WorkFlowApi(SigniFlow.Connect.Client.ISynchronousClient client, SigniFlow.Connect.Client.IAsynchronousClient asyncClient, SigniFlow.Connect.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SigniFlow.Connect.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SigniFlow.Connect.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SigniFlow.Connect.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SigniFlow.Connect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Workflow #### Used to start a new workflow by passing a Base64 encoded document to SigniFlow
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createWorkflowRequest">##### Create Workflow Request Model</param>
        /// <returns>CreateWorkflowResponse</returns>
        public CreateWorkflowResponse CreateWorkflow(string contentType, CreateWorkflowRequest createWorkflowRequest)
        {
            SigniFlow.Connect.Client.ApiResponse<CreateWorkflowResponse> localVarResponse = CreateWorkflowWithHttpInfo(contentType, createWorkflowRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Workflow #### Used to start a new workflow by passing a Base64 encoded document to SigniFlow
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createWorkflowRequest">##### Create Workflow Request Model</param>
        /// <returns>ApiResponse of CreateWorkflowResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<CreateWorkflowResponse> CreateWorkflowWithHttpInfo(string contentType, CreateWorkflowRequest createWorkflowRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->CreateWorkflow");

            // verify the required parameter 'createWorkflowRequest' is set
            if (createWorkflowRequest == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'createWorkflowRequest' when calling WorkFlowApi->CreateWorkflow");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = createWorkflowRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateWorkflowResponse>("/CreateWorkflow", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWorkflow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Workflow #### Used to start a new workflow by passing a Base64 encoded document to SigniFlow
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createWorkflowRequest">##### Create Workflow Request Model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWorkflowResponse</returns>
        public async System.Threading.Tasks.Task<CreateWorkflowResponse> CreateWorkflowAsync(string contentType, CreateWorkflowRequest createWorkflowRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<CreateWorkflowResponse> localVarResponse = await CreateWorkflowWithHttpInfoAsync(contentType, createWorkflowRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Workflow #### Used to start a new workflow by passing a Base64 encoded document to SigniFlow
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createWorkflowRequest">##### Create Workflow Request Model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWorkflowResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<CreateWorkflowResponse>> CreateWorkflowWithHttpInfoAsync(string contentType, CreateWorkflowRequest createWorkflowRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->CreateWorkflow");

            // verify the required parameter 'createWorkflowRequest' is set
            if (createWorkflowRequest == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'createWorkflowRequest' when calling WorkFlowApi->CreateWorkflow");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = createWorkflowRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateWorkflowResponse>("/CreateWorkflow", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWorkflow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Document #### Used to download a document from SigniFlow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentRequest">##### Get Document Request Model (optional)</param>
        /// <returns>GetDocumentResponse</returns>
        public GetDocumentResponse GetDocument(string contentType, GetDocumentRequest getDocumentRequest = default(GetDocumentRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<GetDocumentResponse> localVarResponse = GetDocumentWithHttpInfo(contentType, getDocumentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document #### Used to download a document from SigniFlow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentRequest">##### Get Document Request Model (optional)</param>
        /// <returns>ApiResponse of GetDocumentResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<GetDocumentResponse> GetDocumentWithHttpInfo(string contentType, GetDocumentRequest getDocumentRequest = default(GetDocumentRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->GetDocument");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = getDocumentRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDocumentResponse>("/GetDoc", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Document #### Used to download a document from SigniFlow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentRequest">##### Get Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDocumentResponse</returns>
        public async System.Threading.Tasks.Task<GetDocumentResponse> GetDocumentAsync(string contentType, GetDocumentRequest getDocumentRequest = default(GetDocumentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<GetDocumentResponse> localVarResponse = await GetDocumentWithHttpInfoAsync(contentType, getDocumentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document #### Used to download a document from SigniFlow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentRequest">##### Get Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<GetDocumentResponse>> GetDocumentWithHttpInfoAsync(string contentType, GetDocumentRequest getDocumentRequest = default(GetDocumentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->GetDocument");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = getDocumentRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDocumentResponse>("/GetDoc", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a Workflow step #### Used to add a step to a document Workflow process.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="addWorkflowStepV2Request">##### Add A Workflow Step Request Model (optional)</param>
        /// <returns>AddWokflowStepV2Response</returns>
        public AddWokflowStepV2Response PostAddWorkflowStep(string contentType, AddWorkflowStepV2Request addWorkflowStepV2Request = default(AddWorkflowStepV2Request))
        {
            SigniFlow.Connect.Client.ApiResponse<AddWokflowStepV2Response> localVarResponse = PostAddWorkflowStepWithHttpInfo(contentType, addWorkflowStepV2Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a Workflow step #### Used to add a step to a document Workflow process.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="addWorkflowStepV2Request">##### Add A Workflow Step Request Model (optional)</param>
        /// <returns>ApiResponse of AddWokflowStepV2Response</returns>
        public SigniFlow.Connect.Client.ApiResponse<AddWokflowStepV2Response> PostAddWorkflowStepWithHttpInfo(string contentType, AddWorkflowStepV2Request addWorkflowStepV2Request = default(AddWorkflowStepV2Request))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostAddWorkflowStep");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = addWorkflowStepV2Request;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AddWokflowStepV2Response>("/AddWorkflowStepV2", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAddWorkflowStep", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a Workflow step #### Used to add a step to a document Workflow process.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="addWorkflowStepV2Request">##### Add A Workflow Step Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddWokflowStepV2Response</returns>
        public async System.Threading.Tasks.Task<AddWokflowStepV2Response> PostAddWorkflowStepAsync(string contentType, AddWorkflowStepV2Request addWorkflowStepV2Request = default(AddWorkflowStepV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<AddWokflowStepV2Response> localVarResponse = await PostAddWorkflowStepWithHttpInfoAsync(contentType, addWorkflowStepV2Request, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a Workflow step #### Used to add a step to a document Workflow process.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="addWorkflowStepV2Request">##### Add A Workflow Step Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddWokflowStepV2Response)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<AddWokflowStepV2Response>> PostAddWorkflowStepWithHttpInfoAsync(string contentType, AddWorkflowStepV2Request addWorkflowStepV2Request = default(AddWorkflowStepV2Request), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostAddWorkflowStep");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = addWorkflowStepV2Request;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AddWokflowStepV2Response>("/AddWorkflowStepV2", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAddWorkflowStep", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Flow #### Used to cancel a document workflow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="cancelFlowRequest">##### Cancel Flow Request Model (optional)</param>
        /// <returns>CancelFlowResponse</returns>
        public CancelFlowResponse PostCancelFlow(string contentType, CancelFlowRequest cancelFlowRequest = default(CancelFlowRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<CancelFlowResponse> localVarResponse = PostCancelFlowWithHttpInfo(contentType, cancelFlowRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Flow #### Used to cancel a document workflow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="cancelFlowRequest">##### Cancel Flow Request Model (optional)</param>
        /// <returns>ApiResponse of CancelFlowResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<CancelFlowResponse> PostCancelFlowWithHttpInfo(string contentType, CancelFlowRequest cancelFlowRequest = default(CancelFlowRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostCancelFlow");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = cancelFlowRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CancelFlowResponse>("/CancelFlow", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCancelFlow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Flow #### Used to cancel a document workflow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="cancelFlowRequest">##### Cancel Flow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelFlowResponse</returns>
        public async System.Threading.Tasks.Task<CancelFlowResponse> PostCancelFlowAsync(string contentType, CancelFlowRequest cancelFlowRequest = default(CancelFlowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<CancelFlowResponse> localVarResponse = await PostCancelFlowWithHttpInfoAsync(contentType, cancelFlowRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Flow #### Used to cancel a document workflow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="cancelFlowRequest">##### Cancel Flow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelFlowResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<CancelFlowResponse>> PostCancelFlowWithHttpInfoAsync(string contentType, CancelFlowRequest cancelFlowRequest = default(CancelFlowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostCancelFlow");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = cancelFlowRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CancelFlowResponse>("/CancelFlow", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCancelFlow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Document #### This is used to delete a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="deleteDocRequest">##### Delete Document Request Model (optional)</param>
        /// <returns>DeleteDocResponse</returns>
        public DeleteDocResponse PostDeleteDoc(string contentType, DeleteDocRequest deleteDocRequest = default(DeleteDocRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<DeleteDocResponse> localVarResponse = PostDeleteDocWithHttpInfo(contentType, deleteDocRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Document #### This is used to delete a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="deleteDocRequest">##### Delete Document Request Model (optional)</param>
        /// <returns>ApiResponse of DeleteDocResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<DeleteDocResponse> PostDeleteDocWithHttpInfo(string contentType, DeleteDocRequest deleteDocRequest = default(DeleteDocRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostDeleteDoc");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = deleteDocRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DeleteDocResponse>("/DeleteDoc", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDeleteDoc", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Document #### This is used to delete a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="deleteDocRequest">##### Delete Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteDocResponse</returns>
        public async System.Threading.Tasks.Task<DeleteDocResponse> PostDeleteDocAsync(string contentType, DeleteDocRequest deleteDocRequest = default(DeleteDocRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<DeleteDocResponse> localVarResponse = await PostDeleteDocWithHttpInfoAsync(contentType, deleteDocRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Document #### This is used to delete a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="deleteDocRequest">##### Delete Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteDocResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<DeleteDocResponse>> PostDeleteDocWithHttpInfoAsync(string contentType, DeleteDocRequest deleteDocRequest = default(DeleteDocRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostDeleteDoc");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = deleteDocRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteDocResponse>("/DeleteDoc", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDeleteDoc", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document Prepper Add Fields #### Used to add fields to a document using the user&#39;s FlowID.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddFieldsFlowIDRequest">##### Document Prepper Add Fields Request Model (optional)</param>
        /// <returns>DocPrepperAddFieldsFlowIDResponse</returns>
        public DocPrepperAddFieldsFlowIDResponse PostDocPrepperAddField(string contentType, DocPrepperAddFieldsFlowIDRequest docPrepperAddFieldsFlowIDRequest = default(DocPrepperAddFieldsFlowIDRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<DocPrepperAddFieldsFlowIDResponse> localVarResponse = PostDocPrepperAddFieldWithHttpInfo(contentType, docPrepperAddFieldsFlowIDRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document Prepper Add Fields #### Used to add fields to a document using the user&#39;s FlowID.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddFieldsFlowIDRequest">##### Document Prepper Add Fields Request Model (optional)</param>
        /// <returns>ApiResponse of DocPrepperAddFieldsFlowIDResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<DocPrepperAddFieldsFlowIDResponse> PostDocPrepperAddFieldWithHttpInfo(string contentType, DocPrepperAddFieldsFlowIDRequest docPrepperAddFieldsFlowIDRequest = default(DocPrepperAddFieldsFlowIDRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostDocPrepperAddField");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = docPrepperAddFieldsFlowIDRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DocPrepperAddFieldsFlowIDResponse>("/DocPrepperAddFieldsFlowID", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDocPrepperAddField", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document Prepper Add Fields #### Used to add fields to a document using the user&#39;s FlowID.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddFieldsFlowIDRequest">##### Document Prepper Add Fields Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocPrepperAddFieldsFlowIDResponse</returns>
        public async System.Threading.Tasks.Task<DocPrepperAddFieldsFlowIDResponse> PostDocPrepperAddFieldAsync(string contentType, DocPrepperAddFieldsFlowIDRequest docPrepperAddFieldsFlowIDRequest = default(DocPrepperAddFieldsFlowIDRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<DocPrepperAddFieldsFlowIDResponse> localVarResponse = await PostDocPrepperAddFieldWithHttpInfoAsync(contentType, docPrepperAddFieldsFlowIDRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document Prepper Add Fields #### Used to add fields to a document using the user&#39;s FlowID.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddFieldsFlowIDRequest">##### Document Prepper Add Fields Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocPrepperAddFieldsFlowIDResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<DocPrepperAddFieldsFlowIDResponse>> PostDocPrepperAddFieldWithHttpInfoAsync(string contentType, DocPrepperAddFieldsFlowIDRequest docPrepperAddFieldsFlowIDRequest = default(DocPrepperAddFieldsFlowIDRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostDocPrepperAddField");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = docPrepperAddFieldsFlowIDRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DocPrepperAddFieldsFlowIDResponse>("/DocPrepperAddFieldsFlowID", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDocPrepperAddField", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document Prepper Add Advanced Fields #### Used to add advanced fields to a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddAdvancedFieldsRequest">##### Document Prepper Add Advanced Fields Request Model (optional)</param>
        /// <returns>DocPrepperAddAdvancedFieldsResponse</returns>
        public DocPrepperAddAdvancedFieldsResponse PostDocPrepperAdvancedFields(string contentType, DocPrepperAddAdvancedFieldsRequest docPrepperAddAdvancedFieldsRequest = default(DocPrepperAddAdvancedFieldsRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<DocPrepperAddAdvancedFieldsResponse> localVarResponse = PostDocPrepperAdvancedFieldsWithHttpInfo(contentType, docPrepperAddAdvancedFieldsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document Prepper Add Advanced Fields #### Used to add advanced fields to a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddAdvancedFieldsRequest">##### Document Prepper Add Advanced Fields Request Model (optional)</param>
        /// <returns>ApiResponse of DocPrepperAddAdvancedFieldsResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<DocPrepperAddAdvancedFieldsResponse> PostDocPrepperAdvancedFieldsWithHttpInfo(string contentType, DocPrepperAddAdvancedFieldsRequest docPrepperAddAdvancedFieldsRequest = default(DocPrepperAddAdvancedFieldsRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostDocPrepperAdvancedFields");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = docPrepperAddAdvancedFieldsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DocPrepperAddAdvancedFieldsResponse>("/DocPrepperAdvancedFields", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDocPrepperAdvancedFields", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Document Prepper Add Advanced Fields #### Used to add advanced fields to a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddAdvancedFieldsRequest">##### Document Prepper Add Advanced Fields Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocPrepperAddAdvancedFieldsResponse</returns>
        public async System.Threading.Tasks.Task<DocPrepperAddAdvancedFieldsResponse> PostDocPrepperAdvancedFieldsAsync(string contentType, DocPrepperAddAdvancedFieldsRequest docPrepperAddAdvancedFieldsRequest = default(DocPrepperAddAdvancedFieldsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<DocPrepperAddAdvancedFieldsResponse> localVarResponse = await PostDocPrepperAdvancedFieldsWithHttpInfoAsync(contentType, docPrepperAddAdvancedFieldsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Document Prepper Add Advanced Fields #### Used to add advanced fields to a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddAdvancedFieldsRequest">##### Document Prepper Add Advanced Fields Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocPrepperAddAdvancedFieldsResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<DocPrepperAddAdvancedFieldsResponse>> PostDocPrepperAdvancedFieldsWithHttpInfoAsync(string contentType, DocPrepperAddAdvancedFieldsRequest docPrepperAddAdvancedFieldsRequest = default(DocPrepperAddAdvancedFieldsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostDocPrepperAdvancedFields");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = docPrepperAddAdvancedFieldsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DocPrepperAddAdvancedFieldsResponse>("/DocPrepperAdvancedFields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDocPrepperAdvancedFields", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// FullWorkflow #### Used to create a fullworkflow for a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="fullWorkflowRequest">##### FullWorkflow Request Model (optional)</param>
        /// <returns>FullWorkflowResponse</returns>
        public FullWorkflowResponse PostFullWorkflow(string contentType, FullWorkflowRequest fullWorkflowRequest = default(FullWorkflowRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<FullWorkflowResponse> localVarResponse = PostFullWorkflowWithHttpInfo(contentType, fullWorkflowRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// FullWorkflow #### Used to create a fullworkflow for a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="fullWorkflowRequest">##### FullWorkflow Request Model (optional)</param>
        /// <returns>ApiResponse of FullWorkflowResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<FullWorkflowResponse> PostFullWorkflowWithHttpInfo(string contentType, FullWorkflowRequest fullWorkflowRequest = default(FullWorkflowRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostFullWorkflow");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = fullWorkflowRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FullWorkflowResponse>("/FullWorkflow", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostFullWorkflow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// FullWorkflow #### Used to create a fullworkflow for a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="fullWorkflowRequest">##### FullWorkflow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FullWorkflowResponse</returns>
        public async System.Threading.Tasks.Task<FullWorkflowResponse> PostFullWorkflowAsync(string contentType, FullWorkflowRequest fullWorkflowRequest = default(FullWorkflowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<FullWorkflowResponse> localVarResponse = await PostFullWorkflowWithHttpInfoAsync(contentType, fullWorkflowRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// FullWorkflow #### Used to create a fullworkflow for a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="fullWorkflowRequest">##### FullWorkflow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FullWorkflowResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<FullWorkflowResponse>> PostFullWorkflowWithHttpInfoAsync(string contentType, FullWorkflowRequest fullWorkflowRequest = default(FullWorkflowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostFullWorkflow");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = fullWorkflowRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FullWorkflowResponse>("/FullWorkflow", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostFullWorkflow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Document Status #### Used to get the status of the document ex. pending/completed/rejected.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocStatusRequest">##### Get Document Status Request Model (optional)</param>
        /// <returns>GetDocStatusResponse</returns>
        public GetDocStatusResponse PostGetDocStatus(string contentType, GetDocStatusRequest getDocStatusRequest = default(GetDocStatusRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<GetDocStatusResponse> localVarResponse = PostGetDocStatusWithHttpInfo(contentType, getDocStatusRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document Status #### Used to get the status of the document ex. pending/completed/rejected.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocStatusRequest">##### Get Document Status Request Model (optional)</param>
        /// <returns>ApiResponse of GetDocStatusResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<GetDocStatusResponse> PostGetDocStatusWithHttpInfo(string contentType, GetDocStatusRequest getDocStatusRequest = default(GetDocStatusRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostGetDocStatus");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = getDocStatusRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDocStatusResponse>("/GetDocStatus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGetDocStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Document Status #### Used to get the status of the document ex. pending/completed/rejected.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocStatusRequest">##### Get Document Status Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDocStatusResponse</returns>
        public async System.Threading.Tasks.Task<GetDocStatusResponse> PostGetDocStatusAsync(string contentType, GetDocStatusRequest getDocStatusRequest = default(GetDocStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<GetDocStatusResponse> localVarResponse = await PostGetDocStatusWithHttpInfoAsync(contentType, getDocStatusRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document Status #### Used to get the status of the document ex. pending/completed/rejected.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocStatusRequest">##### Get Document Status Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDocStatusResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<GetDocStatusResponse>> PostGetDocStatusWithHttpInfoAsync(string contentType, GetDocStatusRequest getDocStatusRequest = default(GetDocStatusRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostGetDocStatus");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = getDocStatusRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDocStatusResponse>("/GetDocStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGetDocStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate Flow #### Used to initiate aworkflow of a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowRequest">##### Initiate Flow Request Model (optional)</param>
        /// <returns>InitiateFlowResponse</returns>
        public InitiateFlowResponse PostInitiateFlow(string contentType, InitiateFlowRequest initiateFlowRequest = default(InitiateFlowRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<InitiateFlowResponse> localVarResponse = PostInitiateFlowWithHttpInfo(contentType, initiateFlowRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate Flow #### Used to initiate aworkflow of a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowRequest">##### Initiate Flow Request Model (optional)</param>
        /// <returns>ApiResponse of InitiateFlowResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<InitiateFlowResponse> PostInitiateFlowWithHttpInfo(string contentType, InitiateFlowRequest initiateFlowRequest = default(InitiateFlowRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostInitiateFlow");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = initiateFlowRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<InitiateFlowResponse>("/InitiateFlow", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInitiateFlow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate Flow #### Used to initiate aworkflow of a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowRequest">##### Initiate Flow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitiateFlowResponse</returns>
        public async System.Threading.Tasks.Task<InitiateFlowResponse> PostInitiateFlowAsync(string contentType, InitiateFlowRequest initiateFlowRequest = default(InitiateFlowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<InitiateFlowResponse> localVarResponse = await PostInitiateFlowWithHttpInfoAsync(contentType, initiateFlowRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate Flow #### Used to initiate aworkflow of a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowRequest">##### Initiate Flow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitiateFlowResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<InitiateFlowResponse>> PostInitiateFlowWithHttpInfoAsync(string contentType, InitiateFlowRequest initiateFlowRequest = default(InitiateFlowRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostInitiateFlow");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = initiateFlowRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InitiateFlowResponse>("/InitiateFlow", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInitiateFlow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate Flow No Email #### Used to initiate a workflow without sending out emails.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoEmailRequest">##### Initiate Flow No Email Request Model (optional)</param>
        /// <returns>InitiateFlowNoEmailResponse</returns>
        public InitiateFlowNoEmailResponse PostInitiateFlowNoEmail(string contentType, InitiateFlowNoEmailRequest initiateFlowNoEmailRequest = default(InitiateFlowNoEmailRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<InitiateFlowNoEmailResponse> localVarResponse = PostInitiateFlowNoEmailWithHttpInfo(contentType, initiateFlowNoEmailRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate Flow No Email #### Used to initiate a workflow without sending out emails.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoEmailRequest">##### Initiate Flow No Email Request Model (optional)</param>
        /// <returns>ApiResponse of InitiateFlowNoEmailResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<InitiateFlowNoEmailResponse> PostInitiateFlowNoEmailWithHttpInfo(string contentType, InitiateFlowNoEmailRequest initiateFlowNoEmailRequest = default(InitiateFlowNoEmailRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostInitiateFlowNoEmail");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = initiateFlowNoEmailRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<InitiateFlowNoEmailResponse>("/InitiateFlow_No_Email", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInitiateFlowNoEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate Flow No Email #### Used to initiate a workflow without sending out emails.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoEmailRequest">##### Initiate Flow No Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitiateFlowNoEmailResponse</returns>
        public async System.Threading.Tasks.Task<InitiateFlowNoEmailResponse> PostInitiateFlowNoEmailAsync(string contentType, InitiateFlowNoEmailRequest initiateFlowNoEmailRequest = default(InitiateFlowNoEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<InitiateFlowNoEmailResponse> localVarResponse = await PostInitiateFlowNoEmailWithHttpInfoAsync(contentType, initiateFlowNoEmailRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate Flow No Email #### Used to initiate a workflow without sending out emails.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoEmailRequest">##### Initiate Flow No Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitiateFlowNoEmailResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<InitiateFlowNoEmailResponse>> PostInitiateFlowNoEmailWithHttpInfoAsync(string contentType, InitiateFlowNoEmailRequest initiateFlowNoEmailRequest = default(InitiateFlowNoEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostInitiateFlowNoEmail");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = initiateFlowNoEmailRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InitiateFlowNoEmailResponse>("/InitiateFlow_No_Email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInitiateFlowNoEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate Flow No Initial Email #### Used to initiate a document workflow without an initial email being sent to the user.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoInitialEmailRequest">##### Initiate Flow No Initial Email Request Model (optional)</param>
        /// <returns>InitiateFlowNoInitialEmailResponse</returns>
        public InitiateFlowNoInitialEmailResponse PostInitiateFlowNoInitialEmail(string contentType, InitiateFlowNoInitialEmailRequest initiateFlowNoInitialEmailRequest = default(InitiateFlowNoInitialEmailRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<InitiateFlowNoInitialEmailResponse> localVarResponse = PostInitiateFlowNoInitialEmailWithHttpInfo(contentType, initiateFlowNoInitialEmailRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate Flow No Initial Email #### Used to initiate a document workflow without an initial email being sent to the user.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoInitialEmailRequest">##### Initiate Flow No Initial Email Request Model (optional)</param>
        /// <returns>ApiResponse of InitiateFlowNoInitialEmailResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<InitiateFlowNoInitialEmailResponse> PostInitiateFlowNoInitialEmailWithHttpInfo(string contentType, InitiateFlowNoInitialEmailRequest initiateFlowNoInitialEmailRequest = default(InitiateFlowNoInitialEmailRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostInitiateFlowNoInitialEmail");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = initiateFlowNoInitialEmailRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<InitiateFlowNoInitialEmailResponse>("/InitiateFlow_No_Initial_Email", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInitiateFlowNoInitialEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate Flow No Initial Email #### Used to initiate a document workflow without an initial email being sent to the user.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoInitialEmailRequest">##### Initiate Flow No Initial Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitiateFlowNoInitialEmailResponse</returns>
        public async System.Threading.Tasks.Task<InitiateFlowNoInitialEmailResponse> PostInitiateFlowNoInitialEmailAsync(string contentType, InitiateFlowNoInitialEmailRequest initiateFlowNoInitialEmailRequest = default(InitiateFlowNoInitialEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<InitiateFlowNoInitialEmailResponse> localVarResponse = await PostInitiateFlowNoInitialEmailWithHttpInfoAsync(contentType, initiateFlowNoInitialEmailRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate Flow No Initial Email #### Used to initiate a document workflow without an initial email being sent to the user.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoInitialEmailRequest">##### Initiate Flow No Initial Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitiateFlowNoInitialEmailResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<InitiateFlowNoInitialEmailResponse>> PostInitiateFlowNoInitialEmailWithHttpInfoAsync(string contentType, InitiateFlowNoInitialEmailRequest initiateFlowNoInitialEmailRequest = default(InitiateFlowNoInitialEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostInitiateFlowNoInitialEmail");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = initiateFlowNoInitialEmailRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InitiateFlowNoInitialEmailResponse>("/InitiateFlow_No_Initial_Email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostInitiateFlowNoInitialEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Workflow Sign #### Used to send a request to a user to sign a document workflow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="workflowSignRequest">##### Workflow Sign Request Model (optional)</param>
        /// <returns>WorkflowSignResponse</returns>
        public WorkflowSignResponse PostWorkflowSign(string contentType, WorkflowSignRequest workflowSignRequest = default(WorkflowSignRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<WorkflowSignResponse> localVarResponse = PostWorkflowSignWithHttpInfo(contentType, workflowSignRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Workflow Sign #### Used to send a request to a user to sign a document workflow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="workflowSignRequest">##### Workflow Sign Request Model (optional)</param>
        /// <returns>ApiResponse of WorkflowSignResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<WorkflowSignResponse> PostWorkflowSignWithHttpInfo(string contentType, WorkflowSignRequest workflowSignRequest = default(WorkflowSignRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostWorkflowSign");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = workflowSignRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkflowSignResponse>("/WorkflowSign", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWorkflowSign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Workflow Sign #### Used to send a request to a user to sign a document workflow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="workflowSignRequest">##### Workflow Sign Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowSignResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowSignResponse> PostWorkflowSignAsync(string contentType, WorkflowSignRequest workflowSignRequest = default(WorkflowSignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<WorkflowSignResponse> localVarResponse = await PostWorkflowSignWithHttpInfoAsync(contentType, workflowSignRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Workflow Sign #### Used to send a request to a user to sign a document workflow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="workflowSignRequest">##### Workflow Sign Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowSignResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<WorkflowSignResponse>> PostWorkflowSignWithHttpInfoAsync(string contentType, WorkflowSignRequest workflowSignRequest = default(WorkflowSignRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostWorkflowSign");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = workflowSignRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkflowSignResponse>("/WorkflowSign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWorkflowSign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
