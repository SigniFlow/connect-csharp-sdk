/*
 * WorkFlow API
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using SigniFlow.Connect.Client;
using SigniFlow.Connect.Model;

namespace SigniFlow.Connect.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkFlowApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Workflow
        /// </summary>
        /// <remarks>
        /// #### Used to start a new document workflow by passing a Base64 encoded document to SigniFlow.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **AutoExpireField**| 0 &#x3D; No, 1 &#x3D; Yes | | **AutoRemindField**| 0 &#x3D; No, 1 &#x3D; Yes | | **ExtensionField** |0 &#x3D; pdf, 1 &#x3D; xls, 2 &#x3D; txt, 3 &#x3D; xlsx, 4 &#x3D; docx, 5 &#x3D; doc, 6 &#x3D; xml, 7 &#x3D; png, 8 &#x3D; jpg, 9 &#x3D; gif | | **PriorityField**  | 0 &#x3D; Low, 1 &#x3D; Normal, 2 &#x3D; High |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createWorkflowRequest">##### Create Workflow Request Model</param>
        /// <returns>CreateWorkflowResponse</returns>
        CreateWorkflowResponse CreateWorkflow (string contentType, CreateWorkflowRequest createWorkflowRequest);

        /// <summary>
        /// Create Workflow
        /// </summary>
        /// <remarks>
        /// #### Used to start a new document workflow by passing a Base64 encoded document to SigniFlow.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **AutoExpireField**| 0 &#x3D; No, 1 &#x3D; Yes | | **AutoRemindField**| 0 &#x3D; No, 1 &#x3D; Yes | | **ExtensionField** |0 &#x3D; pdf, 1 &#x3D; xls, 2 &#x3D; txt, 3 &#x3D; xlsx, 4 &#x3D; docx, 5 &#x3D; doc, 6 &#x3D; xml, 7 &#x3D; png, 8 &#x3D; jpg, 9 &#x3D; gif | | **PriorityField**  | 0 &#x3D; Low, 1 &#x3D; Normal, 2 &#x3D; High |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createWorkflowRequest">##### Create Workflow Request Model</param>
        /// <returns>ApiResponse of CreateWorkflowResponse</returns>
        ApiResponse<CreateWorkflowResponse> CreateWorkflowWithHttpInfo (string contentType, CreateWorkflowRequest createWorkflowRequest);
        /// <summary>
        /// Get Document
        /// </summary>
        /// <remarks>
        /// #### Used to download a document from SigniFlow. 
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentRequest">##### Get Document Request Model (optional)</param>
        /// <returns>GetDocumentResponse</returns>
        GetDocumentResponse GetDocument (string contentType, GetDocumentRequest getDocumentRequest = default(GetDocumentRequest));

        /// <summary>
        /// Get Document
        /// </summary>
        /// <remarks>
        /// #### Used to download a document from SigniFlow. 
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentRequest">##### Get Document Request Model (optional)</param>
        /// <returns>ApiResponse of GetDocumentResponse</returns>
        ApiResponse<GetDocumentResponse> GetDocumentWithHttpInfo (string contentType, GetDocumentRequest getDocumentRequest = default(GetDocumentRequest));
        /// <summary>
        /// Add a Workflow step
        /// </summary>
        /// <remarks>
        /// #### Used to add a step to a document Workflow process.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **ActionField**    | 0 &#x3D; SignDocument, 1 &#x3D; ViewDocument, 2 &#x3D; ApproveDocument | | **ProxyAllowedField** | 0 &#x3D; No, 1 &#x3D; Yes | 
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="addWorkflowStepV2Request">##### Add A Workflow Step Request Model (optional)</param>
        /// <returns>AddWokflowStepV2Response</returns>
        AddWokflowStepV2Response PostAddWorkflowStep (string contentType, AddWorkflowStepV2Request addWorkflowStepV2Request = default(AddWorkflowStepV2Request));

        /// <summary>
        /// Add a Workflow step
        /// </summary>
        /// <remarks>
        /// #### Used to add a step to a document Workflow process.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **ActionField**    | 0 &#x3D; SignDocument, 1 &#x3D; ViewDocument, 2 &#x3D; ApproveDocument | | **ProxyAllowedField** | 0 &#x3D; No, 1 &#x3D; Yes | 
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="addWorkflowStepV2Request">##### Add A Workflow Step Request Model (optional)</param>
        /// <returns>ApiResponse of AddWokflowStepV2Response</returns>
        ApiResponse<AddWokflowStepV2Response> PostAddWorkflowStepWithHttpInfo (string contentType, AddWorkflowStepV2Request addWorkflowStepV2Request = default(AddWorkflowStepV2Request));
        /// <summary>
        /// Cancel Flow
        /// </summary>
        /// <remarks>
        /// #### The API call used to cancel a document workflow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="cancelFlowRequest">##### Cancel Flow Request Model (optional)</param>
        /// <returns>CancelFlowResponse</returns>
        CancelFlowResponse PostCancelFlow (string contentType, CancelFlowRequest cancelFlowRequest = default(CancelFlowRequest));

        /// <summary>
        /// Cancel Flow
        /// </summary>
        /// <remarks>
        /// #### The API call used to cancel a document workflow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="cancelFlowRequest">##### Cancel Flow Request Model (optional)</param>
        /// <returns>ApiResponse of CancelFlowResponse</returns>
        ApiResponse<CancelFlowResponse> PostCancelFlowWithHttpInfo (string contentType, CancelFlowRequest cancelFlowRequest = default(CancelFlowRequest));
        /// <summary>
        /// Delete Document
        /// </summary>
        /// <remarks>
        /// #### The API call used to delete a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="deleteDocRequest">##### Delete Document Request Model (optional)</param>
        /// <returns>DeleteDocResponse</returns>
        DeleteDocResponse PostDeleteDoc (string contentType, DeleteDocRequest deleteDocRequest = default(DeleteDocRequest));

        /// <summary>
        /// Delete Document
        /// </summary>
        /// <remarks>
        /// #### The API call used to delete a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="deleteDocRequest">##### Delete Document Request Model (optional)</param>
        /// <returns>ApiResponse of DeleteDocResponse</returns>
        ApiResponse<DeleteDocResponse> PostDeleteDocWithHttpInfo (string contentType, DeleteDocRequest deleteDocRequest = default(DeleteDocRequest));
        /// <summary>
        /// Document Prepper Add Fields
        /// </summary>
        /// <remarks>
        /// #### The API call used to add fields to a document using the user&#39;s FlowID.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **DocFieldTypeField / FieldTypeField** | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddFieldsFlowIDRequest">##### Document Prepper Add Fields Request Model (optional)</param>
        /// <returns>DocPrepperAddFieldsFlowIDResponse</returns>
        DocPrepperAddFieldsFlowIDResponse PostDocPrepperAddField (string contentType, DocPrepperAddFieldsFlowIDRequest docPrepperAddFieldsFlowIDRequest = default(DocPrepperAddFieldsFlowIDRequest));

        /// <summary>
        /// Document Prepper Add Fields
        /// </summary>
        /// <remarks>
        /// #### The API call used to add fields to a document using the user&#39;s FlowID.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **DocFieldTypeField / FieldTypeField** | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddFieldsFlowIDRequest">##### Document Prepper Add Fields Request Model (optional)</param>
        /// <returns>ApiResponse of DocPrepperAddFieldsFlowIDResponse</returns>
        ApiResponse<DocPrepperAddFieldsFlowIDResponse> PostDocPrepperAddFieldWithHttpInfo (string contentType, DocPrepperAddFieldsFlowIDRequest docPrepperAddFieldsFlowIDRequest = default(DocPrepperAddFieldsFlowIDRequest));
        /// <summary>
        /// Document Prepper Add Advanced Fields
        /// </summary>
        /// <remarks>
        /// #### The API call used to add advanced fields to a document.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **AdvancedFieldType** | 0 &#x3D; DropDown, 1 &#x3D; CheckBoxGroup, 2 &#x3D; OptionalDropDown, 3 &#x3D; RadioGroup, 4 &#x3D; DateMand, 5 &#x3D; DateOpt, 6 &#x3D; DropDownCountry, 7 &#x3D; OptionalDropDownCountry, 8 &#x3D; DropDownMobilePrefix, 9 &#x3D; OptionalDropDownMobilePrefix |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddAdvancedFieldsRequest">##### Document Prepper Add Advanced Fields Request Model (optional)</param>
        /// <returns>DocPrepperAddAdvancedFieldsResponse</returns>
        DocPrepperAddAdvancedFieldsResponse PostDocPrepperAdvancedFields (string contentType, DocPrepperAddAdvancedFieldsRequest docPrepperAddAdvancedFieldsRequest = default(DocPrepperAddAdvancedFieldsRequest));

        /// <summary>
        /// Document Prepper Add Advanced Fields
        /// </summary>
        /// <remarks>
        /// #### The API call used to add advanced fields to a document.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **AdvancedFieldType** | 0 &#x3D; DropDown, 1 &#x3D; CheckBoxGroup, 2 &#x3D; OptionalDropDown, 3 &#x3D; RadioGroup, 4 &#x3D; DateMand, 5 &#x3D; DateOpt, 6 &#x3D; DropDownCountry, 7 &#x3D; OptionalDropDownCountry, 8 &#x3D; DropDownMobilePrefix, 9 &#x3D; OptionalDropDownMobilePrefix |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddAdvancedFieldsRequest">##### Document Prepper Add Advanced Fields Request Model (optional)</param>
        /// <returns>ApiResponse of DocPrepperAddAdvancedFieldsResponse</returns>
        ApiResponse<DocPrepperAddAdvancedFieldsResponse> PostDocPrepperAdvancedFieldsWithHttpInfo (string contentType, DocPrepperAddAdvancedFieldsRequest docPrepperAddAdvancedFieldsRequest = default(DocPrepperAddAdvancedFieldsRequest));
        /// <summary>
        /// FullWorkflow
        /// </summary>
        /// <remarks>
        /// #### Used to create a e-signature workflow with a single API Request. The request can contain multiple recipients, fields and signatures.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | AutoRemindField| 0 &#x3D; No, 1 &#x3D; Yes | | ExtensionField |0 &#x3D; pdf, 1 &#x3D; xls, 2 &#x3D; txt, 3 &#x3D; xlsx, 4 &#x3D; docx, 5 &#x3D; doc, 6 &#x3D; xml, 7 &#x3D; png, 8 &#x3D; jpg, 9 &#x3D; gif | | PriorityField  | 0 &#x3D; Low, 1 &#x3D; Normal, 2 &#x3D; High | | ActionField    | 0 &#x3D; SignDocument, 1 &#x3D; ViewDocument, 2 &#x3D; ApproveDocument | | AllowProxyField| 0 &#x3D; No, 1 &#x3D; Yes |  | FieldTypeField | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="fullWorkflowRequest">##### FullWorkflow Request Model (optional)</param>
        /// <returns>FullWorkflowResponse</returns>
        FullWorkflowResponse PostFullWorkflow (string contentType, FullWorkflowRequest fullWorkflowRequest = default(FullWorkflowRequest));

        /// <summary>
        /// FullWorkflow
        /// </summary>
        /// <remarks>
        /// #### Used to create a e-signature workflow with a single API Request. The request can contain multiple recipients, fields and signatures.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | AutoRemindField| 0 &#x3D; No, 1 &#x3D; Yes | | ExtensionField |0 &#x3D; pdf, 1 &#x3D; xls, 2 &#x3D; txt, 3 &#x3D; xlsx, 4 &#x3D; docx, 5 &#x3D; doc, 6 &#x3D; xml, 7 &#x3D; png, 8 &#x3D; jpg, 9 &#x3D; gif | | PriorityField  | 0 &#x3D; Low, 1 &#x3D; Normal, 2 &#x3D; High | | ActionField    | 0 &#x3D; SignDocument, 1 &#x3D; ViewDocument, 2 &#x3D; ApproveDocument | | AllowProxyField| 0 &#x3D; No, 1 &#x3D; Yes |  | FieldTypeField | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="fullWorkflowRequest">##### FullWorkflow Request Model (optional)</param>
        /// <returns>ApiResponse of FullWorkflowResponse</returns>
        ApiResponse<FullWorkflowResponse> PostFullWorkflowWithHttpInfo (string contentType, FullWorkflowRequest fullWorkflowRequest = default(FullWorkflowRequest));
        /// <summary>
        /// Get Document Status
        /// </summary>
        /// <remarks>
        /// #### Used to get the status of a document ex. pending/completed/rejected.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocStatusRequest">##### Get Document Status Request Model (optional)</param>
        /// <returns>GetDocStatusResponse</returns>
        GetDocStatusResponse PostGetDocStatus (string contentType, GetDocStatusRequest getDocStatusRequest = default(GetDocStatusRequest));

        /// <summary>
        /// Get Document Status
        /// </summary>
        /// <remarks>
        /// #### Used to get the status of a document ex. pending/completed/rejected.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocStatusRequest">##### Get Document Status Request Model (optional)</param>
        /// <returns>ApiResponse of GetDocStatusResponse</returns>
        ApiResponse<GetDocStatusResponse> PostGetDocStatusWithHttpInfo (string contentType, GetDocStatusRequest getDocStatusRequest = default(GetDocStatusRequest));
        /// <summary>
        /// Initiate Flow
        /// </summary>
        /// <remarks>
        /// #### Used to initiate aworkflow of a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowRequest">##### Initiate Flow Request Model (optional)</param>
        /// <returns>InitiateFlowResponse</returns>
        InitiateFlowResponse PostInitiateFlow (string contentType, InitiateFlowRequest initiateFlowRequest = default(InitiateFlowRequest));

        /// <summary>
        /// Initiate Flow
        /// </summary>
        /// <remarks>
        /// #### Used to initiate aworkflow of a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowRequest">##### Initiate Flow Request Model (optional)</param>
        /// <returns>ApiResponse of InitiateFlowResponse</returns>
        ApiResponse<InitiateFlowResponse> PostInitiateFlowWithHttpInfo (string contentType, InitiateFlowRequest initiateFlowRequest = default(InitiateFlowRequest));
        /// <summary>
        /// Initiate Flow No Email
        /// </summary>
        /// <remarks>
        /// #### Used to initiate a workflow without sending out emails.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoEmailRequest">##### Initiate Flow No Email Request Model (optional)</param>
        /// <returns>InitiateFlowNoEmailResponse</returns>
        InitiateFlowNoEmailResponse PostInitiateFlowNoEmail (string contentType, InitiateFlowNoEmailRequest initiateFlowNoEmailRequest = default(InitiateFlowNoEmailRequest));

        /// <summary>
        /// Initiate Flow No Email
        /// </summary>
        /// <remarks>
        /// #### Used to initiate a workflow without sending out emails.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoEmailRequest">##### Initiate Flow No Email Request Model (optional)</param>
        /// <returns>ApiResponse of InitiateFlowNoEmailResponse</returns>
        ApiResponse<InitiateFlowNoEmailResponse> PostInitiateFlowNoEmailWithHttpInfo (string contentType, InitiateFlowNoEmailRequest initiateFlowNoEmailRequest = default(InitiateFlowNoEmailRequest));
        /// <summary>
        /// Initiate Flow No Initial Email
        /// </summary>
        /// <remarks>
        /// #### Used to initiate a document workflow without an initial email being sent to the user.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoInitialEmailRequest">##### Initiate Flow No Initial Email Request Model (optional)</param>
        /// <returns>InitiateFlowNoInitialEmailResponse</returns>
        InitiateFlowNoInitialEmailResponse PostInitiateFlowNoInitialEmail (string contentType, InitiateFlowNoInitialEmailRequest initiateFlowNoInitialEmailRequest = default(InitiateFlowNoInitialEmailRequest));

        /// <summary>
        /// Initiate Flow No Initial Email
        /// </summary>
        /// <remarks>
        /// #### Used to initiate a document workflow without an initial email being sent to the user.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoInitialEmailRequest">##### Initiate Flow No Initial Email Request Model (optional)</param>
        /// <returns>ApiResponse of InitiateFlowNoInitialEmailResponse</returns>
        ApiResponse<InitiateFlowNoInitialEmailResponse> PostInitiateFlowNoInitialEmailWithHttpInfo (string contentType, InitiateFlowNoInitialEmailRequest initiateFlowNoInitialEmailRequest = default(InitiateFlowNoInitialEmailRequest));
        /// <summary>
        /// Workflow Sign
        /// </summary>
        /// <remarks>
        /// #### Used to send a request to a user to sign a document workflow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="workflowSignRequest">##### Workflow Sign Request Model (optional)</param>
        /// <returns>WorkflowSignResponse</returns>
        WorkflowSignResponse PostWorkflowSign (string contentType, WorkflowSignRequest workflowSignRequest = default(WorkflowSignRequest));

        /// <summary>
        /// Workflow Sign
        /// </summary>
        /// <remarks>
        /// #### Used to send a request to a user to sign a document workflow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="workflowSignRequest">##### Workflow Sign Request Model (optional)</param>
        /// <returns>ApiResponse of WorkflowSignResponse</returns>
        ApiResponse<WorkflowSignResponse> PostWorkflowSignWithHttpInfo (string contentType, WorkflowSignRequest workflowSignRequest = default(WorkflowSignRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Workflow
        /// </summary>
        /// <remarks>
        /// #### Used to start a new document workflow by passing a Base64 encoded document to SigniFlow.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **AutoExpireField**| 0 &#x3D; No, 1 &#x3D; Yes | | **AutoRemindField**| 0 &#x3D; No, 1 &#x3D; Yes | | **ExtensionField** |0 &#x3D; pdf, 1 &#x3D; xls, 2 &#x3D; txt, 3 &#x3D; xlsx, 4 &#x3D; docx, 5 &#x3D; doc, 6 &#x3D; xml, 7 &#x3D; png, 8 &#x3D; jpg, 9 &#x3D; gif | | **PriorityField**  | 0 &#x3D; Low, 1 &#x3D; Normal, 2 &#x3D; High |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createWorkflowRequest">##### Create Workflow Request Model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateWorkflowResponse</returns>
        System.Threading.Tasks.Task<CreateWorkflowResponse> CreateWorkflowAsync (string contentType, CreateWorkflowRequest createWorkflowRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Workflow
        /// </summary>
        /// <remarks>
        /// #### Used to start a new document workflow by passing a Base64 encoded document to SigniFlow.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **AutoExpireField**| 0 &#x3D; No, 1 &#x3D; Yes | | **AutoRemindField**| 0 &#x3D; No, 1 &#x3D; Yes | | **ExtensionField** |0 &#x3D; pdf, 1 &#x3D; xls, 2 &#x3D; txt, 3 &#x3D; xlsx, 4 &#x3D; docx, 5 &#x3D; doc, 6 &#x3D; xml, 7 &#x3D; png, 8 &#x3D; jpg, 9 &#x3D; gif | | **PriorityField**  | 0 &#x3D; Low, 1 &#x3D; Normal, 2 &#x3D; High |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createWorkflowRequest">##### Create Workflow Request Model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateWorkflowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateWorkflowResponse>> CreateWorkflowWithHttpInfoAsync (string contentType, CreateWorkflowRequest createWorkflowRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Document
        /// </summary>
        /// <remarks>
        /// #### Used to download a document from SigniFlow. 
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentRequest">##### Get Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetDocumentResponse</returns>
        System.Threading.Tasks.Task<GetDocumentResponse> GetDocumentAsync (string contentType, GetDocumentRequest getDocumentRequest = default(GetDocumentRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Document
        /// </summary>
        /// <remarks>
        /// #### Used to download a document from SigniFlow. 
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentRequest">##### Get Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocumentResponse>> GetDocumentWithHttpInfoAsync (string contentType, GetDocumentRequest getDocumentRequest = default(GetDocumentRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add a Workflow step
        /// </summary>
        /// <remarks>
        /// #### Used to add a step to a document Workflow process.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **ActionField**    | 0 &#x3D; SignDocument, 1 &#x3D; ViewDocument, 2 &#x3D; ApproveDocument | | **ProxyAllowedField** | 0 &#x3D; No, 1 &#x3D; Yes | 
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="addWorkflowStepV2Request">##### Add A Workflow Step Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddWokflowStepV2Response</returns>
        System.Threading.Tasks.Task<AddWokflowStepV2Response> PostAddWorkflowStepAsync (string contentType, AddWorkflowStepV2Request addWorkflowStepV2Request = default(AddWorkflowStepV2Request), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a Workflow step
        /// </summary>
        /// <remarks>
        /// #### Used to add a step to a document Workflow process.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **ActionField**    | 0 &#x3D; SignDocument, 1 &#x3D; ViewDocument, 2 &#x3D; ApproveDocument | | **ProxyAllowedField** | 0 &#x3D; No, 1 &#x3D; Yes | 
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="addWorkflowStepV2Request">##### Add A Workflow Step Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddWokflowStepV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddWokflowStepV2Response>> PostAddWorkflowStepWithHttpInfoAsync (string contentType, AddWorkflowStepV2Request addWorkflowStepV2Request = default(AddWorkflowStepV2Request), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Cancel Flow
        /// </summary>
        /// <remarks>
        /// #### The API call used to cancel a document workflow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="cancelFlowRequest">##### Cancel Flow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CancelFlowResponse</returns>
        System.Threading.Tasks.Task<CancelFlowResponse> PostCancelFlowAsync (string contentType, CancelFlowRequest cancelFlowRequest = default(CancelFlowRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel Flow
        /// </summary>
        /// <remarks>
        /// #### The API call used to cancel a document workflow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="cancelFlowRequest">##### Cancel Flow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CancelFlowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelFlowResponse>> PostCancelFlowWithHttpInfoAsync (string contentType, CancelFlowRequest cancelFlowRequest = default(CancelFlowRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Document
        /// </summary>
        /// <remarks>
        /// #### The API call used to delete a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="deleteDocRequest">##### Delete Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteDocResponse</returns>
        System.Threading.Tasks.Task<DeleteDocResponse> PostDeleteDocAsync (string contentType, DeleteDocRequest deleteDocRequest = default(DeleteDocRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Document
        /// </summary>
        /// <remarks>
        /// #### The API call used to delete a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="deleteDocRequest">##### Delete Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteDocResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteDocResponse>> PostDeleteDocWithHttpInfoAsync (string contentType, DeleteDocRequest deleteDocRequest = default(DeleteDocRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Document Prepper Add Fields
        /// </summary>
        /// <remarks>
        /// #### The API call used to add fields to a document using the user&#39;s FlowID.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **DocFieldTypeField / FieldTypeField** | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddFieldsFlowIDRequest">##### Document Prepper Add Fields Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocPrepperAddFieldsFlowIDResponse</returns>
        System.Threading.Tasks.Task<DocPrepperAddFieldsFlowIDResponse> PostDocPrepperAddFieldAsync (string contentType, DocPrepperAddFieldsFlowIDRequest docPrepperAddFieldsFlowIDRequest = default(DocPrepperAddFieldsFlowIDRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Document Prepper Add Fields
        /// </summary>
        /// <remarks>
        /// #### The API call used to add fields to a document using the user&#39;s FlowID.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **DocFieldTypeField / FieldTypeField** | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddFieldsFlowIDRequest">##### Document Prepper Add Fields Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocPrepperAddFieldsFlowIDResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocPrepperAddFieldsFlowIDResponse>> PostDocPrepperAddFieldWithHttpInfoAsync (string contentType, DocPrepperAddFieldsFlowIDRequest docPrepperAddFieldsFlowIDRequest = default(DocPrepperAddFieldsFlowIDRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Document Prepper Add Advanced Fields
        /// </summary>
        /// <remarks>
        /// #### The API call used to add advanced fields to a document.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **AdvancedFieldType** | 0 &#x3D; DropDown, 1 &#x3D; CheckBoxGroup, 2 &#x3D; OptionalDropDown, 3 &#x3D; RadioGroup, 4 &#x3D; DateMand, 5 &#x3D; DateOpt, 6 &#x3D; DropDownCountry, 7 &#x3D; OptionalDropDownCountry, 8 &#x3D; DropDownMobilePrefix, 9 &#x3D; OptionalDropDownMobilePrefix |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddAdvancedFieldsRequest">##### Document Prepper Add Advanced Fields Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocPrepperAddAdvancedFieldsResponse</returns>
        System.Threading.Tasks.Task<DocPrepperAddAdvancedFieldsResponse> PostDocPrepperAdvancedFieldsAsync (string contentType, DocPrepperAddAdvancedFieldsRequest docPrepperAddAdvancedFieldsRequest = default(DocPrepperAddAdvancedFieldsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Document Prepper Add Advanced Fields
        /// </summary>
        /// <remarks>
        /// #### The API call used to add advanced fields to a document.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **AdvancedFieldType** | 0 &#x3D; DropDown, 1 &#x3D; CheckBoxGroup, 2 &#x3D; OptionalDropDown, 3 &#x3D; RadioGroup, 4 &#x3D; DateMand, 5 &#x3D; DateOpt, 6 &#x3D; DropDownCountry, 7 &#x3D; OptionalDropDownCountry, 8 &#x3D; DropDownMobilePrefix, 9 &#x3D; OptionalDropDownMobilePrefix |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddAdvancedFieldsRequest">##### Document Prepper Add Advanced Fields Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocPrepperAddAdvancedFieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocPrepperAddAdvancedFieldsResponse>> PostDocPrepperAdvancedFieldsWithHttpInfoAsync (string contentType, DocPrepperAddAdvancedFieldsRequest docPrepperAddAdvancedFieldsRequest = default(DocPrepperAddAdvancedFieldsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// FullWorkflow
        /// </summary>
        /// <remarks>
        /// #### Used to create a e-signature workflow with a single API Request. The request can contain multiple recipients, fields and signatures.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | AutoRemindField| 0 &#x3D; No, 1 &#x3D; Yes | | ExtensionField |0 &#x3D; pdf, 1 &#x3D; xls, 2 &#x3D; txt, 3 &#x3D; xlsx, 4 &#x3D; docx, 5 &#x3D; doc, 6 &#x3D; xml, 7 &#x3D; png, 8 &#x3D; jpg, 9 &#x3D; gif | | PriorityField  | 0 &#x3D; Low, 1 &#x3D; Normal, 2 &#x3D; High | | ActionField    | 0 &#x3D; SignDocument, 1 &#x3D; ViewDocument, 2 &#x3D; ApproveDocument | | AllowProxyField| 0 &#x3D; No, 1 &#x3D; Yes |  | FieldTypeField | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="fullWorkflowRequest">##### FullWorkflow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FullWorkflowResponse</returns>
        System.Threading.Tasks.Task<FullWorkflowResponse> PostFullWorkflowAsync (string contentType, FullWorkflowRequest fullWorkflowRequest = default(FullWorkflowRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// FullWorkflow
        /// </summary>
        /// <remarks>
        /// #### Used to create a e-signature workflow with a single API Request. The request can contain multiple recipients, fields and signatures.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | AutoRemindField| 0 &#x3D; No, 1 &#x3D; Yes | | ExtensionField |0 &#x3D; pdf, 1 &#x3D; xls, 2 &#x3D; txt, 3 &#x3D; xlsx, 4 &#x3D; docx, 5 &#x3D; doc, 6 &#x3D; xml, 7 &#x3D; png, 8 &#x3D; jpg, 9 &#x3D; gif | | PriorityField  | 0 &#x3D; Low, 1 &#x3D; Normal, 2 &#x3D; High | | ActionField    | 0 &#x3D; SignDocument, 1 &#x3D; ViewDocument, 2 &#x3D; ApproveDocument | | AllowProxyField| 0 &#x3D; No, 1 &#x3D; Yes |  | FieldTypeField | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="fullWorkflowRequest">##### FullWorkflow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FullWorkflowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FullWorkflowResponse>> PostFullWorkflowWithHttpInfoAsync (string contentType, FullWorkflowRequest fullWorkflowRequest = default(FullWorkflowRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Document Status
        /// </summary>
        /// <remarks>
        /// #### Used to get the status of a document ex. pending/completed/rejected.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocStatusRequest">##### Get Document Status Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetDocStatusResponse</returns>
        System.Threading.Tasks.Task<GetDocStatusResponse> PostGetDocStatusAsync (string contentType, GetDocStatusRequest getDocStatusRequest = default(GetDocStatusRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Document Status
        /// </summary>
        /// <remarks>
        /// #### Used to get the status of a document ex. pending/completed/rejected.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocStatusRequest">##### Get Document Status Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetDocStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocStatusResponse>> PostGetDocStatusWithHttpInfoAsync (string contentType, GetDocStatusRequest getDocStatusRequest = default(GetDocStatusRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Initiate Flow
        /// </summary>
        /// <remarks>
        /// #### Used to initiate aworkflow of a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowRequest">##### Initiate Flow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InitiateFlowResponse</returns>
        System.Threading.Tasks.Task<InitiateFlowResponse> PostInitiateFlowAsync (string contentType, InitiateFlowRequest initiateFlowRequest = default(InitiateFlowRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Initiate Flow
        /// </summary>
        /// <remarks>
        /// #### Used to initiate aworkflow of a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowRequest">##### Initiate Flow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InitiateFlowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InitiateFlowResponse>> PostInitiateFlowWithHttpInfoAsync (string contentType, InitiateFlowRequest initiateFlowRequest = default(InitiateFlowRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Initiate Flow No Email
        /// </summary>
        /// <remarks>
        /// #### Used to initiate a workflow without sending out emails.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoEmailRequest">##### Initiate Flow No Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InitiateFlowNoEmailResponse</returns>
        System.Threading.Tasks.Task<InitiateFlowNoEmailResponse> PostInitiateFlowNoEmailAsync (string contentType, InitiateFlowNoEmailRequest initiateFlowNoEmailRequest = default(InitiateFlowNoEmailRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Initiate Flow No Email
        /// </summary>
        /// <remarks>
        /// #### Used to initiate a workflow without sending out emails.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoEmailRequest">##### Initiate Flow No Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InitiateFlowNoEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InitiateFlowNoEmailResponse>> PostInitiateFlowNoEmailWithHttpInfoAsync (string contentType, InitiateFlowNoEmailRequest initiateFlowNoEmailRequest = default(InitiateFlowNoEmailRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Initiate Flow No Initial Email
        /// </summary>
        /// <remarks>
        /// #### Used to initiate a document workflow without an initial email being sent to the user.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoInitialEmailRequest">##### Initiate Flow No Initial Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InitiateFlowNoInitialEmailResponse</returns>
        System.Threading.Tasks.Task<InitiateFlowNoInitialEmailResponse> PostInitiateFlowNoInitialEmailAsync (string contentType, InitiateFlowNoInitialEmailRequest initiateFlowNoInitialEmailRequest = default(InitiateFlowNoInitialEmailRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Initiate Flow No Initial Email
        /// </summary>
        /// <remarks>
        /// #### Used to initiate a document workflow without an initial email being sent to the user.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoInitialEmailRequest">##### Initiate Flow No Initial Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InitiateFlowNoInitialEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InitiateFlowNoInitialEmailResponse>> PostInitiateFlowNoInitialEmailWithHttpInfoAsync (string contentType, InitiateFlowNoInitialEmailRequest initiateFlowNoInitialEmailRequest = default(InitiateFlowNoInitialEmailRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Workflow Sign
        /// </summary>
        /// <remarks>
        /// #### Used to send a request to a user to sign a document workflow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="workflowSignRequest">##### Workflow Sign Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowSignResponse</returns>
        System.Threading.Tasks.Task<WorkflowSignResponse> PostWorkflowSignAsync (string contentType, WorkflowSignRequest workflowSignRequest = default(WorkflowSignRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Workflow Sign
        /// </summary>
        /// <remarks>
        /// #### Used to send a request to a user to sign a document workflow.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="workflowSignRequest">##### Workflow Sign Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowSignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowSignResponse>> PostWorkflowSignWithHttpInfoAsync (string contentType, WorkflowSignRequest workflowSignRequest = default(WorkflowSignRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkFlowApi : IWorkFlowApi
    {
        private SigniFlow.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkFlowApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkFlowApi(String basePath)
        {
            this.Configuration = new SigniFlow.Connect.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkFlowApi"/> class
        /// </summary>
        /// <returns></returns>
        public WorkFlowApi()
        {
            this.Configuration = SigniFlow.Connect.Client.Configuration.Default;

            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkFlowApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkFlowApi(SigniFlow.Connect.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SigniFlow.Connect.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SigniFlow.Connect.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SigniFlow.Connect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Workflow #### Used to start a new document workflow by passing a Base64 encoded document to SigniFlow.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **AutoExpireField**| 0 &#x3D; No, 1 &#x3D; Yes | | **AutoRemindField**| 0 &#x3D; No, 1 &#x3D; Yes | | **ExtensionField** |0 &#x3D; pdf, 1 &#x3D; xls, 2 &#x3D; txt, 3 &#x3D; xlsx, 4 &#x3D; docx, 5 &#x3D; doc, 6 &#x3D; xml, 7 &#x3D; png, 8 &#x3D; jpg, 9 &#x3D; gif | | **PriorityField**  | 0 &#x3D; Low, 1 &#x3D; Normal, 2 &#x3D; High |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createWorkflowRequest">##### Create Workflow Request Model</param>
        /// <returns>CreateWorkflowResponse</returns>
        public CreateWorkflowResponse CreateWorkflow (string contentType, CreateWorkflowRequest createWorkflowRequest)
        {
             ApiResponse<CreateWorkflowResponse> localVarResponse = CreateWorkflowWithHttpInfo(contentType, createWorkflowRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Workflow #### Used to start a new document workflow by passing a Base64 encoded document to SigniFlow.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **AutoExpireField**| 0 &#x3D; No, 1 &#x3D; Yes | | **AutoRemindField**| 0 &#x3D; No, 1 &#x3D; Yes | | **ExtensionField** |0 &#x3D; pdf, 1 &#x3D; xls, 2 &#x3D; txt, 3 &#x3D; xlsx, 4 &#x3D; docx, 5 &#x3D; doc, 6 &#x3D; xml, 7 &#x3D; png, 8 &#x3D; jpg, 9 &#x3D; gif | | **PriorityField**  | 0 &#x3D; Low, 1 &#x3D; Normal, 2 &#x3D; High |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createWorkflowRequest">##### Create Workflow Request Model</param>
        /// <returns>ApiResponse of CreateWorkflowResponse</returns>
        public ApiResponse<CreateWorkflowResponse> CreateWorkflowWithHttpInfo (string contentType, CreateWorkflowRequest createWorkflowRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->CreateWorkflow");
            // verify the required parameter 'createWorkflowRequest' is set
            if (createWorkflowRequest == null)
                throw new ApiException(400, "Missing required parameter 'createWorkflowRequest' when calling WorkFlowApi->CreateWorkflow");

            var localVarPath = "/CreateWorkflow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (createWorkflowRequest != null && createWorkflowRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createWorkflowRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createWorkflowRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateWorkflowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateWorkflowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateWorkflowResponse)));
        }

        /// <summary>
        /// Create Workflow #### Used to start a new document workflow by passing a Base64 encoded document to SigniFlow.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **AutoExpireField**| 0 &#x3D; No, 1 &#x3D; Yes | | **AutoRemindField**| 0 &#x3D; No, 1 &#x3D; Yes | | **ExtensionField** |0 &#x3D; pdf, 1 &#x3D; xls, 2 &#x3D; txt, 3 &#x3D; xlsx, 4 &#x3D; docx, 5 &#x3D; doc, 6 &#x3D; xml, 7 &#x3D; png, 8 &#x3D; jpg, 9 &#x3D; gif | | **PriorityField**  | 0 &#x3D; Low, 1 &#x3D; Normal, 2 &#x3D; High |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createWorkflowRequest">##### Create Workflow Request Model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateWorkflowResponse</returns>
        public async System.Threading.Tasks.Task<CreateWorkflowResponse> CreateWorkflowAsync (string contentType, CreateWorkflowRequest createWorkflowRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreateWorkflowResponse> localVarResponse = await CreateWorkflowWithHttpInfoAsync(contentType, createWorkflowRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Workflow #### Used to start a new document workflow by passing a Base64 encoded document to SigniFlow.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **AutoExpireField**| 0 &#x3D; No, 1 &#x3D; Yes | | **AutoRemindField**| 0 &#x3D; No, 1 &#x3D; Yes | | **ExtensionField** |0 &#x3D; pdf, 1 &#x3D; xls, 2 &#x3D; txt, 3 &#x3D; xlsx, 4 &#x3D; docx, 5 &#x3D; doc, 6 &#x3D; xml, 7 &#x3D; png, 8 &#x3D; jpg, 9 &#x3D; gif | | **PriorityField**  | 0 &#x3D; Low, 1 &#x3D; Normal, 2 &#x3D; High |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createWorkflowRequest">##### Create Workflow Request Model</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateWorkflowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateWorkflowResponse>> CreateWorkflowWithHttpInfoAsync (string contentType, CreateWorkflowRequest createWorkflowRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->CreateWorkflow");
            // verify the required parameter 'createWorkflowRequest' is set
            if (createWorkflowRequest == null)
                throw new ApiException(400, "Missing required parameter 'createWorkflowRequest' when calling WorkFlowApi->CreateWorkflow");

            var localVarPath = "/CreateWorkflow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (createWorkflowRequest != null && createWorkflowRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createWorkflowRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createWorkflowRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateWorkflowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateWorkflowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateWorkflowResponse)));
        }

        /// <summary>
        /// Get Document #### Used to download a document from SigniFlow. 
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentRequest">##### Get Document Request Model (optional)</param>
        /// <returns>GetDocumentResponse</returns>
        public GetDocumentResponse GetDocument (string contentType, GetDocumentRequest getDocumentRequest = default(GetDocumentRequest))
        {
             ApiResponse<GetDocumentResponse> localVarResponse = GetDocumentWithHttpInfo(contentType, getDocumentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document #### Used to download a document from SigniFlow. 
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentRequest">##### Get Document Request Model (optional)</param>
        /// <returns>ApiResponse of GetDocumentResponse</returns>
        public ApiResponse<GetDocumentResponse> GetDocumentWithHttpInfo (string contentType, GetDocumentRequest getDocumentRequest = default(GetDocumentRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->GetDocument");

            var localVarPath = "/GetDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (getDocumentRequest != null && getDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getDocumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocumentResponse)));
        }

        /// <summary>
        /// Get Document #### Used to download a document from SigniFlow. 
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentRequest">##### Get Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetDocumentResponse</returns>
        public async System.Threading.Tasks.Task<GetDocumentResponse> GetDocumentAsync (string contentType, GetDocumentRequest getDocumentRequest = default(GetDocumentRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetDocumentResponse> localVarResponse = await GetDocumentWithHttpInfoAsync(contentType, getDocumentRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Document #### Used to download a document from SigniFlow. 
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentRequest">##### Get Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDocumentResponse>> GetDocumentWithHttpInfoAsync (string contentType, GetDocumentRequest getDocumentRequest = default(GetDocumentRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->GetDocument");

            var localVarPath = "/GetDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (getDocumentRequest != null && getDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getDocumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocumentResponse)));
        }

        /// <summary>
        /// Add a Workflow step #### Used to add a step to a document Workflow process.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **ActionField**    | 0 &#x3D; SignDocument, 1 &#x3D; ViewDocument, 2 &#x3D; ApproveDocument | | **ProxyAllowedField** | 0 &#x3D; No, 1 &#x3D; Yes | 
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="addWorkflowStepV2Request">##### Add A Workflow Step Request Model (optional)</param>
        /// <returns>AddWokflowStepV2Response</returns>
        public AddWokflowStepV2Response PostAddWorkflowStep (string contentType, AddWorkflowStepV2Request addWorkflowStepV2Request = default(AddWorkflowStepV2Request))
        {
             ApiResponse<AddWokflowStepV2Response> localVarResponse = PostAddWorkflowStepWithHttpInfo(contentType, addWorkflowStepV2Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a Workflow step #### Used to add a step to a document Workflow process.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **ActionField**    | 0 &#x3D; SignDocument, 1 &#x3D; ViewDocument, 2 &#x3D; ApproveDocument | | **ProxyAllowedField** | 0 &#x3D; No, 1 &#x3D; Yes | 
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="addWorkflowStepV2Request">##### Add A Workflow Step Request Model (optional)</param>
        /// <returns>ApiResponse of AddWokflowStepV2Response</returns>
        public ApiResponse<AddWokflowStepV2Response> PostAddWorkflowStepWithHttpInfo (string contentType, AddWorkflowStepV2Request addWorkflowStepV2Request = default(AddWorkflowStepV2Request))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostAddWorkflowStep");

            var localVarPath = "/AddWorkflowStepV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (addWorkflowStepV2Request != null && addWorkflowStepV2Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addWorkflowStepV2Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addWorkflowStepV2Request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAddWorkflowStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddWokflowStepV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddWokflowStepV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddWokflowStepV2Response)));
        }

        /// <summary>
        /// Add a Workflow step #### Used to add a step to a document Workflow process.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **ActionField**    | 0 &#x3D; SignDocument, 1 &#x3D; ViewDocument, 2 &#x3D; ApproveDocument | | **ProxyAllowedField** | 0 &#x3D; No, 1 &#x3D; Yes | 
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="addWorkflowStepV2Request">##### Add A Workflow Step Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddWokflowStepV2Response</returns>
        public async System.Threading.Tasks.Task<AddWokflowStepV2Response> PostAddWorkflowStepAsync (string contentType, AddWorkflowStepV2Request addWorkflowStepV2Request = default(AddWorkflowStepV2Request), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AddWokflowStepV2Response> localVarResponse = await PostAddWorkflowStepWithHttpInfoAsync(contentType, addWorkflowStepV2Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a Workflow step #### Used to add a step to a document Workflow process.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **ActionField**    | 0 &#x3D; SignDocument, 1 &#x3D; ViewDocument, 2 &#x3D; ApproveDocument | | **ProxyAllowedField** | 0 &#x3D; No, 1 &#x3D; Yes | 
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="addWorkflowStepV2Request">##### Add A Workflow Step Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddWokflowStepV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddWokflowStepV2Response>> PostAddWorkflowStepWithHttpInfoAsync (string contentType, AddWorkflowStepV2Request addWorkflowStepV2Request = default(AddWorkflowStepV2Request), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostAddWorkflowStep");

            var localVarPath = "/AddWorkflowStepV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (addWorkflowStepV2Request != null && addWorkflowStepV2Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addWorkflowStepV2Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addWorkflowStepV2Request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAddWorkflowStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddWokflowStepV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddWokflowStepV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddWokflowStepV2Response)));
        }

        /// <summary>
        /// Cancel Flow #### The API call used to cancel a document workflow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="cancelFlowRequest">##### Cancel Flow Request Model (optional)</param>
        /// <returns>CancelFlowResponse</returns>
        public CancelFlowResponse PostCancelFlow (string contentType, CancelFlowRequest cancelFlowRequest = default(CancelFlowRequest))
        {
             ApiResponse<CancelFlowResponse> localVarResponse = PostCancelFlowWithHttpInfo(contentType, cancelFlowRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Flow #### The API call used to cancel a document workflow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="cancelFlowRequest">##### Cancel Flow Request Model (optional)</param>
        /// <returns>ApiResponse of CancelFlowResponse</returns>
        public ApiResponse<CancelFlowResponse> PostCancelFlowWithHttpInfo (string contentType, CancelFlowRequest cancelFlowRequest = default(CancelFlowRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostCancelFlow");

            var localVarPath = "/CancelFlow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (cancelFlowRequest != null && cancelFlowRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cancelFlowRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cancelFlowRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCancelFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CancelFlowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelFlowResponse)));
        }

        /// <summary>
        /// Cancel Flow #### The API call used to cancel a document workflow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="cancelFlowRequest">##### Cancel Flow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CancelFlowResponse</returns>
        public async System.Threading.Tasks.Task<CancelFlowResponse> PostCancelFlowAsync (string contentType, CancelFlowRequest cancelFlowRequest = default(CancelFlowRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CancelFlowResponse> localVarResponse = await PostCancelFlowWithHttpInfoAsync(contentType, cancelFlowRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel Flow #### The API call used to cancel a document workflow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="cancelFlowRequest">##### Cancel Flow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CancelFlowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelFlowResponse>> PostCancelFlowWithHttpInfoAsync (string contentType, CancelFlowRequest cancelFlowRequest = default(CancelFlowRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostCancelFlow");

            var localVarPath = "/CancelFlow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (cancelFlowRequest != null && cancelFlowRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cancelFlowRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cancelFlowRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCancelFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CancelFlowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelFlowResponse)));
        }

        /// <summary>
        /// Delete Document #### The API call used to delete a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="deleteDocRequest">##### Delete Document Request Model (optional)</param>
        /// <returns>DeleteDocResponse</returns>
        public DeleteDocResponse PostDeleteDoc (string contentType, DeleteDocRequest deleteDocRequest = default(DeleteDocRequest))
        {
             ApiResponse<DeleteDocResponse> localVarResponse = PostDeleteDocWithHttpInfo(contentType, deleteDocRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Document #### The API call used to delete a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="deleteDocRequest">##### Delete Document Request Model (optional)</param>
        /// <returns>ApiResponse of DeleteDocResponse</returns>
        public ApiResponse<DeleteDocResponse> PostDeleteDocWithHttpInfo (string contentType, DeleteDocRequest deleteDocRequest = default(DeleteDocRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostDeleteDoc");

            var localVarPath = "/DeleteDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (deleteDocRequest != null && deleteDocRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteDocRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteDocRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDeleteDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteDocResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteDocResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteDocResponse)));
        }

        /// <summary>
        /// Delete Document #### The API call used to delete a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="deleteDocRequest">##### Delete Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteDocResponse</returns>
        public async System.Threading.Tasks.Task<DeleteDocResponse> PostDeleteDocAsync (string contentType, DeleteDocRequest deleteDocRequest = default(DeleteDocRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DeleteDocResponse> localVarResponse = await PostDeleteDocWithHttpInfoAsync(contentType, deleteDocRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Document #### The API call used to delete a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="deleteDocRequest">##### Delete Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteDocResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteDocResponse>> PostDeleteDocWithHttpInfoAsync (string contentType, DeleteDocRequest deleteDocRequest = default(DeleteDocRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostDeleteDoc");

            var localVarPath = "/DeleteDoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (deleteDocRequest != null && deleteDocRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteDocRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteDocRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDeleteDoc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteDocResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteDocResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteDocResponse)));
        }

        /// <summary>
        /// Document Prepper Add Fields #### The API call used to add fields to a document using the user&#39;s FlowID.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **DocFieldTypeField / FieldTypeField** | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddFieldsFlowIDRequest">##### Document Prepper Add Fields Request Model (optional)</param>
        /// <returns>DocPrepperAddFieldsFlowIDResponse</returns>
        public DocPrepperAddFieldsFlowIDResponse PostDocPrepperAddField (string contentType, DocPrepperAddFieldsFlowIDRequest docPrepperAddFieldsFlowIDRequest = default(DocPrepperAddFieldsFlowIDRequest))
        {
             ApiResponse<DocPrepperAddFieldsFlowIDResponse> localVarResponse = PostDocPrepperAddFieldWithHttpInfo(contentType, docPrepperAddFieldsFlowIDRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Document Prepper Add Fields #### The API call used to add fields to a document using the user&#39;s FlowID.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **DocFieldTypeField / FieldTypeField** | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddFieldsFlowIDRequest">##### Document Prepper Add Fields Request Model (optional)</param>
        /// <returns>ApiResponse of DocPrepperAddFieldsFlowIDResponse</returns>
        public ApiResponse<DocPrepperAddFieldsFlowIDResponse> PostDocPrepperAddFieldWithHttpInfo (string contentType, DocPrepperAddFieldsFlowIDRequest docPrepperAddFieldsFlowIDRequest = default(DocPrepperAddFieldsFlowIDRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostDocPrepperAddField");

            var localVarPath = "/DocPrepperAddFieldsFlowID";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (docPrepperAddFieldsFlowIDRequest != null && docPrepperAddFieldsFlowIDRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(docPrepperAddFieldsFlowIDRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docPrepperAddFieldsFlowIDRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocPrepperAddField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocPrepperAddFieldsFlowIDResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocPrepperAddFieldsFlowIDResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocPrepperAddFieldsFlowIDResponse)));
        }

        /// <summary>
        /// Document Prepper Add Fields #### The API call used to add fields to a document using the user&#39;s FlowID.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **DocFieldTypeField / FieldTypeField** | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddFieldsFlowIDRequest">##### Document Prepper Add Fields Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocPrepperAddFieldsFlowIDResponse</returns>
        public async System.Threading.Tasks.Task<DocPrepperAddFieldsFlowIDResponse> PostDocPrepperAddFieldAsync (string contentType, DocPrepperAddFieldsFlowIDRequest docPrepperAddFieldsFlowIDRequest = default(DocPrepperAddFieldsFlowIDRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocPrepperAddFieldsFlowIDResponse> localVarResponse = await PostDocPrepperAddFieldWithHttpInfoAsync(contentType, docPrepperAddFieldsFlowIDRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Document Prepper Add Fields #### The API call used to add fields to a document using the user&#39;s FlowID.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **DocFieldTypeField / FieldTypeField** | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddFieldsFlowIDRequest">##### Document Prepper Add Fields Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocPrepperAddFieldsFlowIDResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocPrepperAddFieldsFlowIDResponse>> PostDocPrepperAddFieldWithHttpInfoAsync (string contentType, DocPrepperAddFieldsFlowIDRequest docPrepperAddFieldsFlowIDRequest = default(DocPrepperAddFieldsFlowIDRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostDocPrepperAddField");

            var localVarPath = "/DocPrepperAddFieldsFlowID";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (docPrepperAddFieldsFlowIDRequest != null && docPrepperAddFieldsFlowIDRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(docPrepperAddFieldsFlowIDRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docPrepperAddFieldsFlowIDRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocPrepperAddField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocPrepperAddFieldsFlowIDResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocPrepperAddFieldsFlowIDResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocPrepperAddFieldsFlowIDResponse)));
        }

        /// <summary>
        /// Document Prepper Add Advanced Fields #### The API call used to add advanced fields to a document.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **AdvancedFieldType** | 0 &#x3D; DropDown, 1 &#x3D; CheckBoxGroup, 2 &#x3D; OptionalDropDown, 3 &#x3D; RadioGroup, 4 &#x3D; DateMand, 5 &#x3D; DateOpt, 6 &#x3D; DropDownCountry, 7 &#x3D; OptionalDropDownCountry, 8 &#x3D; DropDownMobilePrefix, 9 &#x3D; OptionalDropDownMobilePrefix |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddAdvancedFieldsRequest">##### Document Prepper Add Advanced Fields Request Model (optional)</param>
        /// <returns>DocPrepperAddAdvancedFieldsResponse</returns>
        public DocPrepperAddAdvancedFieldsResponse PostDocPrepperAdvancedFields (string contentType, DocPrepperAddAdvancedFieldsRequest docPrepperAddAdvancedFieldsRequest = default(DocPrepperAddAdvancedFieldsRequest))
        {
             ApiResponse<DocPrepperAddAdvancedFieldsResponse> localVarResponse = PostDocPrepperAdvancedFieldsWithHttpInfo(contentType, docPrepperAddAdvancedFieldsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Document Prepper Add Advanced Fields #### The API call used to add advanced fields to a document.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **AdvancedFieldType** | 0 &#x3D; DropDown, 1 &#x3D; CheckBoxGroup, 2 &#x3D; OptionalDropDown, 3 &#x3D; RadioGroup, 4 &#x3D; DateMand, 5 &#x3D; DateOpt, 6 &#x3D; DropDownCountry, 7 &#x3D; OptionalDropDownCountry, 8 &#x3D; DropDownMobilePrefix, 9 &#x3D; OptionalDropDownMobilePrefix |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddAdvancedFieldsRequest">##### Document Prepper Add Advanced Fields Request Model (optional)</param>
        /// <returns>ApiResponse of DocPrepperAddAdvancedFieldsResponse</returns>
        public ApiResponse<DocPrepperAddAdvancedFieldsResponse> PostDocPrepperAdvancedFieldsWithHttpInfo (string contentType, DocPrepperAddAdvancedFieldsRequest docPrepperAddAdvancedFieldsRequest = default(DocPrepperAddAdvancedFieldsRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostDocPrepperAdvancedFields");

            var localVarPath = "/DocPrepperAdvancedFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (docPrepperAddAdvancedFieldsRequest != null && docPrepperAddAdvancedFieldsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(docPrepperAddAdvancedFieldsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docPrepperAddAdvancedFieldsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocPrepperAdvancedFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocPrepperAddAdvancedFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocPrepperAddAdvancedFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocPrepperAddAdvancedFieldsResponse)));
        }

        /// <summary>
        /// Document Prepper Add Advanced Fields #### The API call used to add advanced fields to a document.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **AdvancedFieldType** | 0 &#x3D; DropDown, 1 &#x3D; CheckBoxGroup, 2 &#x3D; OptionalDropDown, 3 &#x3D; RadioGroup, 4 &#x3D; DateMand, 5 &#x3D; DateOpt, 6 &#x3D; DropDownCountry, 7 &#x3D; OptionalDropDownCountry, 8 &#x3D; DropDownMobilePrefix, 9 &#x3D; OptionalDropDownMobilePrefix |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddAdvancedFieldsRequest">##### Document Prepper Add Advanced Fields Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocPrepperAddAdvancedFieldsResponse</returns>
        public async System.Threading.Tasks.Task<DocPrepperAddAdvancedFieldsResponse> PostDocPrepperAdvancedFieldsAsync (string contentType, DocPrepperAddAdvancedFieldsRequest docPrepperAddAdvancedFieldsRequest = default(DocPrepperAddAdvancedFieldsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocPrepperAddAdvancedFieldsResponse> localVarResponse = await PostDocPrepperAdvancedFieldsWithHttpInfoAsync(contentType, docPrepperAddAdvancedFieldsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Document Prepper Add Advanced Fields #### The API call used to add advanced fields to a document.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **AdvancedFieldType** | 0 &#x3D; DropDown, 1 &#x3D; CheckBoxGroup, 2 &#x3D; OptionalDropDown, 3 &#x3D; RadioGroup, 4 &#x3D; DateMand, 5 &#x3D; DateOpt, 6 &#x3D; DropDownCountry, 7 &#x3D; OptionalDropDownCountry, 8 &#x3D; DropDownMobilePrefix, 9 &#x3D; OptionalDropDownMobilePrefix |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="docPrepperAddAdvancedFieldsRequest">##### Document Prepper Add Advanced Fields Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocPrepperAddAdvancedFieldsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocPrepperAddAdvancedFieldsResponse>> PostDocPrepperAdvancedFieldsWithHttpInfoAsync (string contentType, DocPrepperAddAdvancedFieldsRequest docPrepperAddAdvancedFieldsRequest = default(DocPrepperAddAdvancedFieldsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostDocPrepperAdvancedFields");

            var localVarPath = "/DocPrepperAdvancedFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (docPrepperAddAdvancedFieldsRequest != null && docPrepperAddAdvancedFieldsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(docPrepperAddAdvancedFieldsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = docPrepperAddAdvancedFieldsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocPrepperAdvancedFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocPrepperAddAdvancedFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocPrepperAddAdvancedFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocPrepperAddAdvancedFieldsResponse)));
        }

        /// <summary>
        /// FullWorkflow #### Used to create a e-signature workflow with a single API Request. The request can contain multiple recipients, fields and signatures.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | AutoRemindField| 0 &#x3D; No, 1 &#x3D; Yes | | ExtensionField |0 &#x3D; pdf, 1 &#x3D; xls, 2 &#x3D; txt, 3 &#x3D; xlsx, 4 &#x3D; docx, 5 &#x3D; doc, 6 &#x3D; xml, 7 &#x3D; png, 8 &#x3D; jpg, 9 &#x3D; gif | | PriorityField  | 0 &#x3D; Low, 1 &#x3D; Normal, 2 &#x3D; High | | ActionField    | 0 &#x3D; SignDocument, 1 &#x3D; ViewDocument, 2 &#x3D; ApproveDocument | | AllowProxyField| 0 &#x3D; No, 1 &#x3D; Yes |  | FieldTypeField | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="fullWorkflowRequest">##### FullWorkflow Request Model (optional)</param>
        /// <returns>FullWorkflowResponse</returns>
        public FullWorkflowResponse PostFullWorkflow (string contentType, FullWorkflowRequest fullWorkflowRequest = default(FullWorkflowRequest))
        {
             ApiResponse<FullWorkflowResponse> localVarResponse = PostFullWorkflowWithHttpInfo(contentType, fullWorkflowRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// FullWorkflow #### Used to create a e-signature workflow with a single API Request. The request can contain multiple recipients, fields and signatures.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | AutoRemindField| 0 &#x3D; No, 1 &#x3D; Yes | | ExtensionField |0 &#x3D; pdf, 1 &#x3D; xls, 2 &#x3D; txt, 3 &#x3D; xlsx, 4 &#x3D; docx, 5 &#x3D; doc, 6 &#x3D; xml, 7 &#x3D; png, 8 &#x3D; jpg, 9 &#x3D; gif | | PriorityField  | 0 &#x3D; Low, 1 &#x3D; Normal, 2 &#x3D; High | | ActionField    | 0 &#x3D; SignDocument, 1 &#x3D; ViewDocument, 2 &#x3D; ApproveDocument | | AllowProxyField| 0 &#x3D; No, 1 &#x3D; Yes |  | FieldTypeField | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="fullWorkflowRequest">##### FullWorkflow Request Model (optional)</param>
        /// <returns>ApiResponse of FullWorkflowResponse</returns>
        public ApiResponse<FullWorkflowResponse> PostFullWorkflowWithHttpInfo (string contentType, FullWorkflowRequest fullWorkflowRequest = default(FullWorkflowRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostFullWorkflow");

            var localVarPath = "/FullWorkflow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (fullWorkflowRequest != null && fullWorkflowRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fullWorkflowRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fullWorkflowRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFullWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FullWorkflowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FullWorkflowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FullWorkflowResponse)));
        }

        /// <summary>
        /// FullWorkflow #### Used to create a e-signature workflow with a single API Request. The request can contain multiple recipients, fields and signatures.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | AutoRemindField| 0 &#x3D; No, 1 &#x3D; Yes | | ExtensionField |0 &#x3D; pdf, 1 &#x3D; xls, 2 &#x3D; txt, 3 &#x3D; xlsx, 4 &#x3D; docx, 5 &#x3D; doc, 6 &#x3D; xml, 7 &#x3D; png, 8 &#x3D; jpg, 9 &#x3D; gif | | PriorityField  | 0 &#x3D; Low, 1 &#x3D; Normal, 2 &#x3D; High | | ActionField    | 0 &#x3D; SignDocument, 1 &#x3D; ViewDocument, 2 &#x3D; ApproveDocument | | AllowProxyField| 0 &#x3D; No, 1 &#x3D; Yes |  | FieldTypeField | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="fullWorkflowRequest">##### FullWorkflow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FullWorkflowResponse</returns>
        public async System.Threading.Tasks.Task<FullWorkflowResponse> PostFullWorkflowAsync (string contentType, FullWorkflowRequest fullWorkflowRequest = default(FullWorkflowRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FullWorkflowResponse> localVarResponse = await PostFullWorkflowWithHttpInfoAsync(contentType, fullWorkflowRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// FullWorkflow #### Used to create a e-signature workflow with a single API Request. The request can contain multiple recipients, fields and signatures.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | AutoRemindField| 0 &#x3D; No, 1 &#x3D; Yes | | ExtensionField |0 &#x3D; pdf, 1 &#x3D; xls, 2 &#x3D; txt, 3 &#x3D; xlsx, 4 &#x3D; docx, 5 &#x3D; doc, 6 &#x3D; xml, 7 &#x3D; png, 8 &#x3D; jpg, 9 &#x3D; gif | | PriorityField  | 0 &#x3D; Low, 1 &#x3D; Normal, 2 &#x3D; High | | ActionField    | 0 &#x3D; SignDocument, 1 &#x3D; ViewDocument, 2 &#x3D; ApproveDocument | | AllowProxyField| 0 &#x3D; No, 1 &#x3D; Yes |  | FieldTypeField | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="fullWorkflowRequest">##### FullWorkflow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FullWorkflowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FullWorkflowResponse>> PostFullWorkflowWithHttpInfoAsync (string contentType, FullWorkflowRequest fullWorkflowRequest = default(FullWorkflowRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostFullWorkflow");

            var localVarPath = "/FullWorkflow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (fullWorkflowRequest != null && fullWorkflowRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fullWorkflowRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fullWorkflowRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFullWorkflow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FullWorkflowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FullWorkflowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FullWorkflowResponse)));
        }

        /// <summary>
        /// Get Document Status #### Used to get the status of a document ex. pending/completed/rejected.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocStatusRequest">##### Get Document Status Request Model (optional)</param>
        /// <returns>GetDocStatusResponse</returns>
        public GetDocStatusResponse PostGetDocStatus (string contentType, GetDocStatusRequest getDocStatusRequest = default(GetDocStatusRequest))
        {
             ApiResponse<GetDocStatusResponse> localVarResponse = PostGetDocStatusWithHttpInfo(contentType, getDocStatusRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document Status #### Used to get the status of a document ex. pending/completed/rejected.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocStatusRequest">##### Get Document Status Request Model (optional)</param>
        /// <returns>ApiResponse of GetDocStatusResponse</returns>
        public ApiResponse<GetDocStatusResponse> PostGetDocStatusWithHttpInfo (string contentType, GetDocStatusRequest getDocStatusRequest = default(GetDocStatusRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostGetDocStatus");

            var localVarPath = "/GetDocStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (getDocStatusRequest != null && getDocStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getDocStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getDocStatusRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGetDocStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDocStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocStatusResponse)));
        }

        /// <summary>
        /// Get Document Status #### Used to get the status of a document ex. pending/completed/rejected.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocStatusRequest">##### Get Document Status Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetDocStatusResponse</returns>
        public async System.Threading.Tasks.Task<GetDocStatusResponse> PostGetDocStatusAsync (string contentType, GetDocStatusRequest getDocStatusRequest = default(GetDocStatusRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetDocStatusResponse> localVarResponse = await PostGetDocStatusWithHttpInfoAsync(contentType, getDocStatusRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Document Status #### Used to get the status of a document ex. pending/completed/rejected.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocStatusRequest">##### Get Document Status Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetDocStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDocStatusResponse>> PostGetDocStatusWithHttpInfoAsync (string contentType, GetDocStatusRequest getDocStatusRequest = default(GetDocStatusRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostGetDocStatus");

            var localVarPath = "/GetDocStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (getDocStatusRequest != null && getDocStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getDocStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getDocStatusRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGetDocStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDocStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocStatusResponse)));
        }

        /// <summary>
        /// Initiate Flow #### Used to initiate aworkflow of a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowRequest">##### Initiate Flow Request Model (optional)</param>
        /// <returns>InitiateFlowResponse</returns>
        public InitiateFlowResponse PostInitiateFlow (string contentType, InitiateFlowRequest initiateFlowRequest = default(InitiateFlowRequest))
        {
             ApiResponse<InitiateFlowResponse> localVarResponse = PostInitiateFlowWithHttpInfo(contentType, initiateFlowRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate Flow #### Used to initiate aworkflow of a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowRequest">##### Initiate Flow Request Model (optional)</param>
        /// <returns>ApiResponse of InitiateFlowResponse</returns>
        public ApiResponse<InitiateFlowResponse> PostInitiateFlowWithHttpInfo (string contentType, InitiateFlowRequest initiateFlowRequest = default(InitiateFlowRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostInitiateFlow");

            var localVarPath = "/InitiateFlow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (initiateFlowRequest != null && initiateFlowRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(initiateFlowRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = initiateFlowRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostInitiateFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InitiateFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InitiateFlowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InitiateFlowResponse)));
        }

        /// <summary>
        /// Initiate Flow #### Used to initiate aworkflow of a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowRequest">##### Initiate Flow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InitiateFlowResponse</returns>
        public async System.Threading.Tasks.Task<InitiateFlowResponse> PostInitiateFlowAsync (string contentType, InitiateFlowRequest initiateFlowRequest = default(InitiateFlowRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InitiateFlowResponse> localVarResponse = await PostInitiateFlowWithHttpInfoAsync(contentType, initiateFlowRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiate Flow #### Used to initiate aworkflow of a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowRequest">##### Initiate Flow Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InitiateFlowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InitiateFlowResponse>> PostInitiateFlowWithHttpInfoAsync (string contentType, InitiateFlowRequest initiateFlowRequest = default(InitiateFlowRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostInitiateFlow");

            var localVarPath = "/InitiateFlow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (initiateFlowRequest != null && initiateFlowRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(initiateFlowRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = initiateFlowRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostInitiateFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InitiateFlowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InitiateFlowResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InitiateFlowResponse)));
        }

        /// <summary>
        /// Initiate Flow No Email #### Used to initiate a workflow without sending out emails.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoEmailRequest">##### Initiate Flow No Email Request Model (optional)</param>
        /// <returns>InitiateFlowNoEmailResponse</returns>
        public InitiateFlowNoEmailResponse PostInitiateFlowNoEmail (string contentType, InitiateFlowNoEmailRequest initiateFlowNoEmailRequest = default(InitiateFlowNoEmailRequest))
        {
             ApiResponse<InitiateFlowNoEmailResponse> localVarResponse = PostInitiateFlowNoEmailWithHttpInfo(contentType, initiateFlowNoEmailRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate Flow No Email #### Used to initiate a workflow without sending out emails.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoEmailRequest">##### Initiate Flow No Email Request Model (optional)</param>
        /// <returns>ApiResponse of InitiateFlowNoEmailResponse</returns>
        public ApiResponse<InitiateFlowNoEmailResponse> PostInitiateFlowNoEmailWithHttpInfo (string contentType, InitiateFlowNoEmailRequest initiateFlowNoEmailRequest = default(InitiateFlowNoEmailRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostInitiateFlowNoEmail");

            var localVarPath = "/InitiateFlow_No_Email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (initiateFlowNoEmailRequest != null && initiateFlowNoEmailRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(initiateFlowNoEmailRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = initiateFlowNoEmailRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostInitiateFlowNoEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InitiateFlowNoEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InitiateFlowNoEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InitiateFlowNoEmailResponse)));
        }

        /// <summary>
        /// Initiate Flow No Email #### Used to initiate a workflow without sending out emails.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoEmailRequest">##### Initiate Flow No Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InitiateFlowNoEmailResponse</returns>
        public async System.Threading.Tasks.Task<InitiateFlowNoEmailResponse> PostInitiateFlowNoEmailAsync (string contentType, InitiateFlowNoEmailRequest initiateFlowNoEmailRequest = default(InitiateFlowNoEmailRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InitiateFlowNoEmailResponse> localVarResponse = await PostInitiateFlowNoEmailWithHttpInfoAsync(contentType, initiateFlowNoEmailRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiate Flow No Email #### Used to initiate a workflow without sending out emails.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoEmailRequest">##### Initiate Flow No Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InitiateFlowNoEmailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InitiateFlowNoEmailResponse>> PostInitiateFlowNoEmailWithHttpInfoAsync (string contentType, InitiateFlowNoEmailRequest initiateFlowNoEmailRequest = default(InitiateFlowNoEmailRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostInitiateFlowNoEmail");

            var localVarPath = "/InitiateFlow_No_Email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (initiateFlowNoEmailRequest != null && initiateFlowNoEmailRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(initiateFlowNoEmailRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = initiateFlowNoEmailRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostInitiateFlowNoEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InitiateFlowNoEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InitiateFlowNoEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InitiateFlowNoEmailResponse)));
        }

        /// <summary>
        /// Initiate Flow No Initial Email #### Used to initiate a document workflow without an initial email being sent to the user.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoInitialEmailRequest">##### Initiate Flow No Initial Email Request Model (optional)</param>
        /// <returns>InitiateFlowNoInitialEmailResponse</returns>
        public InitiateFlowNoInitialEmailResponse PostInitiateFlowNoInitialEmail (string contentType, InitiateFlowNoInitialEmailRequest initiateFlowNoInitialEmailRequest = default(InitiateFlowNoInitialEmailRequest))
        {
             ApiResponse<InitiateFlowNoInitialEmailResponse> localVarResponse = PostInitiateFlowNoInitialEmailWithHttpInfo(contentType, initiateFlowNoInitialEmailRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate Flow No Initial Email #### Used to initiate a document workflow without an initial email being sent to the user.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoInitialEmailRequest">##### Initiate Flow No Initial Email Request Model (optional)</param>
        /// <returns>ApiResponse of InitiateFlowNoInitialEmailResponse</returns>
        public ApiResponse<InitiateFlowNoInitialEmailResponse> PostInitiateFlowNoInitialEmailWithHttpInfo (string contentType, InitiateFlowNoInitialEmailRequest initiateFlowNoInitialEmailRequest = default(InitiateFlowNoInitialEmailRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostInitiateFlowNoInitialEmail");

            var localVarPath = "/InitiateFlow_No_Initial_Email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (initiateFlowNoInitialEmailRequest != null && initiateFlowNoInitialEmailRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(initiateFlowNoInitialEmailRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = initiateFlowNoInitialEmailRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostInitiateFlowNoInitialEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InitiateFlowNoInitialEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InitiateFlowNoInitialEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InitiateFlowNoInitialEmailResponse)));
        }

        /// <summary>
        /// Initiate Flow No Initial Email #### Used to initiate a document workflow without an initial email being sent to the user.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoInitialEmailRequest">##### Initiate Flow No Initial Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InitiateFlowNoInitialEmailResponse</returns>
        public async System.Threading.Tasks.Task<InitiateFlowNoInitialEmailResponse> PostInitiateFlowNoInitialEmailAsync (string contentType, InitiateFlowNoInitialEmailRequest initiateFlowNoInitialEmailRequest = default(InitiateFlowNoInitialEmailRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InitiateFlowNoInitialEmailResponse> localVarResponse = await PostInitiateFlowNoInitialEmailWithHttpInfoAsync(contentType, initiateFlowNoInitialEmailRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiate Flow No Initial Email #### Used to initiate a document workflow without an initial email being sent to the user.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="initiateFlowNoInitialEmailRequest">##### Initiate Flow No Initial Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InitiateFlowNoInitialEmailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InitiateFlowNoInitialEmailResponse>> PostInitiateFlowNoInitialEmailWithHttpInfoAsync (string contentType, InitiateFlowNoInitialEmailRequest initiateFlowNoInitialEmailRequest = default(InitiateFlowNoInitialEmailRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostInitiateFlowNoInitialEmail");

            var localVarPath = "/InitiateFlow_No_Initial_Email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (initiateFlowNoInitialEmailRequest != null && initiateFlowNoInitialEmailRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(initiateFlowNoInitialEmailRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = initiateFlowNoInitialEmailRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostInitiateFlowNoInitialEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InitiateFlowNoInitialEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InitiateFlowNoInitialEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InitiateFlowNoInitialEmailResponse)));
        }

        /// <summary>
        /// Workflow Sign #### Used to send a request to a user to sign a document workflow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="workflowSignRequest">##### Workflow Sign Request Model (optional)</param>
        /// <returns>WorkflowSignResponse</returns>
        public WorkflowSignResponse PostWorkflowSign (string contentType, WorkflowSignRequest workflowSignRequest = default(WorkflowSignRequest))
        {
             ApiResponse<WorkflowSignResponse> localVarResponse = PostWorkflowSignWithHttpInfo(contentType, workflowSignRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Workflow Sign #### Used to send a request to a user to sign a document workflow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="workflowSignRequest">##### Workflow Sign Request Model (optional)</param>
        /// <returns>ApiResponse of WorkflowSignResponse</returns>
        public ApiResponse<WorkflowSignResponse> PostWorkflowSignWithHttpInfo (string contentType, WorkflowSignRequest workflowSignRequest = default(WorkflowSignRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostWorkflowSign");

            var localVarPath = "/WorkflowSign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (workflowSignRequest != null && workflowSignRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workflowSignRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workflowSignRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkflowSign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowSignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowSignResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowSignResponse)));
        }

        /// <summary>
        /// Workflow Sign #### Used to send a request to a user to sign a document workflow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="workflowSignRequest">##### Workflow Sign Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WorkflowSignResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowSignResponse> PostWorkflowSignAsync (string contentType, WorkflowSignRequest workflowSignRequest = default(WorkflowSignRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WorkflowSignResponse> localVarResponse = await PostWorkflowSignWithHttpInfoAsync(contentType, workflowSignRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Workflow Sign #### Used to send a request to a user to sign a document workflow.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="workflowSignRequest">##### Workflow Sign Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WorkflowSignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowSignResponse>> PostWorkflowSignWithHttpInfoAsync (string contentType, WorkflowSignRequest workflowSignRequest = default(WorkflowSignRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling WorkFlowApi->PostWorkflowSign");

            var localVarPath = "/WorkflowSign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (workflowSignRequest != null && workflowSignRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(workflowSignRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = workflowSignRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWorkflowSign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowSignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WorkflowSignResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowSignResponse)));
        }

    }
}
