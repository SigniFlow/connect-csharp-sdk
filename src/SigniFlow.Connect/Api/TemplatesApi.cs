/*
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SigniFlow.Connect.Client;
using SigniFlow.Connect.Model;

namespace SigniFlow.Connect.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Apply a Prepper template
        /// </summary>
        /// <remarks>
        /// #### Used when applying a template to a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="applyPrepperTemplateRequest">##### Apply A Prepper Template Request Model. (optional)</param>
        /// <returns>ApplyPrepperTemplateResponse</returns>
        ApplyPrepperTemplateResponse PostApplyPrepperTemplate(string contentType, ApplyPrepperTemplateRequest applyPrepperTemplateRequest = default(ApplyPrepperTemplateRequest));

        /// <summary>
        /// Apply a Prepper template
        /// </summary>
        /// <remarks>
        /// #### Used when applying a template to a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="applyPrepperTemplateRequest">##### Apply A Prepper Template Request Model. (optional)</param>
        /// <returns>ApiResponse of ApplyPrepperTemplateResponse</returns>
        ApiResponse<ApplyPrepperTemplateResponse> PostApplyPrepperTemplateWithHttpInfo(string contentType, ApplyPrepperTemplateRequest applyPrepperTemplateRequest = default(ApplyPrepperTemplateRequest));
        /// <summary>
        /// Get Document Tag Field Box Position
        /// </summary>
        /// <remarks>
        /// #### Used to get the tag field box position on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldBoxPositionRequest">##### Get Document Tag Field Box Position Request Model (optional)</param>
        /// <returns>GetDocumentTagFieldBoxPositionResponse</returns>
        GetDocumentTagFieldBoxPositionResponse PostGetDocumentTagFieldBoxPosition(string contentType, GetDocumentTagFieldBoxPositionRequest getDocumentTagFieldBoxPositionRequest = default(GetDocumentTagFieldBoxPositionRequest));

        /// <summary>
        /// Get Document Tag Field Box Position
        /// </summary>
        /// <remarks>
        /// #### Used to get the tag field box position on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldBoxPositionRequest">##### Get Document Tag Field Box Position Request Model (optional)</param>
        /// <returns>ApiResponse of GetDocumentTagFieldBoxPositionResponse</returns>
        ApiResponse<GetDocumentTagFieldBoxPositionResponse> PostGetDocumentTagFieldBoxPositionWithHttpInfo(string contentType, GetDocumentTagFieldBoxPositionRequest getDocumentTagFieldBoxPositionRequest = default(GetDocumentTagFieldBoxPositionRequest));
        /// <summary>
        /// Get Document Tag Field Position
        /// </summary>
        /// <remarks>
        /// #### Used to get the tag position on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldPositionRequest">##### Get Document Tag Field Position Request Model (optional)</param>
        /// <returns>GetDocumentTagFieldPositionResponse</returns>
        GetDocumentTagFieldPositionResponse PostGetDocumentTagFieldPosition(string contentType, GetDocumentTagFieldPositionRequest getDocumentTagFieldPositionRequest = default(GetDocumentTagFieldPositionRequest));

        /// <summary>
        /// Get Document Tag Field Position
        /// </summary>
        /// <remarks>
        /// #### Used to get the tag position on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldPositionRequest">##### Get Document Tag Field Position Request Model (optional)</param>
        /// <returns>ApiResponse of GetDocumentTagFieldPositionResponse</returns>
        ApiResponse<GetDocumentTagFieldPositionResponse> PostGetDocumentTagFieldPositionWithHttpInfo(string contentType, GetDocumentTagFieldPositionRequest getDocumentTagFieldPositionRequest = default(GetDocumentTagFieldPositionRequest));
        /// <summary>
        /// Get Prepper Template
        /// </summary>
        /// <remarks>
        /// #### Used to get a document template.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateRequest">##### Get Prepper Template Request Model (optional)</param>
        /// <returns>GetPrepperTemplateResponse</returns>
        GetPrepperTemplateResponse PostGetPrepperTemplate(string contentType, GetPrepperTemplateRequest getPrepperTemplateRequest = default(GetPrepperTemplateRequest));

        /// <summary>
        /// Get Prepper Template
        /// </summary>
        /// <remarks>
        /// #### Used to get a document template.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateRequest">##### Get Prepper Template Request Model (optional)</param>
        /// <returns>ApiResponse of GetPrepperTemplateResponse</returns>
        ApiResponse<GetPrepperTemplateResponse> PostGetPrepperTemplateWithHttpInfo(string contentType, GetPrepperTemplateRequest getPrepperTemplateRequest = default(GetPrepperTemplateRequest));
        /// <summary>
        /// Get Prepper Template List
        /// </summary>
        /// <remarks>
        /// #### Used to get a list of document templates.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateListRequest">##### Get Prepper Template List Request Model (optional)</param>
        /// <returns>GetPrepperTemplateListResponse</returns>
        GetPrepperTemplateListResponse PostGetPrepperTemplateList(string contentType, GetPrepperTemplateListRequest getPrepperTemplateListRequest = default(GetPrepperTemplateListRequest));

        /// <summary>
        /// Get Prepper Template List
        /// </summary>
        /// <remarks>
        /// #### Used to get a list of document templates.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateListRequest">##### Get Prepper Template List Request Model (optional)</param>
        /// <returns>ApiResponse of GetPrepperTemplateListResponse</returns>
        ApiResponse<GetPrepperTemplateListResponse> PostGetPrepperTemplateListWithHttpInfo(string contentType, GetPrepperTemplateListRequest getPrepperTemplateListRequest = default(GetPrepperTemplateListRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Apply a Prepper template
        /// </summary>
        /// <remarks>
        /// #### Used when applying a template to a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="applyPrepperTemplateRequest">##### Apply A Prepper Template Request Model. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplyPrepperTemplateResponse</returns>
        System.Threading.Tasks.Task<ApplyPrepperTemplateResponse> PostApplyPrepperTemplateAsync(string contentType, ApplyPrepperTemplateRequest applyPrepperTemplateRequest = default(ApplyPrepperTemplateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Apply a Prepper template
        /// </summary>
        /// <remarks>
        /// #### Used when applying a template to a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="applyPrepperTemplateRequest">##### Apply A Prepper Template Request Model. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplyPrepperTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplyPrepperTemplateResponse>> PostApplyPrepperTemplateWithHttpInfoAsync(string contentType, ApplyPrepperTemplateRequest applyPrepperTemplateRequest = default(ApplyPrepperTemplateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Document Tag Field Box Position
        /// </summary>
        /// <remarks>
        /// #### Used to get the tag field box position on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldBoxPositionRequest">##### Get Document Tag Field Box Position Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDocumentTagFieldBoxPositionResponse</returns>
        System.Threading.Tasks.Task<GetDocumentTagFieldBoxPositionResponse> PostGetDocumentTagFieldBoxPositionAsync(string contentType, GetDocumentTagFieldBoxPositionRequest getDocumentTagFieldBoxPositionRequest = default(GetDocumentTagFieldBoxPositionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Document Tag Field Box Position
        /// </summary>
        /// <remarks>
        /// #### Used to get the tag field box position on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldBoxPositionRequest">##### Get Document Tag Field Box Position Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDocumentTagFieldBoxPositionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocumentTagFieldBoxPositionResponse>> PostGetDocumentTagFieldBoxPositionWithHttpInfoAsync(string contentType, GetDocumentTagFieldBoxPositionRequest getDocumentTagFieldBoxPositionRequest = default(GetDocumentTagFieldBoxPositionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Document Tag Field Position
        /// </summary>
        /// <remarks>
        /// #### Used to get the tag position on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldPositionRequest">##### Get Document Tag Field Position Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDocumentTagFieldPositionResponse</returns>
        System.Threading.Tasks.Task<GetDocumentTagFieldPositionResponse> PostGetDocumentTagFieldPositionAsync(string contentType, GetDocumentTagFieldPositionRequest getDocumentTagFieldPositionRequest = default(GetDocumentTagFieldPositionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Document Tag Field Position
        /// </summary>
        /// <remarks>
        /// #### Used to get the tag position on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldPositionRequest">##### Get Document Tag Field Position Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDocumentTagFieldPositionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocumentTagFieldPositionResponse>> PostGetDocumentTagFieldPositionWithHttpInfoAsync(string contentType, GetDocumentTagFieldPositionRequest getDocumentTagFieldPositionRequest = default(GetDocumentTagFieldPositionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Prepper Template
        /// </summary>
        /// <remarks>
        /// #### Used to get a document template.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateRequest">##### Get Prepper Template Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPrepperTemplateResponse</returns>
        System.Threading.Tasks.Task<GetPrepperTemplateResponse> PostGetPrepperTemplateAsync(string contentType, GetPrepperTemplateRequest getPrepperTemplateRequest = default(GetPrepperTemplateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Prepper Template
        /// </summary>
        /// <remarks>
        /// #### Used to get a document template.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateRequest">##### Get Prepper Template Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPrepperTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPrepperTemplateResponse>> PostGetPrepperTemplateWithHttpInfoAsync(string contentType, GetPrepperTemplateRequest getPrepperTemplateRequest = default(GetPrepperTemplateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Prepper Template List
        /// </summary>
        /// <remarks>
        /// #### Used to get a list of document templates.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateListRequest">##### Get Prepper Template List Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPrepperTemplateListResponse</returns>
        System.Threading.Tasks.Task<GetPrepperTemplateListResponse> PostGetPrepperTemplateListAsync(string contentType, GetPrepperTemplateListRequest getPrepperTemplateListRequest = default(GetPrepperTemplateListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Prepper Template List
        /// </summary>
        /// <remarks>
        /// #### Used to get a list of document templates.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateListRequest">##### Get Prepper Template List Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPrepperTemplateListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPrepperTemplateListResponse>> PostGetPrepperTemplateListWithHttpInfoAsync(string contentType, GetPrepperTemplateListRequest getPrepperTemplateListRequest = default(GetPrepperTemplateListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApi : ITemplatesApiSync, ITemplatesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplatesApi : ITemplatesApi
    {
        private SigniFlow.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesApi(String basePath)
        {
            this.Configuration = SigniFlow.Connect.Client.Configuration.MergeConfigurations(
                SigniFlow.Connect.Client.GlobalConfiguration.Instance,
                new SigniFlow.Connect.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SigniFlow.Connect.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SigniFlow.Connect.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplatesApi(SigniFlow.Connect.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SigniFlow.Connect.Client.Configuration.MergeConfigurations(
                SigniFlow.Connect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SigniFlow.Connect.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SigniFlow.Connect.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TemplatesApi(SigniFlow.Connect.Client.ISynchronousClient client, SigniFlow.Connect.Client.IAsynchronousClient asyncClient, SigniFlow.Connect.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SigniFlow.Connect.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SigniFlow.Connect.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SigniFlow.Connect.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SigniFlow.Connect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Apply a Prepper template #### Used when applying a template to a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="applyPrepperTemplateRequest">##### Apply A Prepper Template Request Model. (optional)</param>
        /// <returns>ApplyPrepperTemplateResponse</returns>
        public ApplyPrepperTemplateResponse PostApplyPrepperTemplate(string contentType, ApplyPrepperTemplateRequest applyPrepperTemplateRequest = default(ApplyPrepperTemplateRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<ApplyPrepperTemplateResponse> localVarResponse = PostApplyPrepperTemplateWithHttpInfo(contentType, applyPrepperTemplateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply a Prepper template #### Used when applying a template to a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="applyPrepperTemplateRequest">##### Apply A Prepper Template Request Model. (optional)</param>
        /// <returns>ApiResponse of ApplyPrepperTemplateResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<ApplyPrepperTemplateResponse> PostApplyPrepperTemplateWithHttpInfo(string contentType, ApplyPrepperTemplateRequest applyPrepperTemplateRequest = default(ApplyPrepperTemplateRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostApplyPrepperTemplate");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = applyPrepperTemplateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ApplyPrepperTemplateResponse>("/ApplyPrepperTemplate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApplyPrepperTemplate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apply a Prepper template #### Used when applying a template to a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="applyPrepperTemplateRequest">##### Apply A Prepper Template Request Model. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplyPrepperTemplateResponse</returns>
        public async System.Threading.Tasks.Task<ApplyPrepperTemplateResponse> PostApplyPrepperTemplateAsync(string contentType, ApplyPrepperTemplateRequest applyPrepperTemplateRequest = default(ApplyPrepperTemplateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<ApplyPrepperTemplateResponse> localVarResponse = await PostApplyPrepperTemplateWithHttpInfoAsync(contentType, applyPrepperTemplateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply a Prepper template #### Used when applying a template to a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="applyPrepperTemplateRequest">##### Apply A Prepper Template Request Model. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplyPrepperTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<ApplyPrepperTemplateResponse>> PostApplyPrepperTemplateWithHttpInfoAsync(string contentType, ApplyPrepperTemplateRequest applyPrepperTemplateRequest = default(ApplyPrepperTemplateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostApplyPrepperTemplate");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = applyPrepperTemplateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApplyPrepperTemplateResponse>("/ApplyPrepperTemplate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostApplyPrepperTemplate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Document Tag Field Box Position #### Used to get the tag field box position on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldBoxPositionRequest">##### Get Document Tag Field Box Position Request Model (optional)</param>
        /// <returns>GetDocumentTagFieldBoxPositionResponse</returns>
        public GetDocumentTagFieldBoxPositionResponse PostGetDocumentTagFieldBoxPosition(string contentType, GetDocumentTagFieldBoxPositionRequest getDocumentTagFieldBoxPositionRequest = default(GetDocumentTagFieldBoxPositionRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<GetDocumentTagFieldBoxPositionResponse> localVarResponse = PostGetDocumentTagFieldBoxPositionWithHttpInfo(contentType, getDocumentTagFieldBoxPositionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document Tag Field Box Position #### Used to get the tag field box position on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldBoxPositionRequest">##### Get Document Tag Field Box Position Request Model (optional)</param>
        /// <returns>ApiResponse of GetDocumentTagFieldBoxPositionResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<GetDocumentTagFieldBoxPositionResponse> PostGetDocumentTagFieldBoxPositionWithHttpInfo(string contentType, GetDocumentTagFieldBoxPositionRequest getDocumentTagFieldBoxPositionRequest = default(GetDocumentTagFieldBoxPositionRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostGetDocumentTagFieldBoxPosition");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = getDocumentTagFieldBoxPositionRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDocumentTagFieldBoxPositionResponse>("/GetDocumentTagFieldBoxPosition", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGetDocumentTagFieldBoxPosition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Document Tag Field Box Position #### Used to get the tag field box position on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldBoxPositionRequest">##### Get Document Tag Field Box Position Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDocumentTagFieldBoxPositionResponse</returns>
        public async System.Threading.Tasks.Task<GetDocumentTagFieldBoxPositionResponse> PostGetDocumentTagFieldBoxPositionAsync(string contentType, GetDocumentTagFieldBoxPositionRequest getDocumentTagFieldBoxPositionRequest = default(GetDocumentTagFieldBoxPositionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<GetDocumentTagFieldBoxPositionResponse> localVarResponse = await PostGetDocumentTagFieldBoxPositionWithHttpInfoAsync(contentType, getDocumentTagFieldBoxPositionRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document Tag Field Box Position #### Used to get the tag field box position on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldBoxPositionRequest">##### Get Document Tag Field Box Position Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDocumentTagFieldBoxPositionResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<GetDocumentTagFieldBoxPositionResponse>> PostGetDocumentTagFieldBoxPositionWithHttpInfoAsync(string contentType, GetDocumentTagFieldBoxPositionRequest getDocumentTagFieldBoxPositionRequest = default(GetDocumentTagFieldBoxPositionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostGetDocumentTagFieldBoxPosition");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = getDocumentTagFieldBoxPositionRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDocumentTagFieldBoxPositionResponse>("/GetDocumentTagFieldBoxPosition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGetDocumentTagFieldBoxPosition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Document Tag Field Position #### Used to get the tag position on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldPositionRequest">##### Get Document Tag Field Position Request Model (optional)</param>
        /// <returns>GetDocumentTagFieldPositionResponse</returns>
        public GetDocumentTagFieldPositionResponse PostGetDocumentTagFieldPosition(string contentType, GetDocumentTagFieldPositionRequest getDocumentTagFieldPositionRequest = default(GetDocumentTagFieldPositionRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<GetDocumentTagFieldPositionResponse> localVarResponse = PostGetDocumentTagFieldPositionWithHttpInfo(contentType, getDocumentTagFieldPositionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document Tag Field Position #### Used to get the tag position on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldPositionRequest">##### Get Document Tag Field Position Request Model (optional)</param>
        /// <returns>ApiResponse of GetDocumentTagFieldPositionResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<GetDocumentTagFieldPositionResponse> PostGetDocumentTagFieldPositionWithHttpInfo(string contentType, GetDocumentTagFieldPositionRequest getDocumentTagFieldPositionRequest = default(GetDocumentTagFieldPositionRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostGetDocumentTagFieldPosition");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = getDocumentTagFieldPositionRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDocumentTagFieldPositionResponse>("/GetDocumentTagFieldPosition", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGetDocumentTagFieldPosition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Document Tag Field Position #### Used to get the tag position on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldPositionRequest">##### Get Document Tag Field Position Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDocumentTagFieldPositionResponse</returns>
        public async System.Threading.Tasks.Task<GetDocumentTagFieldPositionResponse> PostGetDocumentTagFieldPositionAsync(string contentType, GetDocumentTagFieldPositionRequest getDocumentTagFieldPositionRequest = default(GetDocumentTagFieldPositionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<GetDocumentTagFieldPositionResponse> localVarResponse = await PostGetDocumentTagFieldPositionWithHttpInfoAsync(contentType, getDocumentTagFieldPositionRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document Tag Field Position #### Used to get the tag position on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldPositionRequest">##### Get Document Tag Field Position Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDocumentTagFieldPositionResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<GetDocumentTagFieldPositionResponse>> PostGetDocumentTagFieldPositionWithHttpInfoAsync(string contentType, GetDocumentTagFieldPositionRequest getDocumentTagFieldPositionRequest = default(GetDocumentTagFieldPositionRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostGetDocumentTagFieldPosition");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = getDocumentTagFieldPositionRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDocumentTagFieldPositionResponse>("/GetDocumentTagFieldPosition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGetDocumentTagFieldPosition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Prepper Template #### Used to get a document template.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateRequest">##### Get Prepper Template Request Model (optional)</param>
        /// <returns>GetPrepperTemplateResponse</returns>
        public GetPrepperTemplateResponse PostGetPrepperTemplate(string contentType, GetPrepperTemplateRequest getPrepperTemplateRequest = default(GetPrepperTemplateRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<GetPrepperTemplateResponse> localVarResponse = PostGetPrepperTemplateWithHttpInfo(contentType, getPrepperTemplateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Prepper Template #### Used to get a document template.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateRequest">##### Get Prepper Template Request Model (optional)</param>
        /// <returns>ApiResponse of GetPrepperTemplateResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<GetPrepperTemplateResponse> PostGetPrepperTemplateWithHttpInfo(string contentType, GetPrepperTemplateRequest getPrepperTemplateRequest = default(GetPrepperTemplateRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostGetPrepperTemplate");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = getPrepperTemplateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetPrepperTemplateResponse>("/GetPrepperTemplate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGetPrepperTemplate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Prepper Template #### Used to get a document template.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateRequest">##### Get Prepper Template Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPrepperTemplateResponse</returns>
        public async System.Threading.Tasks.Task<GetPrepperTemplateResponse> PostGetPrepperTemplateAsync(string contentType, GetPrepperTemplateRequest getPrepperTemplateRequest = default(GetPrepperTemplateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<GetPrepperTemplateResponse> localVarResponse = await PostGetPrepperTemplateWithHttpInfoAsync(contentType, getPrepperTemplateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Prepper Template #### Used to get a document template.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateRequest">##### Get Prepper Template Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPrepperTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<GetPrepperTemplateResponse>> PostGetPrepperTemplateWithHttpInfoAsync(string contentType, GetPrepperTemplateRequest getPrepperTemplateRequest = default(GetPrepperTemplateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostGetPrepperTemplate");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = getPrepperTemplateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetPrepperTemplateResponse>("/GetPrepperTemplate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGetPrepperTemplate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Prepper Template List #### Used to get a list of document templates.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateListRequest">##### Get Prepper Template List Request Model (optional)</param>
        /// <returns>GetPrepperTemplateListResponse</returns>
        public GetPrepperTemplateListResponse PostGetPrepperTemplateList(string contentType, GetPrepperTemplateListRequest getPrepperTemplateListRequest = default(GetPrepperTemplateListRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<GetPrepperTemplateListResponse> localVarResponse = PostGetPrepperTemplateListWithHttpInfo(contentType, getPrepperTemplateListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Prepper Template List #### Used to get a list of document templates.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateListRequest">##### Get Prepper Template List Request Model (optional)</param>
        /// <returns>ApiResponse of GetPrepperTemplateListResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<GetPrepperTemplateListResponse> PostGetPrepperTemplateListWithHttpInfo(string contentType, GetPrepperTemplateListRequest getPrepperTemplateListRequest = default(GetPrepperTemplateListRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostGetPrepperTemplateList");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = getPrepperTemplateListRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetPrepperTemplateListResponse>("/GetPrepperTemplateList", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGetPrepperTemplateList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Prepper Template List #### Used to get a list of document templates.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateListRequest">##### Get Prepper Template List Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPrepperTemplateListResponse</returns>
        public async System.Threading.Tasks.Task<GetPrepperTemplateListResponse> PostGetPrepperTemplateListAsync(string contentType, GetPrepperTemplateListRequest getPrepperTemplateListRequest = default(GetPrepperTemplateListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<GetPrepperTemplateListResponse> localVarResponse = await PostGetPrepperTemplateListWithHttpInfoAsync(contentType, getPrepperTemplateListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Prepper Template List #### Used to get a list of document templates.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateListRequest">##### Get Prepper Template List Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPrepperTemplateListResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<GetPrepperTemplateListResponse>> PostGetPrepperTemplateListWithHttpInfoAsync(string contentType, GetPrepperTemplateListRequest getPrepperTemplateListRequest = default(GetPrepperTemplateListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostGetPrepperTemplateList");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = getPrepperTemplateListRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetPrepperTemplateListResponse>("/GetPrepperTemplateList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGetPrepperTemplateList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
