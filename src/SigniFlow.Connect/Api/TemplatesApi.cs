/*
 * WorkFlow API
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using SigniFlow.Connect.Client;
using SigniFlow.Connect.Model;

namespace SigniFlow.Connect.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Apply a Prepper template
        /// </summary>
        /// <remarks>
        /// #### The API call used when applying a template to a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="applyPrepperTemplateRequest">##### Apply A Prepper Template Request Model. (optional)</param>
        /// <returns>ApplyPrepperTemplateResponse</returns>
        ApplyPrepperTemplateResponse PostApplyPrepperTemplate (string contentType, ApplyPrepperTemplateRequest applyPrepperTemplateRequest = default(ApplyPrepperTemplateRequest));

        /// <summary>
        /// Apply a Prepper template
        /// </summary>
        /// <remarks>
        /// #### The API call used when applying a template to a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="applyPrepperTemplateRequest">##### Apply A Prepper Template Request Model. (optional)</param>
        /// <returns>ApiResponse of ApplyPrepperTemplateResponse</returns>
        ApiResponse<ApplyPrepperTemplateResponse> PostApplyPrepperTemplateWithHttpInfo (string contentType, ApplyPrepperTemplateRequest applyPrepperTemplateRequest = default(ApplyPrepperTemplateRequest));
        /// <summary>
        /// Get Document Tag Field Box Position
        /// </summary>
        /// <remarks>
        /// #### Used to get the tag field box position on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldBoxPositionRequest">##### Get Document Tag Field Box Position Request Model (optional)</param>
        /// <returns>GetDocumentTagFieldBoxPositionResponse</returns>
        GetDocumentTagFieldBoxPositionResponse PostGetDocumentTagFieldBoxPosition (string contentType, GetDocumentTagFieldBoxPositionRequest getDocumentTagFieldBoxPositionRequest = default(GetDocumentTagFieldBoxPositionRequest));

        /// <summary>
        /// Get Document Tag Field Box Position
        /// </summary>
        /// <remarks>
        /// #### Used to get the tag field box position on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldBoxPositionRequest">##### Get Document Tag Field Box Position Request Model (optional)</param>
        /// <returns>ApiResponse of GetDocumentTagFieldBoxPositionResponse</returns>
        ApiResponse<GetDocumentTagFieldBoxPositionResponse> PostGetDocumentTagFieldBoxPositionWithHttpInfo (string contentType, GetDocumentTagFieldBoxPositionRequest getDocumentTagFieldBoxPositionRequest = default(GetDocumentTagFieldBoxPositionRequest));
        /// <summary>
        /// Get Document Tag Field Position
        /// </summary>
        /// <remarks>
        /// #### Used to get the tag position on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldPositionRequest">##### Get Document Tag Field Position Request Model (optional)</param>
        /// <returns>GetDocumentTagFieldPositionResponse</returns>
        GetDocumentTagFieldPositionResponse PostGetDocumentTagFieldPosition (string contentType, GetDocumentTagFieldPositionRequest getDocumentTagFieldPositionRequest = default(GetDocumentTagFieldPositionRequest));

        /// <summary>
        /// Get Document Tag Field Position
        /// </summary>
        /// <remarks>
        /// #### Used to get the tag position on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldPositionRequest">##### Get Document Tag Field Position Request Model (optional)</param>
        /// <returns>ApiResponse of GetDocumentTagFieldPositionResponse</returns>
        ApiResponse<GetDocumentTagFieldPositionResponse> PostGetDocumentTagFieldPositionWithHttpInfo (string contentType, GetDocumentTagFieldPositionRequest getDocumentTagFieldPositionRequest = default(GetDocumentTagFieldPositionRequest));
        /// <summary>
        /// Get Prepper Template
        /// </summary>
        /// <remarks>
        /// #### Used to get a document template.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **FieldTypeField** | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateRequest">##### Get Prepper Template Request Model (optional)</param>
        /// <returns>GetPrepperTemplateResponse</returns>
        GetPrepperTemplateResponse PostGetPrepperTemplate (string contentType, GetPrepperTemplateRequest getPrepperTemplateRequest = default(GetPrepperTemplateRequest));

        /// <summary>
        /// Get Prepper Template
        /// </summary>
        /// <remarks>
        /// #### Used to get a document template.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **FieldTypeField** | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateRequest">##### Get Prepper Template Request Model (optional)</param>
        /// <returns>ApiResponse of GetPrepperTemplateResponse</returns>
        ApiResponse<GetPrepperTemplateResponse> PostGetPrepperTemplateWithHttpInfo (string contentType, GetPrepperTemplateRequest getPrepperTemplateRequest = default(GetPrepperTemplateRequest));
        /// <summary>
        /// Get Prepper Template List
        /// </summary>
        /// <remarks>
        /// #### Used to get a list of document templates.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateListRequest">##### Get Prepper Template List Request Model (optional)</param>
        /// <returns>GetPrepperTemplateListResponse</returns>
        GetPrepperTemplateListResponse PostGetPrepperTemplateList (string contentType, GetPrepperTemplateListRequest getPrepperTemplateListRequest = default(GetPrepperTemplateListRequest));

        /// <summary>
        /// Get Prepper Template List
        /// </summary>
        /// <remarks>
        /// #### Used to get a list of document templates.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateListRequest">##### Get Prepper Template List Request Model (optional)</param>
        /// <returns>ApiResponse of GetPrepperTemplateListResponse</returns>
        ApiResponse<GetPrepperTemplateListResponse> PostGetPrepperTemplateListWithHttpInfo (string contentType, GetPrepperTemplateListRequest getPrepperTemplateListRequest = default(GetPrepperTemplateListRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Apply a Prepper template
        /// </summary>
        /// <remarks>
        /// #### The API call used when applying a template to a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="applyPrepperTemplateRequest">##### Apply A Prepper Template Request Model. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApplyPrepperTemplateResponse</returns>
        System.Threading.Tasks.Task<ApplyPrepperTemplateResponse> PostApplyPrepperTemplateAsync (string contentType, ApplyPrepperTemplateRequest applyPrepperTemplateRequest = default(ApplyPrepperTemplateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Apply a Prepper template
        /// </summary>
        /// <remarks>
        /// #### The API call used when applying a template to a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="applyPrepperTemplateRequest">##### Apply A Prepper Template Request Model. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApplyPrepperTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplyPrepperTemplateResponse>> PostApplyPrepperTemplateWithHttpInfoAsync (string contentType, ApplyPrepperTemplateRequest applyPrepperTemplateRequest = default(ApplyPrepperTemplateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Document Tag Field Box Position
        /// </summary>
        /// <remarks>
        /// #### Used to get the tag field box position on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldBoxPositionRequest">##### Get Document Tag Field Box Position Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetDocumentTagFieldBoxPositionResponse</returns>
        System.Threading.Tasks.Task<GetDocumentTagFieldBoxPositionResponse> PostGetDocumentTagFieldBoxPositionAsync (string contentType, GetDocumentTagFieldBoxPositionRequest getDocumentTagFieldBoxPositionRequest = default(GetDocumentTagFieldBoxPositionRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Document Tag Field Box Position
        /// </summary>
        /// <remarks>
        /// #### Used to get the tag field box position on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldBoxPositionRequest">##### Get Document Tag Field Box Position Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetDocumentTagFieldBoxPositionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocumentTagFieldBoxPositionResponse>> PostGetDocumentTagFieldBoxPositionWithHttpInfoAsync (string contentType, GetDocumentTagFieldBoxPositionRequest getDocumentTagFieldBoxPositionRequest = default(GetDocumentTagFieldBoxPositionRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Document Tag Field Position
        /// </summary>
        /// <remarks>
        /// #### Used to get the tag position on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldPositionRequest">##### Get Document Tag Field Position Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetDocumentTagFieldPositionResponse</returns>
        System.Threading.Tasks.Task<GetDocumentTagFieldPositionResponse> PostGetDocumentTagFieldPositionAsync (string contentType, GetDocumentTagFieldPositionRequest getDocumentTagFieldPositionRequest = default(GetDocumentTagFieldPositionRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Document Tag Field Position
        /// </summary>
        /// <remarks>
        /// #### Used to get the tag position on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldPositionRequest">##### Get Document Tag Field Position Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetDocumentTagFieldPositionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocumentTagFieldPositionResponse>> PostGetDocumentTagFieldPositionWithHttpInfoAsync (string contentType, GetDocumentTagFieldPositionRequest getDocumentTagFieldPositionRequest = default(GetDocumentTagFieldPositionRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Prepper Template
        /// </summary>
        /// <remarks>
        /// #### Used to get a document template.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **FieldTypeField** | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateRequest">##### Get Prepper Template Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetPrepperTemplateResponse</returns>
        System.Threading.Tasks.Task<GetPrepperTemplateResponse> PostGetPrepperTemplateAsync (string contentType, GetPrepperTemplateRequest getPrepperTemplateRequest = default(GetPrepperTemplateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Prepper Template
        /// </summary>
        /// <remarks>
        /// #### Used to get a document template.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **FieldTypeField** | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateRequest">##### Get Prepper Template Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetPrepperTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPrepperTemplateResponse>> PostGetPrepperTemplateWithHttpInfoAsync (string contentType, GetPrepperTemplateRequest getPrepperTemplateRequest = default(GetPrepperTemplateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Prepper Template List
        /// </summary>
        /// <remarks>
        /// #### Used to get a list of document templates.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateListRequest">##### Get Prepper Template List Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetPrepperTemplateListResponse</returns>
        System.Threading.Tasks.Task<GetPrepperTemplateListResponse> PostGetPrepperTemplateListAsync (string contentType, GetPrepperTemplateListRequest getPrepperTemplateListRequest = default(GetPrepperTemplateListRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Prepper Template List
        /// </summary>
        /// <remarks>
        /// #### Used to get a list of document templates.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateListRequest">##### Get Prepper Template List Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetPrepperTemplateListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPrepperTemplateListResponse>> PostGetPrepperTemplateListWithHttpInfoAsync (string contentType, GetPrepperTemplateListRequest getPrepperTemplateListRequest = default(GetPrepperTemplateListRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplatesApi : ITemplatesApi
    {
        private SigniFlow.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesApi(String basePath)
        {
            this.Configuration = new SigniFlow.Connect.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class
        /// </summary>
        /// <returns></returns>
        public TemplatesApi()
        {
            this.Configuration = SigniFlow.Connect.Client.Configuration.Default;

            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplatesApi(SigniFlow.Connect.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SigniFlow.Connect.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SigniFlow.Connect.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SigniFlow.Connect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Apply a Prepper template #### The API call used when applying a template to a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="applyPrepperTemplateRequest">##### Apply A Prepper Template Request Model. (optional)</param>
        /// <returns>ApplyPrepperTemplateResponse</returns>
        public ApplyPrepperTemplateResponse PostApplyPrepperTemplate (string contentType, ApplyPrepperTemplateRequest applyPrepperTemplateRequest = default(ApplyPrepperTemplateRequest))
        {
             ApiResponse<ApplyPrepperTemplateResponse> localVarResponse = PostApplyPrepperTemplateWithHttpInfo(contentType, applyPrepperTemplateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Apply a Prepper template #### The API call used when applying a template to a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="applyPrepperTemplateRequest">##### Apply A Prepper Template Request Model. (optional)</param>
        /// <returns>ApiResponse of ApplyPrepperTemplateResponse</returns>
        public ApiResponse<ApplyPrepperTemplateResponse> PostApplyPrepperTemplateWithHttpInfo (string contentType, ApplyPrepperTemplateRequest applyPrepperTemplateRequest = default(ApplyPrepperTemplateRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostApplyPrepperTemplate");

            var localVarPath = "/ApplyPrepperTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (applyPrepperTemplateRequest != null && applyPrepperTemplateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(applyPrepperTemplateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = applyPrepperTemplateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostApplyPrepperTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplyPrepperTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplyPrepperTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplyPrepperTemplateResponse)));
        }

        /// <summary>
        /// Apply a Prepper template #### The API call used when applying a template to a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="applyPrepperTemplateRequest">##### Apply A Prepper Template Request Model. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApplyPrepperTemplateResponse</returns>
        public async System.Threading.Tasks.Task<ApplyPrepperTemplateResponse> PostApplyPrepperTemplateAsync (string contentType, ApplyPrepperTemplateRequest applyPrepperTemplateRequest = default(ApplyPrepperTemplateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApplyPrepperTemplateResponse> localVarResponse = await PostApplyPrepperTemplateWithHttpInfoAsync(contentType, applyPrepperTemplateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Apply a Prepper template #### The API call used when applying a template to a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="applyPrepperTemplateRequest">##### Apply A Prepper Template Request Model. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApplyPrepperTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplyPrepperTemplateResponse>> PostApplyPrepperTemplateWithHttpInfoAsync (string contentType, ApplyPrepperTemplateRequest applyPrepperTemplateRequest = default(ApplyPrepperTemplateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostApplyPrepperTemplate");

            var localVarPath = "/ApplyPrepperTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (applyPrepperTemplateRequest != null && applyPrepperTemplateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(applyPrepperTemplateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = applyPrepperTemplateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostApplyPrepperTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplyPrepperTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplyPrepperTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplyPrepperTemplateResponse)));
        }

        /// <summary>
        /// Get Document Tag Field Box Position #### Used to get the tag field box position on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldBoxPositionRequest">##### Get Document Tag Field Box Position Request Model (optional)</param>
        /// <returns>GetDocumentTagFieldBoxPositionResponse</returns>
        public GetDocumentTagFieldBoxPositionResponse PostGetDocumentTagFieldBoxPosition (string contentType, GetDocumentTagFieldBoxPositionRequest getDocumentTagFieldBoxPositionRequest = default(GetDocumentTagFieldBoxPositionRequest))
        {
             ApiResponse<GetDocumentTagFieldBoxPositionResponse> localVarResponse = PostGetDocumentTagFieldBoxPositionWithHttpInfo(contentType, getDocumentTagFieldBoxPositionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document Tag Field Box Position #### Used to get the tag field box position on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldBoxPositionRequest">##### Get Document Tag Field Box Position Request Model (optional)</param>
        /// <returns>ApiResponse of GetDocumentTagFieldBoxPositionResponse</returns>
        public ApiResponse<GetDocumentTagFieldBoxPositionResponse> PostGetDocumentTagFieldBoxPositionWithHttpInfo (string contentType, GetDocumentTagFieldBoxPositionRequest getDocumentTagFieldBoxPositionRequest = default(GetDocumentTagFieldBoxPositionRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostGetDocumentTagFieldBoxPosition");

            var localVarPath = "/GetDocumentTagFieldBoxPosition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (getDocumentTagFieldBoxPositionRequest != null && getDocumentTagFieldBoxPositionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getDocumentTagFieldBoxPositionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getDocumentTagFieldBoxPositionRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGetDocumentTagFieldBoxPosition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocumentTagFieldBoxPositionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDocumentTagFieldBoxPositionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocumentTagFieldBoxPositionResponse)));
        }

        /// <summary>
        /// Get Document Tag Field Box Position #### Used to get the tag field box position on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldBoxPositionRequest">##### Get Document Tag Field Box Position Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetDocumentTagFieldBoxPositionResponse</returns>
        public async System.Threading.Tasks.Task<GetDocumentTagFieldBoxPositionResponse> PostGetDocumentTagFieldBoxPositionAsync (string contentType, GetDocumentTagFieldBoxPositionRequest getDocumentTagFieldBoxPositionRequest = default(GetDocumentTagFieldBoxPositionRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetDocumentTagFieldBoxPositionResponse> localVarResponse = await PostGetDocumentTagFieldBoxPositionWithHttpInfoAsync(contentType, getDocumentTagFieldBoxPositionRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Document Tag Field Box Position #### Used to get the tag field box position on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldBoxPositionRequest">##### Get Document Tag Field Box Position Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetDocumentTagFieldBoxPositionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDocumentTagFieldBoxPositionResponse>> PostGetDocumentTagFieldBoxPositionWithHttpInfoAsync (string contentType, GetDocumentTagFieldBoxPositionRequest getDocumentTagFieldBoxPositionRequest = default(GetDocumentTagFieldBoxPositionRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostGetDocumentTagFieldBoxPosition");

            var localVarPath = "/GetDocumentTagFieldBoxPosition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (getDocumentTagFieldBoxPositionRequest != null && getDocumentTagFieldBoxPositionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getDocumentTagFieldBoxPositionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getDocumentTagFieldBoxPositionRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGetDocumentTagFieldBoxPosition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocumentTagFieldBoxPositionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDocumentTagFieldBoxPositionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocumentTagFieldBoxPositionResponse)));
        }

        /// <summary>
        /// Get Document Tag Field Position #### Used to get the tag position on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldPositionRequest">##### Get Document Tag Field Position Request Model (optional)</param>
        /// <returns>GetDocumentTagFieldPositionResponse</returns>
        public GetDocumentTagFieldPositionResponse PostGetDocumentTagFieldPosition (string contentType, GetDocumentTagFieldPositionRequest getDocumentTagFieldPositionRequest = default(GetDocumentTagFieldPositionRequest))
        {
             ApiResponse<GetDocumentTagFieldPositionResponse> localVarResponse = PostGetDocumentTagFieldPositionWithHttpInfo(contentType, getDocumentTagFieldPositionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document Tag Field Position #### Used to get the tag position on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldPositionRequest">##### Get Document Tag Field Position Request Model (optional)</param>
        /// <returns>ApiResponse of GetDocumentTagFieldPositionResponse</returns>
        public ApiResponse<GetDocumentTagFieldPositionResponse> PostGetDocumentTagFieldPositionWithHttpInfo (string contentType, GetDocumentTagFieldPositionRequest getDocumentTagFieldPositionRequest = default(GetDocumentTagFieldPositionRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostGetDocumentTagFieldPosition");

            var localVarPath = "/GetDocumentTagFieldPosition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (getDocumentTagFieldPositionRequest != null && getDocumentTagFieldPositionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getDocumentTagFieldPositionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getDocumentTagFieldPositionRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGetDocumentTagFieldPosition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocumentTagFieldPositionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDocumentTagFieldPositionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocumentTagFieldPositionResponse)));
        }

        /// <summary>
        /// Get Document Tag Field Position #### Used to get the tag position on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldPositionRequest">##### Get Document Tag Field Position Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetDocumentTagFieldPositionResponse</returns>
        public async System.Threading.Tasks.Task<GetDocumentTagFieldPositionResponse> PostGetDocumentTagFieldPositionAsync (string contentType, GetDocumentTagFieldPositionRequest getDocumentTagFieldPositionRequest = default(GetDocumentTagFieldPositionRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetDocumentTagFieldPositionResponse> localVarResponse = await PostGetDocumentTagFieldPositionWithHttpInfoAsync(contentType, getDocumentTagFieldPositionRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Document Tag Field Position #### Used to get the tag position on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentTagFieldPositionRequest">##### Get Document Tag Field Position Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetDocumentTagFieldPositionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDocumentTagFieldPositionResponse>> PostGetDocumentTagFieldPositionWithHttpInfoAsync (string contentType, GetDocumentTagFieldPositionRequest getDocumentTagFieldPositionRequest = default(GetDocumentTagFieldPositionRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostGetDocumentTagFieldPosition");

            var localVarPath = "/GetDocumentTagFieldPosition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (getDocumentTagFieldPositionRequest != null && getDocumentTagFieldPositionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getDocumentTagFieldPositionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getDocumentTagFieldPositionRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGetDocumentTagFieldPosition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocumentTagFieldPositionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDocumentTagFieldPositionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocumentTagFieldPositionResponse)));
        }

        /// <summary>
        /// Get Prepper Template #### Used to get a document template.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **FieldTypeField** | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateRequest">##### Get Prepper Template Request Model (optional)</param>
        /// <returns>GetPrepperTemplateResponse</returns>
        public GetPrepperTemplateResponse PostGetPrepperTemplate (string contentType, GetPrepperTemplateRequest getPrepperTemplateRequest = default(GetPrepperTemplateRequest))
        {
             ApiResponse<GetPrepperTemplateResponse> localVarResponse = PostGetPrepperTemplateWithHttpInfo(contentType, getPrepperTemplateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Prepper Template #### Used to get a document template.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **FieldTypeField** | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateRequest">##### Get Prepper Template Request Model (optional)</param>
        /// <returns>ApiResponse of GetPrepperTemplateResponse</returns>
        public ApiResponse<GetPrepperTemplateResponse> PostGetPrepperTemplateWithHttpInfo (string contentType, GetPrepperTemplateRequest getPrepperTemplateRequest = default(GetPrepperTemplateRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostGetPrepperTemplate");

            var localVarPath = "/GetPrepperTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (getPrepperTemplateRequest != null && getPrepperTemplateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getPrepperTemplateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getPrepperTemplateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGetPrepperTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPrepperTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetPrepperTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPrepperTemplateResponse)));
        }

        /// <summary>
        /// Get Prepper Template #### Used to get a document template.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **FieldTypeField** | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateRequest">##### Get Prepper Template Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetPrepperTemplateResponse</returns>
        public async System.Threading.Tasks.Task<GetPrepperTemplateResponse> PostGetPrepperTemplateAsync (string contentType, GetPrepperTemplateRequest getPrepperTemplateRequest = default(GetPrepperTemplateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetPrepperTemplateResponse> localVarResponse = await PostGetPrepperTemplateWithHttpInfoAsync(contentType, getPrepperTemplateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Prepper Template #### Used to get a document template.  Enumerations used in this API Call include: | Enumeration    | Values          | | - -- -- -- -- -- -- - |:- -- -- -- -- -- -- --:| | **FieldTypeField** | 0  &#x3D; Signature, 1  &#x3D; NameText, 2  &#x3D; DateText, 3  &#x3D; EmailAddressText, 4  &#x3D; ContactNumberText, 5  &#x3D; PlainText, 6  &#x3D; PlainTextOptional, 7  &#x3D; FaceToface, 8  &#x3D; Initial, 9  &#x3D; CheckBox, 10 &#x3D; F2FInitial, 11 &#x3D; AddressText, 12 &#x3D; CompanyNameText, 13 &#x3D; OptionalCurrencyText, 14 &#x3D; MandatoryCurrencyText, 15 &#x3D; ReadOnlyText, 16 &#x3D; NumericFieldOpt, 17 &#x3D; NumericFieldMand, 18 &#x3D; EmailInputOptional, 19 &#x3D; EmailInput |
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateRequest">##### Get Prepper Template Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetPrepperTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPrepperTemplateResponse>> PostGetPrepperTemplateWithHttpInfoAsync (string contentType, GetPrepperTemplateRequest getPrepperTemplateRequest = default(GetPrepperTemplateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostGetPrepperTemplate");

            var localVarPath = "/GetPrepperTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (getPrepperTemplateRequest != null && getPrepperTemplateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getPrepperTemplateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getPrepperTemplateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGetPrepperTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPrepperTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetPrepperTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPrepperTemplateResponse)));
        }

        /// <summary>
        /// Get Prepper Template List #### Used to get a list of document templates.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateListRequest">##### Get Prepper Template List Request Model (optional)</param>
        /// <returns>GetPrepperTemplateListResponse</returns>
        public GetPrepperTemplateListResponse PostGetPrepperTemplateList (string contentType, GetPrepperTemplateListRequest getPrepperTemplateListRequest = default(GetPrepperTemplateListRequest))
        {
             ApiResponse<GetPrepperTemplateListResponse> localVarResponse = PostGetPrepperTemplateListWithHttpInfo(contentType, getPrepperTemplateListRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Prepper Template List #### Used to get a list of document templates.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateListRequest">##### Get Prepper Template List Request Model (optional)</param>
        /// <returns>ApiResponse of GetPrepperTemplateListResponse</returns>
        public ApiResponse<GetPrepperTemplateListResponse> PostGetPrepperTemplateListWithHttpInfo (string contentType, GetPrepperTemplateListRequest getPrepperTemplateListRequest = default(GetPrepperTemplateListRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostGetPrepperTemplateList");

            var localVarPath = "/GetPrepperTemplateList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (getPrepperTemplateListRequest != null && getPrepperTemplateListRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getPrepperTemplateListRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getPrepperTemplateListRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGetPrepperTemplateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPrepperTemplateListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetPrepperTemplateListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPrepperTemplateListResponse)));
        }

        /// <summary>
        /// Get Prepper Template List #### Used to get a list of document templates.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateListRequest">##### Get Prepper Template List Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetPrepperTemplateListResponse</returns>
        public async System.Threading.Tasks.Task<GetPrepperTemplateListResponse> PostGetPrepperTemplateListAsync (string contentType, GetPrepperTemplateListRequest getPrepperTemplateListRequest = default(GetPrepperTemplateListRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetPrepperTemplateListResponse> localVarResponse = await PostGetPrepperTemplateListWithHttpInfoAsync(contentType, getPrepperTemplateListRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Prepper Template List #### Used to get a list of document templates.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getPrepperTemplateListRequest">##### Get Prepper Template List Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetPrepperTemplateListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPrepperTemplateListResponse>> PostGetPrepperTemplateListWithHttpInfoAsync (string contentType, GetPrepperTemplateListRequest getPrepperTemplateListRequest = default(GetPrepperTemplateListRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TemplatesApi->PostGetPrepperTemplateList");

            var localVarPath = "/GetPrepperTemplateList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (getPrepperTemplateListRequest != null && getPrepperTemplateListRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getPrepperTemplateListRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getPrepperTemplateListRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGetPrepperTemplateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPrepperTemplateListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetPrepperTemplateListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPrepperTemplateListResponse)));
        }

    }
}
