/*
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SigniFlow.Connect.Client;
using SigniFlow.Connect.Model;

namespace SigniFlow.Connect.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortfoliosApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to create a portfolio to group documents.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createPortfolioRequest">##### Create Portfolio Request Model (optional)</param>
        /// <returns>CreatePortfolioResponse</returns>
        CreatePortfolioResponse PostCreatePortfolio(string contentType, CreatePortfolioRequest createPortfolioRequest = default(CreatePortfolioRequest));

        /// <summary>
        /// Create Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to create a portfolio to group documents.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createPortfolioRequest">##### Create Portfolio Request Model (optional)</param>
        /// <returns>ApiResponse of CreatePortfolioResponse</returns>
        ApiResponse<CreatePortfolioResponse> PostCreatePortfolioWithHttpInfo(string contentType, CreatePortfolioRequest createPortfolioRequest = default(CreatePortfolioRequest));
        /// <summary>
        /// Download Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to return a string that is then used to download a portfolio.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="downloadPortfolioRequest">##### Download Portfolio Request Model (optional)</param>
        /// <returns>DownloadPortfolioResponse</returns>
        DownloadPortfolioResponse PostDownloadPortfolio(string contentType, DownloadPortfolioRequest downloadPortfolioRequest = default(DownloadPortfolioRequest));

        /// <summary>
        /// Download Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to return a string that is then used to download a portfolio.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="downloadPortfolioRequest">##### Download Portfolio Request Model (optional)</param>
        /// <returns>ApiResponse of DownloadPortfolioResponse</returns>
        ApiResponse<DownloadPortfolioResponse> PostDownloadPortfolioWithHttpInfo(string contentType, DownloadPortfolioRequest downloadPortfolioRequest = default(DownloadPortfolioRequest));
        /// <summary>
        /// Link To Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to get the url link to a portfolio.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="linkToPortfolioRequest">##### Link To Portfolio Request Model (optional)</param>
        /// <returns>LinkToPortfolioResponse</returns>
        LinkToPortfolioResponse PostLinkToPortfolio(string contentType, LinkToPortfolioRequest linkToPortfolioRequest = default(LinkToPortfolioRequest));

        /// <summary>
        /// Link To Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to get the url link to a portfolio.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="linkToPortfolioRequest">##### Link To Portfolio Request Model (optional)</param>
        /// <returns>ApiResponse of LinkToPortfolioResponse</returns>
        ApiResponse<LinkToPortfolioResponse> PostLinkToPortfolioWithHttpInfo(string contentType, LinkToPortfolioRequest linkToPortfolioRequest = default(LinkToPortfolioRequest));
        /// <summary>
        /// Set Document Order
        /// </summary>
        /// <remarks>
        /// #### Used to set the order of documents that needs to be signed.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="setDocumentOrderRequest">##### Set Document Order Request Model (optional)</param>
        /// <returns>SetDocumentOrderResponse</returns>
        SetDocumentOrderResponse PostSetDocumentOrder(string contentType, SetDocumentOrderRequest setDocumentOrderRequest = default(SetDocumentOrderRequest));

        /// <summary>
        /// Set Document Order
        /// </summary>
        /// <remarks>
        /// #### Used to set the order of documents that needs to be signed.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="setDocumentOrderRequest">##### Set Document Order Request Model (optional)</param>
        /// <returns>ApiResponse of SetDocumentOrderResponse</returns>
        ApiResponse<SetDocumentOrderResponse> PostSetDocumentOrderWithHttpInfo(string contentType, SetDocumentOrderRequest setDocumentOrderRequest = default(SetDocumentOrderRequest));
        /// <summary>
        /// Share Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used when a user wants to share a portfolio with someone else.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioRequest">##### Share Portfolio Request Model (optional)</param>
        /// <returns>SharePortfolioResponse</returns>
        SharePortfolioResponse PostSharePortfolio(string contentType, SharePortfolioRequest sharePortfolioRequest = default(SharePortfolioRequest));

        /// <summary>
        /// Share Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used when a user wants to share a portfolio with someone else.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioRequest">##### Share Portfolio Request Model (optional)</param>
        /// <returns>ApiResponse of SharePortfolioResponse</returns>
        ApiResponse<SharePortfolioResponse> PostSharePortfolioWithHttpInfo(string contentType, SharePortfolioRequest sharePortfolioRequest = default(SharePortfolioRequest));
        /// <summary>
        /// Share Portfolio No Email
        /// </summary>
        /// <remarks>
        /// #### Used when a user wants to share a portfolio without sending out an email.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioNoEmailRequest">##### Share Portfolio No Email Request Model (optional)</param>
        /// <returns>SharePortfolioNoEmailResponse</returns>
        SharePortfolioNoEmailResponse PostSharePortfolioNoEmail(string contentType, SharePortfolioNoEmailRequest sharePortfolioNoEmailRequest = default(SharePortfolioNoEmailRequest));

        /// <summary>
        /// Share Portfolio No Email
        /// </summary>
        /// <remarks>
        /// #### Used when a user wants to share a portfolio without sending out an email.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioNoEmailRequest">##### Share Portfolio No Email Request Model (optional)</param>
        /// <returns>ApiResponse of SharePortfolioNoEmailResponse</returns>
        ApiResponse<SharePortfolioNoEmailResponse> PostSharePortfolioNoEmailWithHttpInfo(string contentType, SharePortfolioNoEmailRequest sharePortfolioNoEmailRequest = default(SharePortfolioNoEmailRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortfoliosApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to create a portfolio to group documents.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createPortfolioRequest">##### Create Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePortfolioResponse</returns>
        System.Threading.Tasks.Task<CreatePortfolioResponse> PostCreatePortfolioAsync(string contentType, CreatePortfolioRequest createPortfolioRequest = default(CreatePortfolioRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to create a portfolio to group documents.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createPortfolioRequest">##### Create Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePortfolioResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePortfolioResponse>> PostCreatePortfolioWithHttpInfoAsync(string contentType, CreatePortfolioRequest createPortfolioRequest = default(CreatePortfolioRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to return a string that is then used to download a portfolio.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="downloadPortfolioRequest">##### Download Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DownloadPortfolioResponse</returns>
        System.Threading.Tasks.Task<DownloadPortfolioResponse> PostDownloadPortfolioAsync(string contentType, DownloadPortfolioRequest downloadPortfolioRequest = default(DownloadPortfolioRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to return a string that is then used to download a portfolio.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="downloadPortfolioRequest">##### Download Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DownloadPortfolioResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DownloadPortfolioResponse>> PostDownloadPortfolioWithHttpInfoAsync(string contentType, DownloadPortfolioRequest downloadPortfolioRequest = default(DownloadPortfolioRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Link To Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to get the url link to a portfolio.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="linkToPortfolioRequest">##### Link To Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LinkToPortfolioResponse</returns>
        System.Threading.Tasks.Task<LinkToPortfolioResponse> PostLinkToPortfolioAsync(string contentType, LinkToPortfolioRequest linkToPortfolioRequest = default(LinkToPortfolioRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Link To Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to get the url link to a portfolio.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="linkToPortfolioRequest">##### Link To Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LinkToPortfolioResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkToPortfolioResponse>> PostLinkToPortfolioWithHttpInfoAsync(string contentType, LinkToPortfolioRequest linkToPortfolioRequest = default(LinkToPortfolioRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Document Order
        /// </summary>
        /// <remarks>
        /// #### Used to set the order of documents that needs to be signed.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="setDocumentOrderRequest">##### Set Document Order Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetDocumentOrderResponse</returns>
        System.Threading.Tasks.Task<SetDocumentOrderResponse> PostSetDocumentOrderAsync(string contentType, SetDocumentOrderRequest setDocumentOrderRequest = default(SetDocumentOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Document Order
        /// </summary>
        /// <remarks>
        /// #### Used to set the order of documents that needs to be signed.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="setDocumentOrderRequest">##### Set Document Order Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetDocumentOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetDocumentOrderResponse>> PostSetDocumentOrderWithHttpInfoAsync(string contentType, SetDocumentOrderRequest setDocumentOrderRequest = default(SetDocumentOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Share Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used when a user wants to share a portfolio with someone else.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioRequest">##### Share Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SharePortfolioResponse</returns>
        System.Threading.Tasks.Task<SharePortfolioResponse> PostSharePortfolioAsync(string contentType, SharePortfolioRequest sharePortfolioRequest = default(SharePortfolioRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Share Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used when a user wants to share a portfolio with someone else.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioRequest">##### Share Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SharePortfolioResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharePortfolioResponse>> PostSharePortfolioWithHttpInfoAsync(string contentType, SharePortfolioRequest sharePortfolioRequest = default(SharePortfolioRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Share Portfolio No Email
        /// </summary>
        /// <remarks>
        /// #### Used when a user wants to share a portfolio without sending out an email.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioNoEmailRequest">##### Share Portfolio No Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SharePortfolioNoEmailResponse</returns>
        System.Threading.Tasks.Task<SharePortfolioNoEmailResponse> PostSharePortfolioNoEmailAsync(string contentType, SharePortfolioNoEmailRequest sharePortfolioNoEmailRequest = default(SharePortfolioNoEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Share Portfolio No Email
        /// </summary>
        /// <remarks>
        /// #### Used when a user wants to share a portfolio without sending out an email.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioNoEmailRequest">##### Share Portfolio No Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SharePortfolioNoEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharePortfolioNoEmailResponse>> PostSharePortfolioNoEmailWithHttpInfoAsync(string contentType, SharePortfolioNoEmailRequest sharePortfolioNoEmailRequest = default(SharePortfolioNoEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortfoliosApi : IPortfoliosApiSync, IPortfoliosApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PortfoliosApi : IPortfoliosApi
    {
        private SigniFlow.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfoliosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PortfoliosApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfoliosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PortfoliosApi(String basePath)
        {
            this.Configuration = SigniFlow.Connect.Client.Configuration.MergeConfigurations(
                SigniFlow.Connect.Client.GlobalConfiguration.Instance,
                new SigniFlow.Connect.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SigniFlow.Connect.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SigniFlow.Connect.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfoliosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PortfoliosApi(SigniFlow.Connect.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SigniFlow.Connect.Client.Configuration.MergeConfigurations(
                SigniFlow.Connect.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SigniFlow.Connect.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SigniFlow.Connect.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfoliosApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PortfoliosApi(SigniFlow.Connect.Client.ISynchronousClient client, SigniFlow.Connect.Client.IAsynchronousClient asyncClient, SigniFlow.Connect.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SigniFlow.Connect.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SigniFlow.Connect.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SigniFlow.Connect.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SigniFlow.Connect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Portfolio #### Used to create a portfolio to group documents.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createPortfolioRequest">##### Create Portfolio Request Model (optional)</param>
        /// <returns>CreatePortfolioResponse</returns>
        public CreatePortfolioResponse PostCreatePortfolio(string contentType, CreatePortfolioRequest createPortfolioRequest = default(CreatePortfolioRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<CreatePortfolioResponse> localVarResponse = PostCreatePortfolioWithHttpInfo(contentType, createPortfolioRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Portfolio #### Used to create a portfolio to group documents.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createPortfolioRequest">##### Create Portfolio Request Model (optional)</param>
        /// <returns>ApiResponse of CreatePortfolioResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<CreatePortfolioResponse> PostCreatePortfolioWithHttpInfo(string contentType, CreatePortfolioRequest createPortfolioRequest = default(CreatePortfolioRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostCreatePortfolio");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = createPortfolioRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreatePortfolioResponse>("/CreatePortfolio", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCreatePortfolio", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Portfolio #### Used to create a portfolio to group documents.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createPortfolioRequest">##### Create Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePortfolioResponse</returns>
        public async System.Threading.Tasks.Task<CreatePortfolioResponse> PostCreatePortfolioAsync(string contentType, CreatePortfolioRequest createPortfolioRequest = default(CreatePortfolioRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<CreatePortfolioResponse> localVarResponse = await PostCreatePortfolioWithHttpInfoAsync(contentType, createPortfolioRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Portfolio #### Used to create a portfolio to group documents.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createPortfolioRequest">##### Create Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePortfolioResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<CreatePortfolioResponse>> PostCreatePortfolioWithHttpInfoAsync(string contentType, CreatePortfolioRequest createPortfolioRequest = default(CreatePortfolioRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostCreatePortfolio");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = createPortfolioRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatePortfolioResponse>("/CreatePortfolio", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCreatePortfolio", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Portfolio #### Used to return a string that is then used to download a portfolio.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="downloadPortfolioRequest">##### Download Portfolio Request Model (optional)</param>
        /// <returns>DownloadPortfolioResponse</returns>
        public DownloadPortfolioResponse PostDownloadPortfolio(string contentType, DownloadPortfolioRequest downloadPortfolioRequest = default(DownloadPortfolioRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<DownloadPortfolioResponse> localVarResponse = PostDownloadPortfolioWithHttpInfo(contentType, downloadPortfolioRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download Portfolio #### Used to return a string that is then used to download a portfolio.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="downloadPortfolioRequest">##### Download Portfolio Request Model (optional)</param>
        /// <returns>ApiResponse of DownloadPortfolioResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<DownloadPortfolioResponse> PostDownloadPortfolioWithHttpInfo(string contentType, DownloadPortfolioRequest downloadPortfolioRequest = default(DownloadPortfolioRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostDownloadPortfolio");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = downloadPortfolioRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DownloadPortfolioResponse>("/DownloadPortfolio", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDownloadPortfolio", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Portfolio #### Used to return a string that is then used to download a portfolio.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="downloadPortfolioRequest">##### Download Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DownloadPortfolioResponse</returns>
        public async System.Threading.Tasks.Task<DownloadPortfolioResponse> PostDownloadPortfolioAsync(string contentType, DownloadPortfolioRequest downloadPortfolioRequest = default(DownloadPortfolioRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<DownloadPortfolioResponse> localVarResponse = await PostDownloadPortfolioWithHttpInfoAsync(contentType, downloadPortfolioRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download Portfolio #### Used to return a string that is then used to download a portfolio.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="downloadPortfolioRequest">##### Download Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DownloadPortfolioResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<DownloadPortfolioResponse>> PostDownloadPortfolioWithHttpInfoAsync(string contentType, DownloadPortfolioRequest downloadPortfolioRequest = default(DownloadPortfolioRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostDownloadPortfolio");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = downloadPortfolioRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DownloadPortfolioResponse>("/DownloadPortfolio", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDownloadPortfolio", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Link To Portfolio #### Used to get the url link to a portfolio.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="linkToPortfolioRequest">##### Link To Portfolio Request Model (optional)</param>
        /// <returns>LinkToPortfolioResponse</returns>
        public LinkToPortfolioResponse PostLinkToPortfolio(string contentType, LinkToPortfolioRequest linkToPortfolioRequest = default(LinkToPortfolioRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<LinkToPortfolioResponse> localVarResponse = PostLinkToPortfolioWithHttpInfo(contentType, linkToPortfolioRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Link To Portfolio #### Used to get the url link to a portfolio.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="linkToPortfolioRequest">##### Link To Portfolio Request Model (optional)</param>
        /// <returns>ApiResponse of LinkToPortfolioResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<LinkToPortfolioResponse> PostLinkToPortfolioWithHttpInfo(string contentType, LinkToPortfolioRequest linkToPortfolioRequest = default(LinkToPortfolioRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostLinkToPortfolio");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = linkToPortfolioRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<LinkToPortfolioResponse>("/LinkToPortfolio", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostLinkToPortfolio", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Link To Portfolio #### Used to get the url link to a portfolio.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="linkToPortfolioRequest">##### Link To Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LinkToPortfolioResponse</returns>
        public async System.Threading.Tasks.Task<LinkToPortfolioResponse> PostLinkToPortfolioAsync(string contentType, LinkToPortfolioRequest linkToPortfolioRequest = default(LinkToPortfolioRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<LinkToPortfolioResponse> localVarResponse = await PostLinkToPortfolioWithHttpInfoAsync(contentType, linkToPortfolioRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Link To Portfolio #### Used to get the url link to a portfolio.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="linkToPortfolioRequest">##### Link To Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LinkToPortfolioResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<LinkToPortfolioResponse>> PostLinkToPortfolioWithHttpInfoAsync(string contentType, LinkToPortfolioRequest linkToPortfolioRequest = default(LinkToPortfolioRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostLinkToPortfolio");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = linkToPortfolioRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<LinkToPortfolioResponse>("/LinkToPortfolio", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostLinkToPortfolio", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Document Order #### Used to set the order of documents that needs to be signed.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="setDocumentOrderRequest">##### Set Document Order Request Model (optional)</param>
        /// <returns>SetDocumentOrderResponse</returns>
        public SetDocumentOrderResponse PostSetDocumentOrder(string contentType, SetDocumentOrderRequest setDocumentOrderRequest = default(SetDocumentOrderRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<SetDocumentOrderResponse> localVarResponse = PostSetDocumentOrderWithHttpInfo(contentType, setDocumentOrderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Document Order #### Used to set the order of documents that needs to be signed.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="setDocumentOrderRequest">##### Set Document Order Request Model (optional)</param>
        /// <returns>ApiResponse of SetDocumentOrderResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<SetDocumentOrderResponse> PostSetDocumentOrderWithHttpInfo(string contentType, SetDocumentOrderRequest setDocumentOrderRequest = default(SetDocumentOrderRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostSetDocumentOrder");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = setDocumentOrderRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SetDocumentOrderResponse>("/SetDocumentOrder", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSetDocumentOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Document Order #### Used to set the order of documents that needs to be signed.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="setDocumentOrderRequest">##### Set Document Order Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetDocumentOrderResponse</returns>
        public async System.Threading.Tasks.Task<SetDocumentOrderResponse> PostSetDocumentOrderAsync(string contentType, SetDocumentOrderRequest setDocumentOrderRequest = default(SetDocumentOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<SetDocumentOrderResponse> localVarResponse = await PostSetDocumentOrderWithHttpInfoAsync(contentType, setDocumentOrderRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Document Order #### Used to set the order of documents that needs to be signed.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="setDocumentOrderRequest">##### Set Document Order Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetDocumentOrderResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<SetDocumentOrderResponse>> PostSetDocumentOrderWithHttpInfoAsync(string contentType, SetDocumentOrderRequest setDocumentOrderRequest = default(SetDocumentOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostSetDocumentOrder");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = setDocumentOrderRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SetDocumentOrderResponse>("/SetDocumentOrder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSetDocumentOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Share Portfolio #### Used when a user wants to share a portfolio with someone else.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioRequest">##### Share Portfolio Request Model (optional)</param>
        /// <returns>SharePortfolioResponse</returns>
        public SharePortfolioResponse PostSharePortfolio(string contentType, SharePortfolioRequest sharePortfolioRequest = default(SharePortfolioRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<SharePortfolioResponse> localVarResponse = PostSharePortfolioWithHttpInfo(contentType, sharePortfolioRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Share Portfolio #### Used when a user wants to share a portfolio with someone else.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioRequest">##### Share Portfolio Request Model (optional)</param>
        /// <returns>ApiResponse of SharePortfolioResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<SharePortfolioResponse> PostSharePortfolioWithHttpInfo(string contentType, SharePortfolioRequest sharePortfolioRequest = default(SharePortfolioRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostSharePortfolio");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = sharePortfolioRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SharePortfolioResponse>("/SharePortfolio", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSharePortfolio", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Share Portfolio #### Used when a user wants to share a portfolio with someone else.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioRequest">##### Share Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SharePortfolioResponse</returns>
        public async System.Threading.Tasks.Task<SharePortfolioResponse> PostSharePortfolioAsync(string contentType, SharePortfolioRequest sharePortfolioRequest = default(SharePortfolioRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<SharePortfolioResponse> localVarResponse = await PostSharePortfolioWithHttpInfoAsync(contentType, sharePortfolioRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Share Portfolio #### Used when a user wants to share a portfolio with someone else.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioRequest">##### Share Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SharePortfolioResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<SharePortfolioResponse>> PostSharePortfolioWithHttpInfoAsync(string contentType, SharePortfolioRequest sharePortfolioRequest = default(SharePortfolioRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostSharePortfolio");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = sharePortfolioRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SharePortfolioResponse>("/SharePortfolio", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSharePortfolio", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Share Portfolio No Email #### Used when a user wants to share a portfolio without sending out an email.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioNoEmailRequest">##### Share Portfolio No Email Request Model (optional)</param>
        /// <returns>SharePortfolioNoEmailResponse</returns>
        public SharePortfolioNoEmailResponse PostSharePortfolioNoEmail(string contentType, SharePortfolioNoEmailRequest sharePortfolioNoEmailRequest = default(SharePortfolioNoEmailRequest))
        {
            SigniFlow.Connect.Client.ApiResponse<SharePortfolioNoEmailResponse> localVarResponse = PostSharePortfolioNoEmailWithHttpInfo(contentType, sharePortfolioNoEmailRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Share Portfolio No Email #### Used when a user wants to share a portfolio without sending out an email.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioNoEmailRequest">##### Share Portfolio No Email Request Model (optional)</param>
        /// <returns>ApiResponse of SharePortfolioNoEmailResponse</returns>
        public SigniFlow.Connect.Client.ApiResponse<SharePortfolioNoEmailResponse> PostSharePortfolioNoEmailWithHttpInfo(string contentType, SharePortfolioNoEmailRequest sharePortfolioNoEmailRequest = default(SharePortfolioNoEmailRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostSharePortfolioNoEmail");

            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = sharePortfolioNoEmailRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SharePortfolioNoEmailResponse>("/SharePortfolio_No_Email", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSharePortfolioNoEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Share Portfolio No Email #### Used when a user wants to share a portfolio without sending out an email.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioNoEmailRequest">##### Share Portfolio No Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SharePortfolioNoEmailResponse</returns>
        public async System.Threading.Tasks.Task<SharePortfolioNoEmailResponse> PostSharePortfolioNoEmailAsync(string contentType, SharePortfolioNoEmailRequest sharePortfolioNoEmailRequest = default(SharePortfolioNoEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SigniFlow.Connect.Client.ApiResponse<SharePortfolioNoEmailResponse> localVarResponse = await PostSharePortfolioNoEmailWithHttpInfoAsync(contentType, sharePortfolioNoEmailRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Share Portfolio No Email #### Used when a user wants to share a portfolio without sending out an email.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioNoEmailRequest">##### Share Portfolio No Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SharePortfolioNoEmailResponse)</returns>
        public async System.Threading.Tasks.Task<SigniFlow.Connect.Client.ApiResponse<SharePortfolioNoEmailResponse>> PostSharePortfolioNoEmailWithHttpInfoAsync(string contentType, SharePortfolioNoEmailRequest sharePortfolioNoEmailRequest = default(SharePortfolioNoEmailRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new SigniFlow.Connect.Client.ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostSharePortfolioNoEmail");


            SigniFlow.Connect.Client.RequestOptions localVarRequestOptions = new SigniFlow.Connect.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = SigniFlow.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SigniFlow.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Content-Type", SigniFlow.Connect.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.Data = sharePortfolioNoEmailRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SharePortfolioNoEmailResponse>("/SharePortfolio_No_Email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSharePortfolioNoEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
