/*
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using SigniFlow.Connect.Client;
using SigniFlow.Connect.Model;

namespace SigniFlow.Connect.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortfoliosApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to create a portfolio to group documents.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createPortfolioRequest">##### Create Portfolio Request Model (optional)</param>
        /// <returns>CreatePortfolioResponse</returns>
        CreatePortfolioResponse PostCreatePortfolio (string contentType, CreatePortfolioRequest createPortfolioRequest = default(CreatePortfolioRequest));

        /// <summary>
        /// Create Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to create a portfolio to group documents.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createPortfolioRequest">##### Create Portfolio Request Model (optional)</param>
        /// <returns>ApiResponse of CreatePortfolioResponse</returns>
        ApiResponse<CreatePortfolioResponse> PostCreatePortfolioWithHttpInfo (string contentType, CreatePortfolioRequest createPortfolioRequest = default(CreatePortfolioRequest));
        /// <summary>
        /// Download Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to return a string that is then used to download a portfolio.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="downloadPortfolioRequest">##### Download Portfolio Request Model (optional)</param>
        /// <returns>DownloadPortfolioResponse</returns>
        DownloadPortfolioResponse PostDownloadPortfolio (string contentType, DownloadPortfolioRequest downloadPortfolioRequest = default(DownloadPortfolioRequest));

        /// <summary>
        /// Download Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to return a string that is then used to download a portfolio.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="downloadPortfolioRequest">##### Download Portfolio Request Model (optional)</param>
        /// <returns>ApiResponse of DownloadPortfolioResponse</returns>
        ApiResponse<DownloadPortfolioResponse> PostDownloadPortfolioWithHttpInfo (string contentType, DownloadPortfolioRequest downloadPortfolioRequest = default(DownloadPortfolioRequest));
        /// <summary>
        /// Link To Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to get the url link to a portfolio.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="linkToPortfolioRequest">##### Link To Portfolio Request Model (optional)</param>
        /// <returns>LinkToPortfolioResponse</returns>
        LinkToPortfolioResponse PostLinkToPortfolio (string contentType, LinkToPortfolioRequest linkToPortfolioRequest = default(LinkToPortfolioRequest));

        /// <summary>
        /// Link To Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to get the url link to a portfolio.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="linkToPortfolioRequest">##### Link To Portfolio Request Model (optional)</param>
        /// <returns>ApiResponse of LinkToPortfolioResponse</returns>
        ApiResponse<LinkToPortfolioResponse> PostLinkToPortfolioWithHttpInfo (string contentType, LinkToPortfolioRequest linkToPortfolioRequest = default(LinkToPortfolioRequest));
        /// <summary>
        /// Set Document Order
        /// </summary>
        /// <remarks>
        /// #### Used to set the order of documents that needs to be signed.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="setDocumentOrderRequest">##### Set Document Order Request Model (optional)</param>
        /// <returns>SetDocumentOrderResponse</returns>
        SetDocumentOrderResponse PostSetDocumentOrder (string contentType, SetDocumentOrderRequest setDocumentOrderRequest = default(SetDocumentOrderRequest));

        /// <summary>
        /// Set Document Order
        /// </summary>
        /// <remarks>
        /// #### Used to set the order of documents that needs to be signed.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="setDocumentOrderRequest">##### Set Document Order Request Model (optional)</param>
        /// <returns>ApiResponse of SetDocumentOrderResponse</returns>
        ApiResponse<SetDocumentOrderResponse> PostSetDocumentOrderWithHttpInfo (string contentType, SetDocumentOrderRequest setDocumentOrderRequest = default(SetDocumentOrderRequest));
        /// <summary>
        /// Share Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used when a user wants to share a portfolio with someone else.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioRequest">##### Share Portfolio Request Model (optional)</param>
        /// <returns>SharePortfolioResponse</returns>
        SharePortfolioResponse PostSharePortfolio (string contentType, SharePortfolioRequest sharePortfolioRequest = default(SharePortfolioRequest));

        /// <summary>
        /// Share Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used when a user wants to share a portfolio with someone else.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioRequest">##### Share Portfolio Request Model (optional)</param>
        /// <returns>ApiResponse of SharePortfolioResponse</returns>
        ApiResponse<SharePortfolioResponse> PostSharePortfolioWithHttpInfo (string contentType, SharePortfolioRequest sharePortfolioRequest = default(SharePortfolioRequest));
        /// <summary>
        /// Share Portfolio No Email
        /// </summary>
        /// <remarks>
        /// #### Used when a user wants to share a portfolio without sending out an email.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioNoEmailRequest">##### Share Portfolio No Email Request Model (optional)</param>
        /// <returns>SharePortfolioNoEmailResponse</returns>
        SharePortfolioNoEmailResponse PostSharePortfolioNoEmail (string contentType, SharePortfolioNoEmailRequest sharePortfolioNoEmailRequest = default(SharePortfolioNoEmailRequest));

        /// <summary>
        /// Share Portfolio No Email
        /// </summary>
        /// <remarks>
        /// #### Used when a user wants to share a portfolio without sending out an email.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioNoEmailRequest">##### Share Portfolio No Email Request Model (optional)</param>
        /// <returns>ApiResponse of SharePortfolioNoEmailResponse</returns>
        ApiResponse<SharePortfolioNoEmailResponse> PostSharePortfolioNoEmailWithHttpInfo (string contentType, SharePortfolioNoEmailRequest sharePortfolioNoEmailRequest = default(SharePortfolioNoEmailRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to create a portfolio to group documents.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createPortfolioRequest">##### Create Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreatePortfolioResponse</returns>
        System.Threading.Tasks.Task<CreatePortfolioResponse> PostCreatePortfolioAsync (string contentType, CreatePortfolioRequest createPortfolioRequest = default(CreatePortfolioRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to create a portfolio to group documents.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createPortfolioRequest">##### Create Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreatePortfolioResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePortfolioResponse>> PostCreatePortfolioWithHttpInfoAsync (string contentType, CreatePortfolioRequest createPortfolioRequest = default(CreatePortfolioRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Download Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to return a string that is then used to download a portfolio.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="downloadPortfolioRequest">##### Download Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DownloadPortfolioResponse</returns>
        System.Threading.Tasks.Task<DownloadPortfolioResponse> PostDownloadPortfolioAsync (string contentType, DownloadPortfolioRequest downloadPortfolioRequest = default(DownloadPortfolioRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Download Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to return a string that is then used to download a portfolio.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="downloadPortfolioRequest">##### Download Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DownloadPortfolioResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DownloadPortfolioResponse>> PostDownloadPortfolioWithHttpInfoAsync (string contentType, DownloadPortfolioRequest downloadPortfolioRequest = default(DownloadPortfolioRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Link To Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to get the url link to a portfolio.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="linkToPortfolioRequest">##### Link To Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LinkToPortfolioResponse</returns>
        System.Threading.Tasks.Task<LinkToPortfolioResponse> PostLinkToPortfolioAsync (string contentType, LinkToPortfolioRequest linkToPortfolioRequest = default(LinkToPortfolioRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Link To Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used to get the url link to a portfolio.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="linkToPortfolioRequest">##### Link To Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LinkToPortfolioResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkToPortfolioResponse>> PostLinkToPortfolioWithHttpInfoAsync (string contentType, LinkToPortfolioRequest linkToPortfolioRequest = default(LinkToPortfolioRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set Document Order
        /// </summary>
        /// <remarks>
        /// #### Used to set the order of documents that needs to be signed.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="setDocumentOrderRequest">##### Set Document Order Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SetDocumentOrderResponse</returns>
        System.Threading.Tasks.Task<SetDocumentOrderResponse> PostSetDocumentOrderAsync (string contentType, SetDocumentOrderRequest setDocumentOrderRequest = default(SetDocumentOrderRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set Document Order
        /// </summary>
        /// <remarks>
        /// #### Used to set the order of documents that needs to be signed.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="setDocumentOrderRequest">##### Set Document Order Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SetDocumentOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetDocumentOrderResponse>> PostSetDocumentOrderWithHttpInfoAsync (string contentType, SetDocumentOrderRequest setDocumentOrderRequest = default(SetDocumentOrderRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Share Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used when a user wants to share a portfolio with someone else.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioRequest">##### Share Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SharePortfolioResponse</returns>
        System.Threading.Tasks.Task<SharePortfolioResponse> PostSharePortfolioAsync (string contentType, SharePortfolioRequest sharePortfolioRequest = default(SharePortfolioRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Share Portfolio
        /// </summary>
        /// <remarks>
        /// #### Used when a user wants to share a portfolio with someone else.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioRequest">##### Share Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SharePortfolioResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharePortfolioResponse>> PostSharePortfolioWithHttpInfoAsync (string contentType, SharePortfolioRequest sharePortfolioRequest = default(SharePortfolioRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Share Portfolio No Email
        /// </summary>
        /// <remarks>
        /// #### Used when a user wants to share a portfolio without sending out an email.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioNoEmailRequest">##### Share Portfolio No Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SharePortfolioNoEmailResponse</returns>
        System.Threading.Tasks.Task<SharePortfolioNoEmailResponse> PostSharePortfolioNoEmailAsync (string contentType, SharePortfolioNoEmailRequest sharePortfolioNoEmailRequest = default(SharePortfolioNoEmailRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Share Portfolio No Email
        /// </summary>
        /// <remarks>
        /// #### Used when a user wants to share a portfolio without sending out an email.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioNoEmailRequest">##### Share Portfolio No Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SharePortfolioNoEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SharePortfolioNoEmailResponse>> PostSharePortfolioNoEmailWithHttpInfoAsync (string contentType, SharePortfolioNoEmailRequest sharePortfolioNoEmailRequest = default(SharePortfolioNoEmailRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PortfoliosApi : IPortfoliosApi
    {
        private SigniFlow.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfoliosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PortfoliosApi(String basePath)
        {
            this.Configuration = new SigniFlow.Connect.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfoliosApi"/> class
        /// </summary>
        /// <returns></returns>
        public PortfoliosApi()
        {
            this.Configuration = SigniFlow.Connect.Client.Configuration.Default;

            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfoliosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PortfoliosApi(SigniFlow.Connect.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SigniFlow.Connect.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SigniFlow.Connect.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SigniFlow.Connect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Portfolio #### Used to create a portfolio to group documents.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createPortfolioRequest">##### Create Portfolio Request Model (optional)</param>
        /// <returns>CreatePortfolioResponse</returns>
        public CreatePortfolioResponse PostCreatePortfolio (string contentType, CreatePortfolioRequest createPortfolioRequest = default(CreatePortfolioRequest))
        {
             ApiResponse<CreatePortfolioResponse> localVarResponse = PostCreatePortfolioWithHttpInfo(contentType, createPortfolioRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Portfolio #### Used to create a portfolio to group documents.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createPortfolioRequest">##### Create Portfolio Request Model (optional)</param>
        /// <returns>ApiResponse of CreatePortfolioResponse</returns>
        public ApiResponse<CreatePortfolioResponse> PostCreatePortfolioWithHttpInfo (string contentType, CreatePortfolioRequest createPortfolioRequest = default(CreatePortfolioRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostCreatePortfolio");

            var localVarPath = "/CreatePortfolio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (createPortfolioRequest != null && createPortfolioRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createPortfolioRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPortfolioRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCreatePortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatePortfolioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatePortfolioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatePortfolioResponse)));
        }

        /// <summary>
        /// Create Portfolio #### Used to create a portfolio to group documents.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createPortfolioRequest">##### Create Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreatePortfolioResponse</returns>
        public async System.Threading.Tasks.Task<CreatePortfolioResponse> PostCreatePortfolioAsync (string contentType, CreatePortfolioRequest createPortfolioRequest = default(CreatePortfolioRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreatePortfolioResponse> localVarResponse = await PostCreatePortfolioWithHttpInfoAsync(contentType, createPortfolioRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Portfolio #### Used to create a portfolio to group documents.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="createPortfolioRequest">##### Create Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreatePortfolioResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatePortfolioResponse>> PostCreatePortfolioWithHttpInfoAsync (string contentType, CreatePortfolioRequest createPortfolioRequest = default(CreatePortfolioRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostCreatePortfolio");

            var localVarPath = "/CreatePortfolio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (createPortfolioRequest != null && createPortfolioRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createPortfolioRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPortfolioRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCreatePortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatePortfolioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatePortfolioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatePortfolioResponse)));
        }

        /// <summary>
        /// Download Portfolio #### Used to return a string that is then used to download a portfolio.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="downloadPortfolioRequest">##### Download Portfolio Request Model (optional)</param>
        /// <returns>DownloadPortfolioResponse</returns>
        public DownloadPortfolioResponse PostDownloadPortfolio (string contentType, DownloadPortfolioRequest downloadPortfolioRequest = default(DownloadPortfolioRequest))
        {
             ApiResponse<DownloadPortfolioResponse> localVarResponse = PostDownloadPortfolioWithHttpInfo(contentType, downloadPortfolioRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download Portfolio #### Used to return a string that is then used to download a portfolio.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="downloadPortfolioRequest">##### Download Portfolio Request Model (optional)</param>
        /// <returns>ApiResponse of DownloadPortfolioResponse</returns>
        public ApiResponse<DownloadPortfolioResponse> PostDownloadPortfolioWithHttpInfo (string contentType, DownloadPortfolioRequest downloadPortfolioRequest = default(DownloadPortfolioRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostDownloadPortfolio");

            var localVarPath = "/DownloadPortfolio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (downloadPortfolioRequest != null && downloadPortfolioRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(downloadPortfolioRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = downloadPortfolioRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDownloadPortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DownloadPortfolioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DownloadPortfolioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DownloadPortfolioResponse)));
        }

        /// <summary>
        /// Download Portfolio #### Used to return a string that is then used to download a portfolio.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="downloadPortfolioRequest">##### Download Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DownloadPortfolioResponse</returns>
        public async System.Threading.Tasks.Task<DownloadPortfolioResponse> PostDownloadPortfolioAsync (string contentType, DownloadPortfolioRequest downloadPortfolioRequest = default(DownloadPortfolioRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DownloadPortfolioResponse> localVarResponse = await PostDownloadPortfolioWithHttpInfoAsync(contentType, downloadPortfolioRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download Portfolio #### Used to return a string that is then used to download a portfolio.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="downloadPortfolioRequest">##### Download Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DownloadPortfolioResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DownloadPortfolioResponse>> PostDownloadPortfolioWithHttpInfoAsync (string contentType, DownloadPortfolioRequest downloadPortfolioRequest = default(DownloadPortfolioRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostDownloadPortfolio");

            var localVarPath = "/DownloadPortfolio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (downloadPortfolioRequest != null && downloadPortfolioRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(downloadPortfolioRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = downloadPortfolioRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDownloadPortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DownloadPortfolioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DownloadPortfolioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DownloadPortfolioResponse)));
        }

        /// <summary>
        /// Link To Portfolio #### Used to get the url link to a portfolio.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="linkToPortfolioRequest">##### Link To Portfolio Request Model (optional)</param>
        /// <returns>LinkToPortfolioResponse</returns>
        public LinkToPortfolioResponse PostLinkToPortfolio (string contentType, LinkToPortfolioRequest linkToPortfolioRequest = default(LinkToPortfolioRequest))
        {
             ApiResponse<LinkToPortfolioResponse> localVarResponse = PostLinkToPortfolioWithHttpInfo(contentType, linkToPortfolioRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Link To Portfolio #### Used to get the url link to a portfolio.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="linkToPortfolioRequest">##### Link To Portfolio Request Model (optional)</param>
        /// <returns>ApiResponse of LinkToPortfolioResponse</returns>
        public ApiResponse<LinkToPortfolioResponse> PostLinkToPortfolioWithHttpInfo (string contentType, LinkToPortfolioRequest linkToPortfolioRequest = default(LinkToPortfolioRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostLinkToPortfolio");

            var localVarPath = "/LinkToPortfolio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (linkToPortfolioRequest != null && linkToPortfolioRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(linkToPortfolioRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = linkToPortfolioRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLinkToPortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkToPortfolioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LinkToPortfolioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LinkToPortfolioResponse)));
        }

        /// <summary>
        /// Link To Portfolio #### Used to get the url link to a portfolio.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="linkToPortfolioRequest">##### Link To Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LinkToPortfolioResponse</returns>
        public async System.Threading.Tasks.Task<LinkToPortfolioResponse> PostLinkToPortfolioAsync (string contentType, LinkToPortfolioRequest linkToPortfolioRequest = default(LinkToPortfolioRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<LinkToPortfolioResponse> localVarResponse = await PostLinkToPortfolioWithHttpInfoAsync(contentType, linkToPortfolioRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Link To Portfolio #### Used to get the url link to a portfolio.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="linkToPortfolioRequest">##### Link To Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LinkToPortfolioResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LinkToPortfolioResponse>> PostLinkToPortfolioWithHttpInfoAsync (string contentType, LinkToPortfolioRequest linkToPortfolioRequest = default(LinkToPortfolioRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostLinkToPortfolio");

            var localVarPath = "/LinkToPortfolio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (linkToPortfolioRequest != null && linkToPortfolioRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(linkToPortfolioRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = linkToPortfolioRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLinkToPortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkToPortfolioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LinkToPortfolioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LinkToPortfolioResponse)));
        }

        /// <summary>
        /// Set Document Order #### Used to set the order of documents that needs to be signed.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="setDocumentOrderRequest">##### Set Document Order Request Model (optional)</param>
        /// <returns>SetDocumentOrderResponse</returns>
        public SetDocumentOrderResponse PostSetDocumentOrder (string contentType, SetDocumentOrderRequest setDocumentOrderRequest = default(SetDocumentOrderRequest))
        {
             ApiResponse<SetDocumentOrderResponse> localVarResponse = PostSetDocumentOrderWithHttpInfo(contentType, setDocumentOrderRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Document Order #### Used to set the order of documents that needs to be signed.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="setDocumentOrderRequest">##### Set Document Order Request Model (optional)</param>
        /// <returns>ApiResponse of SetDocumentOrderResponse</returns>
        public ApiResponse<SetDocumentOrderResponse> PostSetDocumentOrderWithHttpInfo (string contentType, SetDocumentOrderRequest setDocumentOrderRequest = default(SetDocumentOrderRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostSetDocumentOrder");

            var localVarPath = "/SetDocumentOrder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (setDocumentOrderRequest != null && setDocumentOrderRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setDocumentOrderRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setDocumentOrderRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSetDocumentOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetDocumentOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SetDocumentOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetDocumentOrderResponse)));
        }

        /// <summary>
        /// Set Document Order #### Used to set the order of documents that needs to be signed.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="setDocumentOrderRequest">##### Set Document Order Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SetDocumentOrderResponse</returns>
        public async System.Threading.Tasks.Task<SetDocumentOrderResponse> PostSetDocumentOrderAsync (string contentType, SetDocumentOrderRequest setDocumentOrderRequest = default(SetDocumentOrderRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SetDocumentOrderResponse> localVarResponse = await PostSetDocumentOrderWithHttpInfoAsync(contentType, setDocumentOrderRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Document Order #### Used to set the order of documents that needs to be signed.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="setDocumentOrderRequest">##### Set Document Order Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SetDocumentOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SetDocumentOrderResponse>> PostSetDocumentOrderWithHttpInfoAsync (string contentType, SetDocumentOrderRequest setDocumentOrderRequest = default(SetDocumentOrderRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostSetDocumentOrder");

            var localVarPath = "/SetDocumentOrder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (setDocumentOrderRequest != null && setDocumentOrderRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setDocumentOrderRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setDocumentOrderRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSetDocumentOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SetDocumentOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SetDocumentOrderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SetDocumentOrderResponse)));
        }

        /// <summary>
        /// Share Portfolio #### Used when a user wants to share a portfolio with someone else.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioRequest">##### Share Portfolio Request Model (optional)</param>
        /// <returns>SharePortfolioResponse</returns>
        public SharePortfolioResponse PostSharePortfolio (string contentType, SharePortfolioRequest sharePortfolioRequest = default(SharePortfolioRequest))
        {
             ApiResponse<SharePortfolioResponse> localVarResponse = PostSharePortfolioWithHttpInfo(contentType, sharePortfolioRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Share Portfolio #### Used when a user wants to share a portfolio with someone else.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioRequest">##### Share Portfolio Request Model (optional)</param>
        /// <returns>ApiResponse of SharePortfolioResponse</returns>
        public ApiResponse<SharePortfolioResponse> PostSharePortfolioWithHttpInfo (string contentType, SharePortfolioRequest sharePortfolioRequest = default(SharePortfolioRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostSharePortfolio");

            var localVarPath = "/SharePortfolio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (sharePortfolioRequest != null && sharePortfolioRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sharePortfolioRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sharePortfolioRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSharePortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharePortfolioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharePortfolioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharePortfolioResponse)));
        }

        /// <summary>
        /// Share Portfolio #### Used when a user wants to share a portfolio with someone else.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioRequest">##### Share Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SharePortfolioResponse</returns>
        public async System.Threading.Tasks.Task<SharePortfolioResponse> PostSharePortfolioAsync (string contentType, SharePortfolioRequest sharePortfolioRequest = default(SharePortfolioRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SharePortfolioResponse> localVarResponse = await PostSharePortfolioWithHttpInfoAsync(contentType, sharePortfolioRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Share Portfolio #### Used when a user wants to share a portfolio with someone else.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioRequest">##### Share Portfolio Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SharePortfolioResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharePortfolioResponse>> PostSharePortfolioWithHttpInfoAsync (string contentType, SharePortfolioRequest sharePortfolioRequest = default(SharePortfolioRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostSharePortfolio");

            var localVarPath = "/SharePortfolio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (sharePortfolioRequest != null && sharePortfolioRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sharePortfolioRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sharePortfolioRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSharePortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharePortfolioResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharePortfolioResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharePortfolioResponse)));
        }

        /// <summary>
        /// Share Portfolio No Email #### Used when a user wants to share a portfolio without sending out an email.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioNoEmailRequest">##### Share Portfolio No Email Request Model (optional)</param>
        /// <returns>SharePortfolioNoEmailResponse</returns>
        public SharePortfolioNoEmailResponse PostSharePortfolioNoEmail (string contentType, SharePortfolioNoEmailRequest sharePortfolioNoEmailRequest = default(SharePortfolioNoEmailRequest))
        {
             ApiResponse<SharePortfolioNoEmailResponse> localVarResponse = PostSharePortfolioNoEmailWithHttpInfo(contentType, sharePortfolioNoEmailRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Share Portfolio No Email #### Used when a user wants to share a portfolio without sending out an email.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioNoEmailRequest">##### Share Portfolio No Email Request Model (optional)</param>
        /// <returns>ApiResponse of SharePortfolioNoEmailResponse</returns>
        public ApiResponse<SharePortfolioNoEmailResponse> PostSharePortfolioNoEmailWithHttpInfo (string contentType, SharePortfolioNoEmailRequest sharePortfolioNoEmailRequest = default(SharePortfolioNoEmailRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostSharePortfolioNoEmail");

            var localVarPath = "/SharePortfolio_No_Email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (sharePortfolioNoEmailRequest != null && sharePortfolioNoEmailRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sharePortfolioNoEmailRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sharePortfolioNoEmailRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSharePortfolioNoEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharePortfolioNoEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharePortfolioNoEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharePortfolioNoEmailResponse)));
        }

        /// <summary>
        /// Share Portfolio No Email #### Used when a user wants to share a portfolio without sending out an email.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioNoEmailRequest">##### Share Portfolio No Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SharePortfolioNoEmailResponse</returns>
        public async System.Threading.Tasks.Task<SharePortfolioNoEmailResponse> PostSharePortfolioNoEmailAsync (string contentType, SharePortfolioNoEmailRequest sharePortfolioNoEmailRequest = default(SharePortfolioNoEmailRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SharePortfolioNoEmailResponse> localVarResponse = await PostSharePortfolioNoEmailWithHttpInfoAsync(contentType, sharePortfolioNoEmailRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Share Portfolio No Email #### Used when a user wants to share a portfolio without sending out an email.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="sharePortfolioNoEmailRequest">##### Share Portfolio No Email Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SharePortfolioNoEmailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SharePortfolioNoEmailResponse>> PostSharePortfolioNoEmailWithHttpInfoAsync (string contentType, SharePortfolioNoEmailRequest sharePortfolioNoEmailRequest = default(SharePortfolioNoEmailRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PortfoliosApi->PostSharePortfolioNoEmail");

            var localVarPath = "/SharePortfolio_No_Email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (sharePortfolioNoEmailRequest != null && sharePortfolioNoEmailRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sharePortfolioNoEmailRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sharePortfolioNoEmailRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSharePortfolioNoEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SharePortfolioNoEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SharePortfolioNoEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SharePortfolioNoEmailResponse)));
        }

    }
}
