/*
 * WorkFlow API
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using SigniFlow.Connect.Client;
using SigniFlow.Connect.Model;

namespace SigniFlow.Connect.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Audit Document
        /// </summary>
        /// <remarks>
        /// #### Used to get an audit document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getAuditDocumentRequest">##### Get Audit Document Request Model (optional)</param>
        /// <returns>GetAuditDocumentResponse</returns>
        GetAuditDocumentResponse PostGetAuditDocument (string contentType, GetAuditDocumentRequest getAuditDocumentRequest = default(GetAuditDocumentRequest));

        /// <summary>
        /// Get Audit Document
        /// </summary>
        /// <remarks>
        /// #### Used to get an audit document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getAuditDocumentRequest">##### Get Audit Document Request Model (optional)</param>
        /// <returns>ApiResponse of GetAuditDocumentResponse</returns>
        ApiResponse<GetAuditDocumentResponse> PostGetAuditDocumentWithHttpInfo (string contentType, GetAuditDocumentRequest getAuditDocumentRequest = default(GetAuditDocumentRequest));
        /// <summary>
        /// Get Document Audit
        /// </summary>
        /// <remarks>
        /// #### Used to get the audit information from a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentAuditRequest">##### Get Document Audit Request Model (optional)</param>
        /// <returns>GetDocumentAuditResponse</returns>
        GetDocumentAuditResponse PostGetDocumentAudit (string contentType, GetDocumentAuditRequest getDocumentAuditRequest = default(GetDocumentAuditRequest));

        /// <summary>
        /// Get Document Audit
        /// </summary>
        /// <remarks>
        /// #### Used to get the audit information from a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentAuditRequest">##### Get Document Audit Request Model (optional)</param>
        /// <returns>ApiResponse of GetDocumentAuditResponse</returns>
        ApiResponse<GetDocumentAuditResponse> PostGetDocumentAuditWithHttpInfo (string contentType, GetDocumentAuditRequest getDocumentAuditRequest = default(GetDocumentAuditRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Audit Document
        /// </summary>
        /// <remarks>
        /// #### Used to get an audit document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getAuditDocumentRequest">##### Get Audit Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetAuditDocumentResponse</returns>
        System.Threading.Tasks.Task<GetAuditDocumentResponse> PostGetAuditDocumentAsync (string contentType, GetAuditDocumentRequest getAuditDocumentRequest = default(GetAuditDocumentRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Audit Document
        /// </summary>
        /// <remarks>
        /// #### Used to get an audit document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getAuditDocumentRequest">##### Get Audit Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetAuditDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAuditDocumentResponse>> PostGetAuditDocumentWithHttpInfoAsync (string contentType, GetAuditDocumentRequest getAuditDocumentRequest = default(GetAuditDocumentRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Document Audit
        /// </summary>
        /// <remarks>
        /// #### Used to get the audit information from a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentAuditRequest">##### Get Document Audit Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetDocumentAuditResponse</returns>
        System.Threading.Tasks.Task<GetDocumentAuditResponse> PostGetDocumentAuditAsync (string contentType, GetDocumentAuditRequest getDocumentAuditRequest = default(GetDocumentAuditRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Document Audit
        /// </summary>
        /// <remarks>
        /// #### Used to get the audit information from a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentAuditRequest">##### Get Document Audit Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetDocumentAuditResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDocumentAuditResponse>> PostGetDocumentAuditWithHttpInfoAsync (string contentType, GetDocumentAuditRequest getDocumentAuditRequest = default(GetDocumentAuditRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuditsApi : IAuditsApi
    {
        private SigniFlow.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuditsApi(String basePath)
        {
            this.Configuration = new SigniFlow.Connect.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AuditsApi()
        {
            this.Configuration = SigniFlow.Connect.Client.Configuration.Default;

            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuditsApi(SigniFlow.Connect.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SigniFlow.Connect.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SigniFlow.Connect.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SigniFlow.Connect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Audit Document #### Used to get an audit document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getAuditDocumentRequest">##### Get Audit Document Request Model (optional)</param>
        /// <returns>GetAuditDocumentResponse</returns>
        public GetAuditDocumentResponse PostGetAuditDocument (string contentType, GetAuditDocumentRequest getAuditDocumentRequest = default(GetAuditDocumentRequest))
        {
             ApiResponse<GetAuditDocumentResponse> localVarResponse = PostGetAuditDocumentWithHttpInfo(contentType, getAuditDocumentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Audit Document #### Used to get an audit document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getAuditDocumentRequest">##### Get Audit Document Request Model (optional)</param>
        /// <returns>ApiResponse of GetAuditDocumentResponse</returns>
        public ApiResponse<GetAuditDocumentResponse> PostGetAuditDocumentWithHttpInfo (string contentType, GetAuditDocumentRequest getAuditDocumentRequest = default(GetAuditDocumentRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AuditsApi->PostGetAuditDocument");

            var localVarPath = "/GetAuditDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (getAuditDocumentRequest != null && getAuditDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getAuditDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getAuditDocumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGetAuditDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAuditDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAuditDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAuditDocumentResponse)));
        }

        /// <summary>
        /// Get Audit Document #### Used to get an audit document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getAuditDocumentRequest">##### Get Audit Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetAuditDocumentResponse</returns>
        public async System.Threading.Tasks.Task<GetAuditDocumentResponse> PostGetAuditDocumentAsync (string contentType, GetAuditDocumentRequest getAuditDocumentRequest = default(GetAuditDocumentRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetAuditDocumentResponse> localVarResponse = await PostGetAuditDocumentWithHttpInfoAsync(contentType, getAuditDocumentRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Audit Document #### Used to get an audit document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getAuditDocumentRequest">##### Get Audit Document Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetAuditDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAuditDocumentResponse>> PostGetAuditDocumentWithHttpInfoAsync (string contentType, GetAuditDocumentRequest getAuditDocumentRequest = default(GetAuditDocumentRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AuditsApi->PostGetAuditDocument");

            var localVarPath = "/GetAuditDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (getAuditDocumentRequest != null && getAuditDocumentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getAuditDocumentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getAuditDocumentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGetAuditDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAuditDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAuditDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAuditDocumentResponse)));
        }

        /// <summary>
        /// Get Document Audit #### Used to get the audit information from a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentAuditRequest">##### Get Document Audit Request Model (optional)</param>
        /// <returns>GetDocumentAuditResponse</returns>
        public GetDocumentAuditResponse PostGetDocumentAudit (string contentType, GetDocumentAuditRequest getDocumentAuditRequest = default(GetDocumentAuditRequest))
        {
             ApiResponse<GetDocumentAuditResponse> localVarResponse = PostGetDocumentAuditWithHttpInfo(contentType, getDocumentAuditRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document Audit #### Used to get the audit information from a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentAuditRequest">##### Get Document Audit Request Model (optional)</param>
        /// <returns>ApiResponse of GetDocumentAuditResponse</returns>
        public ApiResponse<GetDocumentAuditResponse> PostGetDocumentAuditWithHttpInfo (string contentType, GetDocumentAuditRequest getDocumentAuditRequest = default(GetDocumentAuditRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AuditsApi->PostGetDocumentAudit");

            var localVarPath = "/GetDocumentAudit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (getDocumentAuditRequest != null && getDocumentAuditRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getDocumentAuditRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getDocumentAuditRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGetDocumentAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocumentAuditResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDocumentAuditResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocumentAuditResponse)));
        }

        /// <summary>
        /// Get Document Audit #### Used to get the audit information from a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentAuditRequest">##### Get Document Audit Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetDocumentAuditResponse</returns>
        public async System.Threading.Tasks.Task<GetDocumentAuditResponse> PostGetDocumentAuditAsync (string contentType, GetDocumentAuditRequest getDocumentAuditRequest = default(GetDocumentAuditRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetDocumentAuditResponse> localVarResponse = await PostGetDocumentAuditWithHttpInfoAsync(contentType, getDocumentAuditRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Document Audit #### Used to get the audit information from a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="getDocumentAuditRequest">##### Get Document Audit Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetDocumentAuditResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDocumentAuditResponse>> PostGetDocumentAuditWithHttpInfoAsync (string contentType, GetDocumentAuditRequest getDocumentAuditRequest = default(GetDocumentAuditRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AuditsApi->PostGetDocumentAudit");

            var localVarPath = "/GetDocumentAudit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (getDocumentAuditRequest != null && getDocumentAuditRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getDocumentAuditRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getDocumentAuditRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostGetDocumentAudit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDocumentAuditResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDocumentAuditResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDocumentAuditResponse)));
        }

    }
}
