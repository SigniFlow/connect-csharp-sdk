/*
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using SigniFlow.Connect.Client;
using SigniFlow.Connect.Model;

namespace SigniFlow.Connect.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISigningCeremonyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Multiple Signers Signing Ceremony
        /// </summary>
        /// <remarks>
        /// #### Used when there are multiple signers on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="multipleSignersSigningCeremonyRequest">##### Multiple Signers Signing Ceremony Request Model (optional)</param>
        /// <returns>MultipleSignersSigningCeremonyResponse</returns>
        MultipleSignersSigningCeremonyResponse PostMultipleSignersSigningCeremony (string contentType, MultipleSignersSigningCeremonyRequest multipleSignersSigningCeremonyRequest = default(MultipleSignersSigningCeremonyRequest));

        /// <summary>
        /// Multiple Signers Signing Ceremony
        /// </summary>
        /// <remarks>
        /// #### Used when there are multiple signers on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="multipleSignersSigningCeremonyRequest">##### Multiple Signers Signing Ceremony Request Model (optional)</param>
        /// <returns>ApiResponse of MultipleSignersSigningCeremonyResponse</returns>
        ApiResponse<MultipleSignersSigningCeremonyResponse> PostMultipleSignersSigningCeremonyWithHttpInfo (string contentType, MultipleSignersSigningCeremonyRequest multipleSignersSigningCeremonyRequest = default(MultipleSignersSigningCeremonyRequest));
        /// <summary>
        /// Signing Ceremony V2
        /// </summary>
        /// <remarks>
        /// #### Used to initiate the signing process of a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="signingCeremonyV2Request">##### Signing Ceremony V2 Request Model (optional)</param>
        /// <returns>SigningCeremonyV2Response</returns>
        SigningCeremonyV2Response PostSigningCeremonyV2 (string contentType, SigningCeremonyV2Request signingCeremonyV2Request = default(SigningCeremonyV2Request));

        /// <summary>
        /// Signing Ceremony V2
        /// </summary>
        /// <remarks>
        /// #### Used to initiate the signing process of a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="signingCeremonyV2Request">##### Signing Ceremony V2 Request Model (optional)</param>
        /// <returns>ApiResponse of SigningCeremonyV2Response</returns>
        ApiResponse<SigningCeremonyV2Response> PostSigningCeremonyV2WithHttpInfo (string contentType, SigningCeremonyV2Request signingCeremonyV2Request = default(SigningCeremonyV2Request));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Multiple Signers Signing Ceremony
        /// </summary>
        /// <remarks>
        /// #### Used when there are multiple signers on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="multipleSignersSigningCeremonyRequest">##### Multiple Signers Signing Ceremony Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MultipleSignersSigningCeremonyResponse</returns>
        System.Threading.Tasks.Task<MultipleSignersSigningCeremonyResponse> PostMultipleSignersSigningCeremonyAsync (string contentType, MultipleSignersSigningCeremonyRequest multipleSignersSigningCeremonyRequest = default(MultipleSignersSigningCeremonyRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Multiple Signers Signing Ceremony
        /// </summary>
        /// <remarks>
        /// #### Used when there are multiple signers on a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="multipleSignersSigningCeremonyRequest">##### Multiple Signers Signing Ceremony Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MultipleSignersSigningCeremonyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultipleSignersSigningCeremonyResponse>> PostMultipleSignersSigningCeremonyWithHttpInfoAsync (string contentType, MultipleSignersSigningCeremonyRequest multipleSignersSigningCeremonyRequest = default(MultipleSignersSigningCeremonyRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Signing Ceremony V2
        /// </summary>
        /// <remarks>
        /// #### Used to initiate the signing process of a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="signingCeremonyV2Request">##### Signing Ceremony V2 Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SigningCeremonyV2Response</returns>
        System.Threading.Tasks.Task<SigningCeremonyV2Response> PostSigningCeremonyV2Async (string contentType, SigningCeremonyV2Request signingCeremonyV2Request = default(SigningCeremonyV2Request), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Signing Ceremony V2
        /// </summary>
        /// <remarks>
        /// #### Used to initiate the signing process of a document.
        /// </remarks>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="signingCeremonyV2Request">##### Signing Ceremony V2 Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SigningCeremonyV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SigningCeremonyV2Response>> PostSigningCeremonyV2WithHttpInfoAsync (string contentType, SigningCeremonyV2Request signingCeremonyV2Request = default(SigningCeremonyV2Request), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SigningCeremonyApi : ISigningCeremonyApi
    {
        private SigniFlow.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SigningCeremonyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SigningCeremonyApi(String basePath)
        {
            this.Configuration = new SigniFlow.Connect.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SigningCeremonyApi"/> class
        /// </summary>
        /// <returns></returns>
        public SigningCeremonyApi()
        {
            this.Configuration = SigniFlow.Connect.Client.Configuration.Default;

            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SigningCeremonyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SigningCeremonyApi(SigniFlow.Connect.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SigniFlow.Connect.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SigniFlow.Connect.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SigniFlow.Connect.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SigniFlow.Connect.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Multiple Signers Signing Ceremony #### Used when there are multiple signers on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="multipleSignersSigningCeremonyRequest">##### Multiple Signers Signing Ceremony Request Model (optional)</param>
        /// <returns>MultipleSignersSigningCeremonyResponse</returns>
        public MultipleSignersSigningCeremonyResponse PostMultipleSignersSigningCeremony (string contentType, MultipleSignersSigningCeremonyRequest multipleSignersSigningCeremonyRequest = default(MultipleSignersSigningCeremonyRequest))
        {
             ApiResponse<MultipleSignersSigningCeremonyResponse> localVarResponse = PostMultipleSignersSigningCeremonyWithHttpInfo(contentType, multipleSignersSigningCeremonyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Multiple Signers Signing Ceremony #### Used when there are multiple signers on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="multipleSignersSigningCeremonyRequest">##### Multiple Signers Signing Ceremony Request Model (optional)</param>
        /// <returns>ApiResponse of MultipleSignersSigningCeremonyResponse</returns>
        public ApiResponse<MultipleSignersSigningCeremonyResponse> PostMultipleSignersSigningCeremonyWithHttpInfo (string contentType, MultipleSignersSigningCeremonyRequest multipleSignersSigningCeremonyRequest = default(MultipleSignersSigningCeremonyRequest))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SigningCeremonyApi->PostMultipleSignersSigningCeremony");

            var localVarPath = "/MultipleSignersSigningCeremony";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (multipleSignersSigningCeremonyRequest != null && multipleSignersSigningCeremonyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(multipleSignersSigningCeremonyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = multipleSignersSigningCeremonyRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMultipleSignersSigningCeremony", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultipleSignersSigningCeremonyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultipleSignersSigningCeremonyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultipleSignersSigningCeremonyResponse)));
        }

        /// <summary>
        /// Multiple Signers Signing Ceremony #### Used when there are multiple signers on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="multipleSignersSigningCeremonyRequest">##### Multiple Signers Signing Ceremony Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MultipleSignersSigningCeremonyResponse</returns>
        public async System.Threading.Tasks.Task<MultipleSignersSigningCeremonyResponse> PostMultipleSignersSigningCeremonyAsync (string contentType, MultipleSignersSigningCeremonyRequest multipleSignersSigningCeremonyRequest = default(MultipleSignersSigningCeremonyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MultipleSignersSigningCeremonyResponse> localVarResponse = await PostMultipleSignersSigningCeremonyWithHttpInfoAsync(contentType, multipleSignersSigningCeremonyRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Multiple Signers Signing Ceremony #### Used when there are multiple signers on a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="multipleSignersSigningCeremonyRequest">##### Multiple Signers Signing Ceremony Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MultipleSignersSigningCeremonyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultipleSignersSigningCeremonyResponse>> PostMultipleSignersSigningCeremonyWithHttpInfoAsync (string contentType, MultipleSignersSigningCeremonyRequest multipleSignersSigningCeremonyRequest = default(MultipleSignersSigningCeremonyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SigningCeremonyApi->PostMultipleSignersSigningCeremony");

            var localVarPath = "/MultipleSignersSigningCeremony";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (multipleSignersSigningCeremonyRequest != null && multipleSignersSigningCeremonyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(multipleSignersSigningCeremonyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = multipleSignersSigningCeremonyRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMultipleSignersSigningCeremony", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultipleSignersSigningCeremonyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultipleSignersSigningCeremonyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultipleSignersSigningCeremonyResponse)));
        }

        /// <summary>
        /// Signing Ceremony V2 #### Used to initiate the signing process of a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="signingCeremonyV2Request">##### Signing Ceremony V2 Request Model (optional)</param>
        /// <returns>SigningCeremonyV2Response</returns>
        public SigningCeremonyV2Response PostSigningCeremonyV2 (string contentType, SigningCeremonyV2Request signingCeremonyV2Request = default(SigningCeremonyV2Request))
        {
             ApiResponse<SigningCeremonyV2Response> localVarResponse = PostSigningCeremonyV2WithHttpInfo(contentType, signingCeremonyV2Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Signing Ceremony V2 #### Used to initiate the signing process of a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="signingCeremonyV2Request">##### Signing Ceremony V2 Request Model (optional)</param>
        /// <returns>ApiResponse of SigningCeremonyV2Response</returns>
        public ApiResponse<SigningCeremonyV2Response> PostSigningCeremonyV2WithHttpInfo (string contentType, SigningCeremonyV2Request signingCeremonyV2Request = default(SigningCeremonyV2Request))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SigningCeremonyApi->PostSigningCeremonyV2");

            var localVarPath = "/SigningCeremonyV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (signingCeremonyV2Request != null && signingCeremonyV2Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(signingCeremonyV2Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingCeremonyV2Request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSigningCeremonyV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningCeremonyV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SigningCeremonyV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningCeremonyV2Response)));
        }

        /// <summary>
        /// Signing Ceremony V2 #### Used to initiate the signing process of a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="signingCeremonyV2Request">##### Signing Ceremony V2 Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SigningCeremonyV2Response</returns>
        public async System.Threading.Tasks.Task<SigningCeremonyV2Response> PostSigningCeremonyV2Async (string contentType, SigningCeremonyV2Request signingCeremonyV2Request = default(SigningCeremonyV2Request), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SigningCeremonyV2Response> localVarResponse = await PostSigningCeremonyV2WithHttpInfoAsync(contentType, signingCeremonyV2Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Signing Ceremony V2 #### Used to initiate the signing process of a document.
        /// </summary>
        /// <exception cref="SigniFlow.Connect.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="signingCeremonyV2Request">##### Signing Ceremony V2 Request Model (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SigningCeremonyV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SigningCeremonyV2Response>> PostSigningCeremonyV2WithHttpInfoAsync (string contentType, SigningCeremonyV2Request signingCeremonyV2Request = default(SigningCeremonyV2Request), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SigningCeremonyApi->PostSigningCeremonyV2");

            var localVarPath = "/SigningCeremonyV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (signingCeremonyV2Request != null && signingCeremonyV2Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(signingCeremonyV2Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signingCeremonyV2Request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSigningCeremonyV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SigningCeremonyV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SigningCeremonyV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SigningCeremonyV2Response)));
        }

    }
}
