/*
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigniFlow.Connect.Client.OpenAPIDateConverter;

namespace SigniFlow.Connect.Model
{
    /// <summary>
    /// #### This is the request sent when there are multiple signers on a document.
    /// </summary>
    [DataContract(Name = "MultipleSignersSigningCeremonyRequest")]
    public partial class MultipleSignersSigningCeremonyRequest : IEquatable<MultipleSignersSigningCeremonyRequest>, IValidatableObject
    {
//    
//    
//        /// <summary>
//        /// Initializes a new instance of the <see cref="MultipleSignersSigningCeremonyRequest" /> class.
//        /// </summary>
//        [JsonConstructorAttribute]
//        
//        protected MultipleSignersSigningCeremonyRequest() { }
//        
//        
//    
//    
        /// <summary>
        /// Initializes a new instance of the <see cref="MultipleSignersSigningCeremonyRequest" /> class.
        /// </summary>
        /// <param name="docField">Document field (required).</param>
        /// <param name="docNameField">Document name (required).</param>
        /// <param name="loginPasswordField">User&#39;s password. (required).</param>
        /// <param name="loginUserNameField">User&#39;s username. (required).</param>
        /// <param name="signerListField">signerListField (required).</param>
        public MultipleSignersSigningCeremonyRequest(string docField = default(string), string docNameField = default(string), string loginPasswordField = default(string), string loginUserNameField = default(string), List<MultipleSignersSigningCeremonyRequestSignerListField> signerListField = default(List<MultipleSignersSigningCeremonyRequestSignerListField>))
        {
            // to ensure "docField" is required (not null)
            this.DocField = docField ?? throw new ArgumentNullException("docField is a required property for MultipleSignersSigningCeremonyRequest and cannot be null");
            // to ensure "docNameField" is required (not null)
            this.DocNameField = docNameField ?? throw new ArgumentNullException("docNameField is a required property for MultipleSignersSigningCeremonyRequest and cannot be null");
            // to ensure "loginPasswordField" is required (not null)
            this.LoginPasswordField = loginPasswordField ?? throw new ArgumentNullException("loginPasswordField is a required property for MultipleSignersSigningCeremonyRequest and cannot be null");
            // to ensure "loginUserNameField" is required (not null)
            this.LoginUserNameField = loginUserNameField ?? throw new ArgumentNullException("loginUserNameField is a required property for MultipleSignersSigningCeremonyRequest and cannot be null");
            // to ensure "signerListField" is required (not null)
            this.SignerListField = signerListField ?? throw new ArgumentNullException("signerListField is a required property for MultipleSignersSigningCeremonyRequest and cannot be null");
        }

        /// <summary>
        /// Document field
        /// </summary>
        /// <value>Document field</value>
        [DataMember(Name = "DocField", IsRequired = true, EmitDefaultValue = true)]
        public string DocField { get; set; }

        /// <summary>
        /// Document name
        /// </summary>
        /// <value>Document name</value>
        [DataMember(Name = "DocNameField", IsRequired = true, EmitDefaultValue = true)]
        public string DocNameField { get; set; }

        /// <summary>
        /// User&#39;s password.
        /// </summary>
        /// <value>User&#39;s password.</value>
        [DataMember(Name = "LoginPasswordField", IsRequired = true, EmitDefaultValue = true)]
        public string LoginPasswordField { get; set; }

        /// <summary>
        /// User&#39;s username.
        /// </summary>
        /// <value>User&#39;s username.</value>
        [DataMember(Name = "LoginUserNameField", IsRequired = true, EmitDefaultValue = true)]
        public string LoginUserNameField { get; set; }

        /// <summary>
        /// Gets or Sets SignerListField
        /// </summary>
        [DataMember(Name = "SignerListField", IsRequired = true, EmitDefaultValue = true)]
        public List<MultipleSignersSigningCeremonyRequestSignerListField> SignerListField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MultipleSignersSigningCeremonyRequest {\n");
            sb.Append("  DocField: ").Append(DocField).Append("\n");
            sb.Append("  DocNameField: ").Append(DocNameField).Append("\n");
            sb.Append("  LoginPasswordField: ").Append(LoginPasswordField).Append("\n");
            sb.Append("  LoginUserNameField: ").Append(LoginUserNameField).Append("\n");
            sb.Append("  SignerListField: ").Append(SignerListField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MultipleSignersSigningCeremonyRequest);
        }

        /// <summary>
        /// Returns true if MultipleSignersSigningCeremonyRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MultipleSignersSigningCeremonyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MultipleSignersSigningCeremonyRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocField == input.DocField ||
                    (this.DocField != null &&
                    this.DocField.Equals(input.DocField))
                ) && 
                (
                    this.DocNameField == input.DocNameField ||
                    (this.DocNameField != null &&
                    this.DocNameField.Equals(input.DocNameField))
                ) && 
                (
                    this.LoginPasswordField == input.LoginPasswordField ||
                    (this.LoginPasswordField != null &&
                    this.LoginPasswordField.Equals(input.LoginPasswordField))
                ) && 
                (
                    this.LoginUserNameField == input.LoginUserNameField ||
                    (this.LoginUserNameField != null &&
                    this.LoginUserNameField.Equals(input.LoginUserNameField))
                ) && 
                (
                    this.SignerListField == input.SignerListField ||
                    this.SignerListField != null &&
                    input.SignerListField != null &&
                    this.SignerListField.SequenceEqual(input.SignerListField)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocField != null)
                    hashCode = hashCode * 59 + this.DocField.GetHashCode();
                if (this.DocNameField != null)
                    hashCode = hashCode * 59 + this.DocNameField.GetHashCode();
                if (this.LoginPasswordField != null)
                    hashCode = hashCode * 59 + this.LoginPasswordField.GetHashCode();
                if (this.LoginUserNameField != null)
                    hashCode = hashCode * 59 + this.LoginUserNameField.GetHashCode();
                if (this.SignerListField != null)
                    hashCode = hashCode * 59 + this.SignerListField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DocField (string) minLength
            if(this.DocField != null && this.DocField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocField, length must be greater than 1.", new [] { "DocField" });
            }

            // DocNameField (string) minLength
            if(this.DocNameField != null && this.DocNameField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocNameField, length must be greater than 1.", new [] { "DocNameField" });
            }

            // LoginPasswordField (string) minLength
            if(this.LoginPasswordField != null && this.LoginPasswordField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoginPasswordField, length must be greater than 1.", new [] { "LoginPasswordField" });
            }

            // LoginUserNameField (string) minLength
            if(this.LoginUserNameField != null && this.LoginUserNameField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoginUserNameField, length must be greater than 1.", new [] { "LoginUserNameField" });
            }

            yield break;
        }
    }

}
