/*
 * SigniFlow API
 *
 * API for adding watermarks to documents
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigniFlow.Connect.Client.OpenAPIDateConverter;

namespace SigniFlow.CertifyCeremonyAPI.Model
{
    /// <summary>
    /// AddWatermarkByFileResponse
    /// </summary>
    [DataContract(Name = "AddWatermarkByFileResponse")]
    public partial class AddWatermarkByFileResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddWatermarkByFileResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddWatermarkByFileResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddWatermarkByFileResponse" /> class.
        /// </summary>
        /// <param name="baseFileField">The base64 encoded or string content of the watermarked file (required).</param>
        /// <param name="resultField">The result of the watermark operation (success or error) (required).</param>
        public AddWatermarkByFileResponse(string baseFileField = default(string), string resultField = default(string))
        {
            // to ensure "baseFileField" is required (not null)
            if (baseFileField == null)
            {
                throw new ArgumentNullException("baseFileField is a required property for AddWatermarkByFileResponse and cannot be null");
            }
            this.BaseFileField = baseFileField;
            // to ensure "resultField" is required (not null)
            if (resultField == null)
            {
                throw new ArgumentNullException("resultField is a required property for AddWatermarkByFileResponse and cannot be null");
            }
            this.ResultField = resultField;
        }

        /// <summary>
        /// The base64 encoded or string content of the watermarked file
        /// </summary>
        /// <value>The base64 encoded or string content of the watermarked file</value>
        [DataMember(Name = "BaseFileField", IsRequired = true, EmitDefaultValue = true)]
        public string BaseFileField { get; set; }

        /// <summary>
        /// The result of the watermark operation (success or error)
        /// </summary>
        /// <value>The result of the watermark operation (success or error)</value>
        [DataMember(Name = "ResultField", IsRequired = true, EmitDefaultValue = true)]
        public string ResultField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddWatermarkByFileResponse {\n");
            sb.Append("  BaseFileField: ").Append(BaseFileField).Append("\n");
            sb.Append("  ResultField: ").Append(ResultField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
