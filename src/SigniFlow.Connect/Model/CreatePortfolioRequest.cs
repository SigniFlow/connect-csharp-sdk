/*
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigniFlow.Connect.Client.OpenAPIDateConverter;

namespace SigniFlow.Connect.Model
{
    /// <summary>
    /// #### Used to create a portfolio.
    /// </summary>
    [DataContract(Name = "CreatePortfolioRequest")]
    public partial class CreatePortfolioRequest : IEquatable<CreatePortfolioRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePortfolioRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreatePortfolioRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePortfolioRequest" /> class.
        /// </summary>
        /// <param name="docIDField">Document ID field. (required).</param>
        /// <param name="portfolioNameField">Portfolio name displayed in SigniFlow (required).</param>
        /// <param name="tokenIDField">tokenIDField (required).</param>
        public CreatePortfolioRequest(decimal docIDField = default(decimal), string portfolioNameField = default(string), TokenField tokenIDField = default(TokenField))
        {
            this.DocIDField = docIDField;
            // to ensure "portfolioNameField" is required (not null)
            this.PortfolioNameField = portfolioNameField ?? throw new ArgumentNullException("portfolioNameField is a required property for CreatePortfolioRequest and cannot be null");
            // to ensure "tokenIDField" is required (not null)
            this.TokenIDField = tokenIDField ?? throw new ArgumentNullException("tokenIDField is a required property for CreatePortfolioRequest and cannot be null");
        }

        /// <summary>
        /// Document ID field.
        /// </summary>
        /// <value>Document ID field.</value>
        [DataMember(Name = "DocIDField", IsRequired = true, EmitDefaultValue = false)]
        public decimal DocIDField { get; set; }

        /// <summary>
        /// Portfolio name displayed in SigniFlow
        /// </summary>
        /// <value>Portfolio name displayed in SigniFlow</value>
        [DataMember(Name = "PortfolioNameField", IsRequired = true, EmitDefaultValue = false)]
        public string PortfolioNameField { get; set; }

        /// <summary>
        /// Gets or Sets TokenIDField
        /// </summary>
        [DataMember(Name = "TokenIDField", IsRequired = true, EmitDefaultValue = false)]
        public TokenField TokenIDField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreatePortfolioRequest {\n");
            sb.Append("  DocIDField: ").Append(DocIDField).Append("\n");
            sb.Append("  PortfolioNameField: ").Append(PortfolioNameField).Append("\n");
            sb.Append("  TokenIDField: ").Append(TokenIDField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreatePortfolioRequest);
        }

        /// <summary>
        /// Returns true if CreatePortfolioRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreatePortfolioRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatePortfolioRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocIDField == input.DocIDField ||
                    this.DocIDField.Equals(input.DocIDField)
                ) && 
                (
                    this.PortfolioNameField == input.PortfolioNameField ||
                    (this.PortfolioNameField != null &&
                    this.PortfolioNameField.Equals(input.PortfolioNameField))
                ) && 
                (
                    this.TokenIDField == input.TokenIDField ||
                    (this.TokenIDField != null &&
                    this.TokenIDField.Equals(input.TokenIDField))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.DocIDField.GetHashCode();
                if (this.PortfolioNameField != null)
                    hashCode = hashCode * 59 + this.PortfolioNameField.GetHashCode();
                if (this.TokenIDField != null)
                    hashCode = hashCode * 59 + this.TokenIDField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PortfolioNameField (string) minLength
            if(this.PortfolioNameField != null && this.PortfolioNameField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PortfolioNameField, length must be greater than 1.", new [] { "PortfolioNameField" });
            }

            yield break;
        }
    }

}
