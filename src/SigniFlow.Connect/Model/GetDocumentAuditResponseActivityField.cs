/*
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigniFlow.Connect.Client.OpenAPIDateConverter;

namespace SigniFlow.Connect.Model
{
    /// <summary>
    /// GetDocumentAuditResponseActivityField
    /// </summary>
    [DataContract(Name = "GetDocumentAuditResponse_ActivityField")]
    public partial class GetDocumentAuditResponseActivityField : IEquatable<GetDocumentAuditResponseActivityField>, IValidatableObject
    {
//    
//    
//        /// <summary>
//        /// Initializes a new instance of the <see cref="GetDocumentAuditResponseActivityField" /> class.
//        /// </summary>
//        [JsonConstructorAttribute]
//        
//        protected GetDocumentAuditResponseActivityField() { }
//        
//        
//    
//    
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDocumentAuditResponseActivityField" /> class.
        /// </summary>
        /// <param name="actionOrderField">actionOrderField (required).</param>
        /// <param name="additionalField">additionalField (required).</param>
        /// <param name="docIDField">docIDField (required).</param>
        /// <param name="emailField">The user&#39;s email. (required).</param>
        /// <param name="eventDateField">eventDateField (required).</param>
        /// <param name="eventField">eventField (required).</param>
        /// <param name="eventStatusField">eventStatusField (required).</param>
        /// <param name="locationField">locationField (required).</param>
        /// <param name="orderDateField">orderDateField (required).</param>
        /// <param name="pageField">pageField (required).</param>
        /// <param name="userFullNameField">User&#39;s full name. (required).</param>
        public GetDocumentAuditResponseActivityField(string actionOrderField = default(string), string additionalField = default(string), string docIDField = default(string), string emailField = default(string), string eventDateField = default(string), string eventField = default(string), string eventStatusField = default(string), string locationField = default(string), string orderDateField = default(string), string pageField = default(string), string userFullNameField = default(string))
        {
            // to ensure "actionOrderField" is required (not null)
            this.ActionOrderField = actionOrderField ?? throw new ArgumentNullException("actionOrderField is a required property for GetDocumentAuditResponseActivityField and cannot be null");
            // to ensure "additionalField" is required (not null)
            this.AdditionalField = additionalField ?? throw new ArgumentNullException("additionalField is a required property for GetDocumentAuditResponseActivityField and cannot be null");
            // to ensure "docIDField" is required (not null)
            this.DocIDField = docIDField ?? throw new ArgumentNullException("docIDField is a required property for GetDocumentAuditResponseActivityField and cannot be null");
            // to ensure "emailField" is required (not null)
            this.EmailField = emailField ?? throw new ArgumentNullException("emailField is a required property for GetDocumentAuditResponseActivityField and cannot be null");
            // to ensure "eventDateField" is required (not null)
            this.EventDateField = eventDateField ?? throw new ArgumentNullException("eventDateField is a required property for GetDocumentAuditResponseActivityField and cannot be null");
            // to ensure "eventField" is required (not null)
            this.EventField = eventField ?? throw new ArgumentNullException("eventField is a required property for GetDocumentAuditResponseActivityField and cannot be null");
            // to ensure "eventStatusField" is required (not null)
            this.EventStatusField = eventStatusField ?? throw new ArgumentNullException("eventStatusField is a required property for GetDocumentAuditResponseActivityField and cannot be null");
            // to ensure "locationField" is required (not null)
            this.LocationField = locationField ?? throw new ArgumentNullException("locationField is a required property for GetDocumentAuditResponseActivityField and cannot be null");
            // to ensure "orderDateField" is required (not null)
            this.OrderDateField = orderDateField ?? throw new ArgumentNullException("orderDateField is a required property for GetDocumentAuditResponseActivityField and cannot be null");
            // to ensure "pageField" is required (not null)
            this.PageField = pageField ?? throw new ArgumentNullException("pageField is a required property for GetDocumentAuditResponseActivityField and cannot be null");
            // to ensure "userFullNameField" is required (not null)
            this.UserFullNameField = userFullNameField ?? throw new ArgumentNullException("userFullNameField is a required property for GetDocumentAuditResponseActivityField and cannot be null");
        }

        /// <summary>
        /// Gets or Sets ActionOrderField
        /// </summary>
        [DataMember(Name = "ActionOrderField", IsRequired = true, EmitDefaultValue = true)]
        public string ActionOrderField { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalField
        /// </summary>
        [DataMember(Name = "AdditionalField", IsRequired = true, EmitDefaultValue = true)]
        public string AdditionalField { get; set; }

        /// <summary>
        /// Gets or Sets DocIDField
        /// </summary>
        [DataMember(Name = "DocIDField", IsRequired = true, EmitDefaultValue = true)]
        public string DocIDField { get; set; }

        /// <summary>
        /// The user&#39;s email.
        /// </summary>
        /// <value>The user&#39;s email.</value>
        [DataMember(Name = "EmailField", IsRequired = true, EmitDefaultValue = true)]
        public string EmailField { get; set; }

        /// <summary>
        /// Gets or Sets EventDateField
        /// </summary>
        [DataMember(Name = "EventDateField", IsRequired = true, EmitDefaultValue = true)]
        public string EventDateField { get; set; }

        /// <summary>
        /// Gets or Sets EventField
        /// </summary>
        [DataMember(Name = "EventField", IsRequired = true, EmitDefaultValue = true)]
        public string EventField { get; set; }

        /// <summary>
        /// Gets or Sets EventStatusField
        /// </summary>
        [DataMember(Name = "EventStatusField", IsRequired = true, EmitDefaultValue = true)]
        public string EventStatusField { get; set; }

        /// <summary>
        /// Gets or Sets LocationField
        /// </summary>
        [DataMember(Name = "LocationField", IsRequired = true, EmitDefaultValue = true)]
        public string LocationField { get; set; }

        /// <summary>
        /// Gets or Sets OrderDateField
        /// </summary>
        [DataMember(Name = "OrderDateField", IsRequired = true, EmitDefaultValue = true)]
        public string OrderDateField { get; set; }

        /// <summary>
        /// Gets or Sets PageField
        /// </summary>
        [DataMember(Name = "PageField", IsRequired = true, EmitDefaultValue = true)]
        public string PageField { get; set; }

        /// <summary>
        /// User&#39;s full name.
        /// </summary>
        /// <value>User&#39;s full name.</value>
        [DataMember(Name = "UserFullNameField", IsRequired = true, EmitDefaultValue = true)]
        public string UserFullNameField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetDocumentAuditResponseActivityField {\n");
            sb.Append("  ActionOrderField: ").Append(ActionOrderField).Append("\n");
            sb.Append("  AdditionalField: ").Append(AdditionalField).Append("\n");
            sb.Append("  DocIDField: ").Append(DocIDField).Append("\n");
            sb.Append("  EmailField: ").Append(EmailField).Append("\n");
            sb.Append("  EventDateField: ").Append(EventDateField).Append("\n");
            sb.Append("  EventField: ").Append(EventField).Append("\n");
            sb.Append("  EventStatusField: ").Append(EventStatusField).Append("\n");
            sb.Append("  LocationField: ").Append(LocationField).Append("\n");
            sb.Append("  OrderDateField: ").Append(OrderDateField).Append("\n");
            sb.Append("  PageField: ").Append(PageField).Append("\n");
            sb.Append("  UserFullNameField: ").Append(UserFullNameField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetDocumentAuditResponseActivityField);
        }

        /// <summary>
        /// Returns true if GetDocumentAuditResponseActivityField instances are equal
        /// </summary>
        /// <param name="input">Instance of GetDocumentAuditResponseActivityField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetDocumentAuditResponseActivityField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActionOrderField == input.ActionOrderField ||
                    (this.ActionOrderField != null &&
                    this.ActionOrderField.Equals(input.ActionOrderField))
                ) && 
                (
                    this.AdditionalField == input.AdditionalField ||
                    (this.AdditionalField != null &&
                    this.AdditionalField.Equals(input.AdditionalField))
                ) && 
                (
                    this.DocIDField == input.DocIDField ||
                    (this.DocIDField != null &&
                    this.DocIDField.Equals(input.DocIDField))
                ) && 
                (
                    this.EmailField == input.EmailField ||
                    (this.EmailField != null &&
                    this.EmailField.Equals(input.EmailField))
                ) && 
                (
                    this.EventDateField == input.EventDateField ||
                    (this.EventDateField != null &&
                    this.EventDateField.Equals(input.EventDateField))
                ) && 
                (
                    this.EventField == input.EventField ||
                    (this.EventField != null &&
                    this.EventField.Equals(input.EventField))
                ) && 
                (
                    this.EventStatusField == input.EventStatusField ||
                    (this.EventStatusField != null &&
                    this.EventStatusField.Equals(input.EventStatusField))
                ) && 
                (
                    this.LocationField == input.LocationField ||
                    (this.LocationField != null &&
                    this.LocationField.Equals(input.LocationField))
                ) && 
                (
                    this.OrderDateField == input.OrderDateField ||
                    (this.OrderDateField != null &&
                    this.OrderDateField.Equals(input.OrderDateField))
                ) && 
                (
                    this.PageField == input.PageField ||
                    (this.PageField != null &&
                    this.PageField.Equals(input.PageField))
                ) && 
                (
                    this.UserFullNameField == input.UserFullNameField ||
                    (this.UserFullNameField != null &&
                    this.UserFullNameField.Equals(input.UserFullNameField))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActionOrderField != null)
                    hashCode = hashCode * 59 + this.ActionOrderField.GetHashCode();
                if (this.AdditionalField != null)
                    hashCode = hashCode * 59 + this.AdditionalField.GetHashCode();
                if (this.DocIDField != null)
                    hashCode = hashCode * 59 + this.DocIDField.GetHashCode();
                if (this.EmailField != null)
                    hashCode = hashCode * 59 + this.EmailField.GetHashCode();
                if (this.EventDateField != null)
                    hashCode = hashCode * 59 + this.EventDateField.GetHashCode();
                if (this.EventField != null)
                    hashCode = hashCode * 59 + this.EventField.GetHashCode();
                if (this.EventStatusField != null)
                    hashCode = hashCode * 59 + this.EventStatusField.GetHashCode();
                if (this.LocationField != null)
                    hashCode = hashCode * 59 + this.LocationField.GetHashCode();
                if (this.OrderDateField != null)
                    hashCode = hashCode * 59 + this.OrderDateField.GetHashCode();
                if (this.PageField != null)
                    hashCode = hashCode * 59 + this.PageField.GetHashCode();
                if (this.UserFullNameField != null)
                    hashCode = hashCode * 59 + this.UserFullNameField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ActionOrderField (string) minLength
            if(this.ActionOrderField != null && this.ActionOrderField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ActionOrderField, length must be greater than 1.", new [] { "ActionOrderField" });
            }

            // AdditionalField (string) minLength
            if(this.AdditionalField != null && this.AdditionalField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdditionalField, length must be greater than 1.", new [] { "AdditionalField" });
            }

            // DocIDField (string) minLength
            if(this.DocIDField != null && this.DocIDField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocIDField, length must be greater than 1.", new [] { "DocIDField" });
            }

            // EmailField (string) minLength
            if(this.EmailField != null && this.EmailField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailField, length must be greater than 1.", new [] { "EmailField" });
            }

            // EventDateField (string) minLength
            if(this.EventDateField != null && this.EventDateField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventDateField, length must be greater than 1.", new [] { "EventDateField" });
            }

            // EventField (string) minLength
            if(this.EventField != null && this.EventField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventField, length must be greater than 1.", new [] { "EventField" });
            }

            // EventStatusField (string) minLength
            if(this.EventStatusField != null && this.EventStatusField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EventStatusField, length must be greater than 1.", new [] { "EventStatusField" });
            }

            // LocationField (string) minLength
            if(this.LocationField != null && this.LocationField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocationField, length must be greater than 1.", new [] { "LocationField" });
            }

            // OrderDateField (string) minLength
            if(this.OrderDateField != null && this.OrderDateField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderDateField, length must be greater than 1.", new [] { "OrderDateField" });
            }

            // PageField (string) minLength
            if(this.PageField != null && this.PageField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PageField, length must be greater than 1.", new [] { "PageField" });
            }

            // UserFullNameField (string) minLength
            if(this.UserFullNameField != null && this.UserFullNameField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserFullNameField, length must be greater than 1.", new [] { "UserFullNameField" });
            }

            yield break;
        }
    }

}
