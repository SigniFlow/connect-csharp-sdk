/*
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigniFlow.Connect.Client.OpenAPIDateConverter;

namespace SigniFlow.Connect.Model
{
    /// <summary>
    /// GetDocumentTagFieldPositionResponseDocumentTagFieldsPositionField
    /// </summary>
    [DataContract(Name = "GetDocumentTagFieldPositionResponse_DocumentTagFieldsPositionField")]
    public partial class GetDocumentTagFieldPositionResponseDocumentTagFieldsPositionField : IEquatable<GetDocumentTagFieldPositionResponseDocumentTagFieldsPositionField>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDocumentTagFieldPositionResponseDocumentTagFieldsPositionField" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetDocumentTagFieldPositionResponseDocumentTagFieldsPositionField() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDocumentTagFieldPositionResponseDocumentTagFieldsPositionField" /> class.
        /// </summary>
        /// <param name="pageNumberField">The page number where the field is. (required).</param>
        /// <param name="xCoordinateField">The y coordinates of the field. (required).</param>
        /// <param name="yCoordinateField">The x coordinates of the field. (required).</param>
        public GetDocumentTagFieldPositionResponseDocumentTagFieldsPositionField(decimal pageNumberField = default(decimal), string xCoordinateField = default(string), string yCoordinateField = default(string))
        {
            this.PageNumberField = pageNumberField;
            // to ensure "xCoordinateField" is required (not null)
            this.XCoordinateField = xCoordinateField ?? throw new ArgumentNullException("xCoordinateField is a required property for GetDocumentTagFieldPositionResponseDocumentTagFieldsPositionField and cannot be null");
            // to ensure "yCoordinateField" is required (not null)
            this.YCoordinateField = yCoordinateField ?? throw new ArgumentNullException("yCoordinateField is a required property for GetDocumentTagFieldPositionResponseDocumentTagFieldsPositionField and cannot be null");
        }

        /// <summary>
        /// The page number where the field is.
        /// </summary>
        /// <value>The page number where the field is.</value>
        [DataMember(Name = "PageNumberField", IsRequired = true, EmitDefaultValue = false)]
        public decimal PageNumberField { get; set; }

        /// <summary>
        /// The y coordinates of the field.
        /// </summary>
        /// <value>The y coordinates of the field.</value>
        [DataMember(Name = "XCoordinateField", IsRequired = true, EmitDefaultValue = false)]
        public string XCoordinateField { get; set; }

        /// <summary>
        /// The x coordinates of the field.
        /// </summary>
        /// <value>The x coordinates of the field.</value>
        [DataMember(Name = "YCoordinateField", IsRequired = true, EmitDefaultValue = false)]
        public string YCoordinateField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetDocumentTagFieldPositionResponseDocumentTagFieldsPositionField {\n");
            sb.Append("  PageNumberField: ").Append(PageNumberField).Append("\n");
            sb.Append("  XCoordinateField: ").Append(XCoordinateField).Append("\n");
            sb.Append("  YCoordinateField: ").Append(YCoordinateField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetDocumentTagFieldPositionResponseDocumentTagFieldsPositionField);
        }

        /// <summary>
        /// Returns true if GetDocumentTagFieldPositionResponseDocumentTagFieldsPositionField instances are equal
        /// </summary>
        /// <param name="input">Instance of GetDocumentTagFieldPositionResponseDocumentTagFieldsPositionField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetDocumentTagFieldPositionResponseDocumentTagFieldsPositionField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PageNumberField == input.PageNumberField ||
                    this.PageNumberField.Equals(input.PageNumberField)
                ) && 
                (
                    this.XCoordinateField == input.XCoordinateField ||
                    (this.XCoordinateField != null &&
                    this.XCoordinateField.Equals(input.XCoordinateField))
                ) && 
                (
                    this.YCoordinateField == input.YCoordinateField ||
                    (this.YCoordinateField != null &&
                    this.YCoordinateField.Equals(input.YCoordinateField))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.PageNumberField.GetHashCode();
                if (this.XCoordinateField != null)
                    hashCode = hashCode * 59 + this.XCoordinateField.GetHashCode();
                if (this.YCoordinateField != null)
                    hashCode = hashCode * 59 + this.YCoordinateField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // XCoordinateField (string) minLength
            if(this.XCoordinateField != null && this.XCoordinateField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for XCoordinateField, length must be greater than 1.", new [] { "XCoordinateField" });
            }

            // YCoordinateField (string) minLength
            if(this.YCoordinateField != null && this.YCoordinateField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for YCoordinateField, length must be greater than 1.", new [] { "YCoordinateField" });
            }

            yield break;
        }
    }

}
