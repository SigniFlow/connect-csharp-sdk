/*
 * WorkFlow API
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigniFlow.Connect.Client.OpenAPIDateConverter;

namespace SigniFlow.Connect.Model
{
    /// <summary>
    /// #### The request sent to create a document workflow.
    /// </summary>
    [DataContract(Name = "CreateWorkflowRequest")]
    public partial class CreateWorkflowRequest : IEquatable<CreateWorkflowRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets AutoExpireField
        /// </summary>
        [DataMember(Name = "AutoExpireField", EmitDefaultValue = true)]
        public AutoExpire? AutoExpireField { get; set; }
        /// <summary>
        /// Gets or Sets AutoRemindField
        /// </summary>
        [DataMember(Name = "AutoRemindField", IsRequired = true, EmitDefaultValue = true)]
        public AutoRemind AutoRemindField { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionField
        /// </summary>
        [DataMember(Name = "ExtensionField", IsRequired = true, EmitDefaultValue = true)]
        public DocExtension ExtensionField { get; set; }
        /// <summary>
        /// Gets or Sets PriorityField
        /// </summary>
        [DataMember(Name = "PriorityField", IsRequired = true, EmitDefaultValue = true)]
        public Priority PriorityField { get; set; }
//    
//    
//        /// <summary>
//        /// Initializes a new instance of the <see cref="CreateWorkflowRequest" /> class.
//        /// </summary>
//        [JsonConstructorAttribute]
//        
//        protected CreateWorkflowRequest() { }
//        
//        
//    
//    
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateWorkflowRequest" /> class.
        /// </summary>
        /// <param name="additionalDataField">Sets additional data to be embedded in PDF Meta..</param>
        /// <param name="autoExpireField">autoExpireField.</param>
        /// <param name="autoRemindField">autoRemindField (required).</param>
        /// <param name="docField">Base64 Encoded String of document (required).</param>
        /// <param name="docNameField">Name of document to display in SigniFlow (required).</param>
        /// <param name="dueDateField">Due date for the document, use in conjunction with Auto Expire..</param>
        /// <param name="extensionField">extensionField (required).</param>
        /// <param name="messageField">Custom message to display to participants.</param>
        /// <param name="priorityField">priorityField (required).</param>
        /// <param name="sLAField">Deprecated field, Pass 0 (default to 0).</param>
        /// <param name="tokenField">tokenField (required).</param>
        public CreateWorkflowRequest(string additionalDataField = default(string), AutoExpire? autoExpireField = default(AutoExpire?), AutoRemind autoRemindField = default(AutoRemind), string docField = default(string), string docNameField = default(string), DateTime? dueDateField = default(DateTime?), DocExtension extensionField = default(DocExtension), string messageField = default(string), Priority priorityField = default(Priority), int sLAField = 0, TokenField tokenField = default(TokenField))
        {
            this.AutoRemindField = autoRemindField;
            // to ensure "docField" is required (not null)
            this.DocField = docField ?? throw new ArgumentNullException("docField is a required property for CreateWorkflowRequest and cannot be null");
            // to ensure "docNameField" is required (not null)
            this.DocNameField = docNameField ?? throw new ArgumentNullException("docNameField is a required property for CreateWorkflowRequest and cannot be null");
            this.ExtensionField = extensionField;
            this.PriorityField = priorityField;
            // to ensure "tokenField" is required (not null)
            this.TokenField = tokenField ?? throw new ArgumentNullException("tokenField is a required property for CreateWorkflowRequest and cannot be null");
            this.AdditionalDataField = additionalDataField;
            this.AutoExpireField = autoExpireField;
            this.DueDateField = dueDateField;
            this.MessageField = messageField;
            this.SLAField = sLAField;
        }

        /// <summary>
        /// Sets additional data to be embedded in PDF Meta.
        /// </summary>
        /// <value>Sets additional data to be embedded in PDF Meta.</value>
        [DataMember(Name = "AdditionalDataField", EmitDefaultValue = true)]
        public string AdditionalDataField { get; set; }

        /// <summary>
        /// Base64 Encoded String of document
        /// </summary>
        /// <value>Base64 Encoded String of document</value>
        [DataMember(Name = "DocField", IsRequired = true, EmitDefaultValue = true)]
        public string DocField { get; set; }

        /// <summary>
        /// Name of document to display in SigniFlow
        /// </summary>
        /// <value>Name of document to display in SigniFlow</value>
        [DataMember(Name = "DocNameField", IsRequired = true, EmitDefaultValue = true)]
        public string DocNameField { get; set; }

        /// <summary>
        /// Due date for the document, use in conjunction with Auto Expire.
        /// </summary>
        /// <value>Due date for the document, use in conjunction with Auto Expire.</value>
        [DataMember(Name = "DueDateField", EmitDefaultValue = true)]
        public DateTime? DueDateField { get; set; }

        /// <summary>
        /// Custom message to display to participants
        /// </summary>
        /// <value>Custom message to display to participants</value>
        [DataMember(Name = "MessageField", EmitDefaultValue = true)]
        public string MessageField { get; set; }

        /// <summary>
        /// Deprecated field, Pass 0
        /// </summary>
        /// <value>Deprecated field, Pass 0</value>
        [DataMember(Name = "SLAField", EmitDefaultValue = true)]
        public int SLAField { get; set; }

        /// <summary>
        /// Gets or Sets TokenField
        /// </summary>
        [DataMember(Name = "TokenField", IsRequired = true, EmitDefaultValue = true)]
        public TokenField TokenField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateWorkflowRequest {\n");
            sb.Append("  AdditionalDataField: ").Append(AdditionalDataField).Append("\n");
            sb.Append("  AutoExpireField: ").Append(AutoExpireField).Append("\n");
            sb.Append("  AutoRemindField: ").Append(AutoRemindField).Append("\n");
            sb.Append("  DocField: ").Append(DocField).Append("\n");
            sb.Append("  DocNameField: ").Append(DocNameField).Append("\n");
            sb.Append("  DueDateField: ").Append(DueDateField).Append("\n");
            sb.Append("  ExtensionField: ").Append(ExtensionField).Append("\n");
            sb.Append("  MessageField: ").Append(MessageField).Append("\n");
            sb.Append("  PriorityField: ").Append(PriorityField).Append("\n");
            sb.Append("  SLAField: ").Append(SLAField).Append("\n");
            sb.Append("  TokenField: ").Append(TokenField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateWorkflowRequest);
        }

        /// <summary>
        /// Returns true if CreateWorkflowRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateWorkflowRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateWorkflowRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalDataField == input.AdditionalDataField ||
                    (this.AdditionalDataField != null &&
                    this.AdditionalDataField.Equals(input.AdditionalDataField))
                ) && 
                (
                    this.AutoExpireField == input.AutoExpireField ||
                    this.AutoExpireField.Equals(input.AutoExpireField)
                ) && 
                (
                    this.AutoRemindField == input.AutoRemindField ||
                    this.AutoRemindField.Equals(input.AutoRemindField)
                ) && 
                (
                    this.DocField == input.DocField ||
                    (this.DocField != null &&
                    this.DocField.Equals(input.DocField))
                ) && 
                (
                    this.DocNameField == input.DocNameField ||
                    (this.DocNameField != null &&
                    this.DocNameField.Equals(input.DocNameField))
                ) && 
                (
                    this.DueDateField == input.DueDateField ||
                    (this.DueDateField != null &&
                    this.DueDateField.Equals(input.DueDateField))
                ) && 
                (
                    this.ExtensionField == input.ExtensionField ||
                    this.ExtensionField.Equals(input.ExtensionField)
                ) && 
                (
                    this.MessageField == input.MessageField ||
                    (this.MessageField != null &&
                    this.MessageField.Equals(input.MessageField))
                ) && 
                (
                    this.PriorityField == input.PriorityField ||
                    this.PriorityField.Equals(input.PriorityField)
                ) && 
                (
                    this.SLAField == input.SLAField ||
                    this.SLAField.Equals(input.SLAField)
                ) && 
                (
                    this.TokenField == input.TokenField ||
                    (this.TokenField != null &&
                    this.TokenField.Equals(input.TokenField))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalDataField != null)
                    hashCode = hashCode * 59 + this.AdditionalDataField.GetHashCode();
                hashCode = hashCode * 59 + this.AutoExpireField.GetHashCode();
                hashCode = hashCode * 59 + this.AutoRemindField.GetHashCode();
                if (this.DocField != null)
                    hashCode = hashCode * 59 + this.DocField.GetHashCode();
                if (this.DocNameField != null)
                    hashCode = hashCode * 59 + this.DocNameField.GetHashCode();
                if (this.DueDateField != null)
                    hashCode = hashCode * 59 + this.DueDateField.GetHashCode();
                hashCode = hashCode * 59 + this.ExtensionField.GetHashCode();
                if (this.MessageField != null)
                    hashCode = hashCode * 59 + this.MessageField.GetHashCode();
                hashCode = hashCode * 59 + this.PriorityField.GetHashCode();
                hashCode = hashCode * 59 + this.SLAField.GetHashCode();
                if (this.TokenField != null)
                    hashCode = hashCode * 59 + this.TokenField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SLAField (int) maximum
            if(this.SLAField > (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SLAField, must be a value less than or equal to 0.", new [] { "SLAField" });
            }

            // SLAField (int) minimum
            if(this.SLAField < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SLAField, must be a value greater than or equal to 0.", new [] { "SLAField" });
            }

            yield break;
        }
    }

}
