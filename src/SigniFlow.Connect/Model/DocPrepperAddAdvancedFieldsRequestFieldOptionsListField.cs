/*
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigniFlow.Connect.Client.OpenAPIDateConverter;

namespace SigniFlow.Connect.Model
{
    /// <summary>
    /// DocPrepperAddAdvancedFieldsRequestFieldOptionsListField
    /// </summary>
    [DataContract]
    public partial class DocPrepperAddAdvancedFieldsRequestFieldOptionsListField :  IEquatable<DocPrepperAddAdvancedFieldsRequestFieldOptionsListField>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocPrepperAddAdvancedFieldsRequestFieldOptionsListField" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocPrepperAddAdvancedFieldsRequestFieldOptionsListField() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocPrepperAddAdvancedFieldsRequestFieldOptionsListField" /> class.
        /// </summary>
        /// <param name="linkedValueField">linkedValueField (required).</param>
        /// <param name="maxField">Max amount field. (required).</param>
        /// <param name="minField">Min amount field (required).</param>
        /// <param name="valueField">valueField (required).</param>
        public DocPrepperAddAdvancedFieldsRequestFieldOptionsListField(string linkedValueField = default(string), decimal maxField = default(decimal), decimal minField = default(decimal), string valueField = default(string))
        {
            // to ensure "linkedValueField" is required (not null)
            if (linkedValueField == null)
            {
                throw new InvalidDataException("linkedValueField is a required property for DocPrepperAddAdvancedFieldsRequestFieldOptionsListField and cannot be null");
            }
            else
            {
                this.LinkedValueField = linkedValueField;
            }

            // to ensure "maxField" is required (not null)
            if (maxField == null)
            {
                throw new InvalidDataException("maxField is a required property for DocPrepperAddAdvancedFieldsRequestFieldOptionsListField and cannot be null");
            }
            else
            {
                this.MaxField = maxField;
            }

            // to ensure "minField" is required (not null)
            if (minField == null)
            {
                throw new InvalidDataException("minField is a required property for DocPrepperAddAdvancedFieldsRequestFieldOptionsListField and cannot be null");
            }
            else
            {
                this.MinField = minField;
            }

            // to ensure "valueField" is required (not null)
            if (valueField == null)
            {
                throw new InvalidDataException("valueField is a required property for DocPrepperAddAdvancedFieldsRequestFieldOptionsListField and cannot be null");
            }
            else
            {
                this.ValueField = valueField;
            }

        }

        /// <summary>
        /// Gets or Sets LinkedValueField
        /// </summary>
        [DataMember(Name="LinkedValueField", EmitDefaultValue=true)]
        public string LinkedValueField { get; set; }

        /// <summary>
        /// Max amount field.
        /// </summary>
        /// <value>Max amount field.</value>
        [DataMember(Name="MaxField", EmitDefaultValue=true)]
        public decimal MaxField { get; set; }

        /// <summary>
        /// Min amount field
        /// </summary>
        /// <value>Min amount field</value>
        [DataMember(Name="MinField", EmitDefaultValue=true)]
        public decimal MinField { get; set; }

        /// <summary>
        /// Gets or Sets ValueField
        /// </summary>
        [DataMember(Name="ValueField", EmitDefaultValue=true)]
        public string ValueField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocPrepperAddAdvancedFieldsRequestFieldOptionsListField {\n");
            sb.Append("  LinkedValueField: ").Append(LinkedValueField).Append("\n");
            sb.Append("  MaxField: ").Append(MaxField).Append("\n");
            sb.Append("  MinField: ").Append(MinField).Append("\n");
            sb.Append("  ValueField: ").Append(ValueField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocPrepperAddAdvancedFieldsRequestFieldOptionsListField);
        }

        /// <summary>
        /// Returns true if DocPrepperAddAdvancedFieldsRequestFieldOptionsListField instances are equal
        /// </summary>
        /// <param name="input">Instance of DocPrepperAddAdvancedFieldsRequestFieldOptionsListField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocPrepperAddAdvancedFieldsRequestFieldOptionsListField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LinkedValueField == input.LinkedValueField ||
                    (this.LinkedValueField != null &&
                    this.LinkedValueField.Equals(input.LinkedValueField))
                ) && 
                (
                    this.MaxField == input.MaxField ||
                    (this.MaxField != null &&
                    this.MaxField.Equals(input.MaxField))
                ) && 
                (
                    this.MinField == input.MinField ||
                    (this.MinField != null &&
                    this.MinField.Equals(input.MinField))
                ) && 
                (
                    this.ValueField == input.ValueField ||
                    (this.ValueField != null &&
                    this.ValueField.Equals(input.ValueField))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LinkedValueField != null)
                    hashCode = hashCode * 59 + this.LinkedValueField.GetHashCode();
                if (this.MaxField != null)
                    hashCode = hashCode * 59 + this.MaxField.GetHashCode();
                if (this.MinField != null)
                    hashCode = hashCode * 59 + this.MinField.GetHashCode();
                if (this.ValueField != null)
                    hashCode = hashCode * 59 + this.ValueField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // LinkedValueField (string) minLength
            if(this.LinkedValueField != null && this.LinkedValueField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LinkedValueField, length must be greater than 1.", new [] { "LinkedValueField" });
            }
 

            // ValueField (string) minLength
            if(this.ValueField != null && this.ValueField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ValueField, length must be greater than 1.", new [] { "ValueField" });
            }
 
            yield break;
        }
    }

}
