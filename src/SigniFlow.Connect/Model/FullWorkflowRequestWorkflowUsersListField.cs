/*
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigniFlow.Connect.Client.OpenAPIDateConverter;

namespace SigniFlow.Connect.Model
{
    /// <summary>
    /// FullWorkflowRequestWorkflowUsersListField
    /// </summary>
    [DataContract(Name = "FullWorkflowRequest_WorkflowUsersListField")]
    public partial class FullWorkflowRequestWorkflowUsersListField : IEquatable<FullWorkflowRequestWorkflowUsersListField>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ActionField
        /// </summary>
        [DataMember(Name = "ActionField", IsRequired = true, EmitDefaultValue = true)]
        public ActionField ActionField { get; set; }
        /// <summary>
        /// Gets or Sets AllowProxyField
        /// </summary>
        [DataMember(Name = "AllowProxyField", IsRequired = true, EmitDefaultValue = true)]
        public ProxyAllowedField AllowProxyField { get; set; }
//    
//    
//        /// <summary>
//        /// Initializes a new instance of the <see cref="FullWorkflowRequestWorkflowUsersListField" /> class.
//        /// </summary>
//        [JsonConstructorAttribute]
//        
//        protected FullWorkflowRequestWorkflowUsersListField() { }
//        
//        
//    
//    
        /// <summary>
        /// Initializes a new instance of the <see cref="FullWorkflowRequestWorkflowUsersListField" /> class.
        /// </summary>
        /// <param name="actionField">actionField (required).</param>
        /// <param name="allowProxyField">allowProxyField (required).</param>
        /// <param name="autoSignField">### Enable auto sign.  &#x60;True &#x3D; Signature will be applied automaticly False &#x3D; User will need to login and Sign&#x60;  (required).</param>
        /// <param name="emailAddressField">Workflow user&#39;s email addresses. (required).</param>
        /// <param name="groupStepField">groupStepField.</param>
        /// <param name="languageCodeField">#### Sets the display language for the user ##### ISO 2 Digit Code  &#x60;en &#x3D; English es &#x3D; Spanish fr &#x3D; French&#x60;  (required).</param>
        /// <param name="latitudeField">The current GPS lattitude location where the signing is taking place from. Needs to be paired with the longitude field..</param>
        /// <param name="longitudeField">The current GPS longitudelocation where the signing is taking place from. Needs to be paired with the lattitude field..</param>
        /// <param name="mobileNumberField">Group user&#39;s mobile number. (required).</param>
        /// <param name="preloadedFaceToFaceSignersField">Preloaded user&#39;s who will be using the face to face signature field..</param>
        /// <param name="signReasonField">Reason for signature..</param>
        /// <param name="signerPasswordField">Face to face user&#39;s password..</param>
        /// <param name="userFirstNameField">Face to face user&#39;s first name. (required).</param>
        /// <param name="userFullNameField">Face to face user&#39;s full name. (required).</param>
        /// <param name="userLastNameField">Face to face user&#39;s last name. (required).</param>
        /// <param name="workflowUserFieldsField">The list of the workflowed documents field..</param>
        public FullWorkflowRequestWorkflowUsersListField(ActionField actionField = default(ActionField), ProxyAllowedField allowProxyField = default(ProxyAllowedField), bool autoSignField = default(bool), string emailAddressField = default(string), FullWorkflowRequestGroupStepField groupStepField = default(FullWorkflowRequestGroupStepField), string languageCodeField = default(string), string latitudeField = default(string), string longitudeField = default(string), string mobileNumberField = default(string), List<Object> preloadedFaceToFaceSignersField = default(List<Object>), string signReasonField = default(string), string signerPasswordField = default(string), string userFirstNameField = default(string), string userFullNameField = default(string), string userLastNameField = default(string), List<FullWorkflowRequestWorkflowUserFieldsField> workflowUserFieldsField = default(List<FullWorkflowRequestWorkflowUserFieldsField>))
        {
            this.ActionField = actionField;
            this.AllowProxyField = allowProxyField;
            this.AutoSignField = autoSignField;
            // to ensure "emailAddressField" is required (not null)
            this.EmailAddressField = emailAddressField ?? throw new ArgumentNullException("emailAddressField is a required property for FullWorkflowRequestWorkflowUsersListField and cannot be null");
            // to ensure "languageCodeField" is required (not null)
            this.LanguageCodeField = languageCodeField ?? throw new ArgumentNullException("languageCodeField is a required property for FullWorkflowRequestWorkflowUsersListField and cannot be null");
            // to ensure "mobileNumberField" is required (not null)
            this.MobileNumberField = mobileNumberField ?? throw new ArgumentNullException("mobileNumberField is a required property for FullWorkflowRequestWorkflowUsersListField and cannot be null");
            // to ensure "userFirstNameField" is required (not null)
            this.UserFirstNameField = userFirstNameField ?? throw new ArgumentNullException("userFirstNameField is a required property for FullWorkflowRequestWorkflowUsersListField and cannot be null");
            // to ensure "userFullNameField" is required (not null)
            this.UserFullNameField = userFullNameField ?? throw new ArgumentNullException("userFullNameField is a required property for FullWorkflowRequestWorkflowUsersListField and cannot be null");
            // to ensure "userLastNameField" is required (not null)
            this.UserLastNameField = userLastNameField ?? throw new ArgumentNullException("userLastNameField is a required property for FullWorkflowRequestWorkflowUsersListField and cannot be null");
            this.GroupStepField = groupStepField;
            this.LatitudeField = latitudeField;
            this.LongitudeField = longitudeField;
            this.PreloadedFaceToFaceSignersField = preloadedFaceToFaceSignersField;
            this.SignReasonField = signReasonField;
            this.SignerPasswordField = signerPasswordField;
            this.WorkflowUserFieldsField = workflowUserFieldsField;
        }

        /// <summary>
        /// ### Enable auto sign.  &#x60;True &#x3D; Signature will be applied automaticly False &#x3D; User will need to login and Sign&#x60; 
        /// </summary>
        /// <value>### Enable auto sign.  &#x60;True &#x3D; Signature will be applied automaticly False &#x3D; User will need to login and Sign&#x60; </value>
        [DataMember(Name = "AutoSignField", IsRequired = true, EmitDefaultValue = true)]
        public bool AutoSignField { get; set; }

        /// <summary>
        /// Workflow user&#39;s email addresses.
        /// </summary>
        /// <value>Workflow user&#39;s email addresses.</value>
        [DataMember(Name = "EmailAddressField", IsRequired = true, EmitDefaultValue = true)]
        public string EmailAddressField { get; set; }

        /// <summary>
        /// Gets or Sets GroupStepField
        /// </summary>
        [DataMember(Name = "GroupStepField", EmitDefaultValue = true)]
        public FullWorkflowRequestGroupStepField GroupStepField { get; set; }

        /// <summary>
        /// #### Sets the display language for the user ##### ISO 2 Digit Code  &#x60;en &#x3D; English es &#x3D; Spanish fr &#x3D; French&#x60; 
        /// </summary>
        /// <value>#### Sets the display language for the user ##### ISO 2 Digit Code  &#x60;en &#x3D; English es &#x3D; Spanish fr &#x3D; French&#x60; </value>
        [DataMember(Name = "LanguageCodeField", IsRequired = true, EmitDefaultValue = true)]
        public string LanguageCodeField { get; set; }

        /// <summary>
        /// The current GPS lattitude location where the signing is taking place from. Needs to be paired with the longitude field.
        /// </summary>
        /// <value>The current GPS lattitude location where the signing is taking place from. Needs to be paired with the longitude field.</value>
        [DataMember(Name = "LatitudeField", EmitDefaultValue = true)]
        public string LatitudeField { get; set; }

        /// <summary>
        /// The current GPS longitudelocation where the signing is taking place from. Needs to be paired with the lattitude field.
        /// </summary>
        /// <value>The current GPS longitudelocation where the signing is taking place from. Needs to be paired with the lattitude field.</value>
        [DataMember(Name = "LongitudeField", EmitDefaultValue = true)]
        public string LongitudeField { get; set; }

        /// <summary>
        /// Group user&#39;s mobile number.
        /// </summary>
        /// <value>Group user&#39;s mobile number.</value>
        [DataMember(Name = "MobileNumberField", IsRequired = true, EmitDefaultValue = true)]
        public string MobileNumberField { get; set; }

        /// <summary>
        /// Preloaded user&#39;s who will be using the face to face signature field.
        /// </summary>
        /// <value>Preloaded user&#39;s who will be using the face to face signature field.</value>
        [DataMember(Name = "PreloadedFaceToFaceSignersField", EmitDefaultValue = true)]
        public List<Object> PreloadedFaceToFaceSignersField { get; set; }

        /// <summary>
        /// Reason for signature.
        /// </summary>
        /// <value>Reason for signature.</value>
        [DataMember(Name = "SignReasonField", EmitDefaultValue = true)]
        public string SignReasonField { get; set; }

        /// <summary>
        /// Face to face user&#39;s password.
        /// </summary>
        /// <value>Face to face user&#39;s password.</value>
        [DataMember(Name = "SignerPasswordField", EmitDefaultValue = true)]
        public string SignerPasswordField { get; set; }

        /// <summary>
        /// Face to face user&#39;s first name.
        /// </summary>
        /// <value>Face to face user&#39;s first name.</value>
        [DataMember(Name = "UserFirstNameField", IsRequired = true, EmitDefaultValue = true)]
        public string UserFirstNameField { get; set; }

        /// <summary>
        /// Face to face user&#39;s full name.
        /// </summary>
        /// <value>Face to face user&#39;s full name.</value>
        [DataMember(Name = "UserFullNameField", IsRequired = true, EmitDefaultValue = true)]
        public string UserFullNameField { get; set; }

        /// <summary>
        /// Face to face user&#39;s last name.
        /// </summary>
        /// <value>Face to face user&#39;s last name.</value>
        [DataMember(Name = "UserLastNameField", IsRequired = true, EmitDefaultValue = true)]
        public string UserLastNameField { get; set; }

        /// <summary>
        /// The list of the workflowed documents field.
        /// </summary>
        /// <value>The list of the workflowed documents field.</value>
        [DataMember(Name = "WorkflowUserFieldsField", EmitDefaultValue = true)]
        public List<FullWorkflowRequestWorkflowUserFieldsField> WorkflowUserFieldsField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FullWorkflowRequestWorkflowUsersListField {\n");
            sb.Append("  ActionField: ").Append(ActionField).Append("\n");
            sb.Append("  AllowProxyField: ").Append(AllowProxyField).Append("\n");
            sb.Append("  AutoSignField: ").Append(AutoSignField).Append("\n");
            sb.Append("  EmailAddressField: ").Append(EmailAddressField).Append("\n");
            sb.Append("  GroupStepField: ").Append(GroupStepField).Append("\n");
            sb.Append("  LanguageCodeField: ").Append(LanguageCodeField).Append("\n");
            sb.Append("  LatitudeField: ").Append(LatitudeField).Append("\n");
            sb.Append("  LongitudeField: ").Append(LongitudeField).Append("\n");
            sb.Append("  MobileNumberField: ").Append(MobileNumberField).Append("\n");
            sb.Append("  PreloadedFaceToFaceSignersField: ").Append(PreloadedFaceToFaceSignersField).Append("\n");
            sb.Append("  SignReasonField: ").Append(SignReasonField).Append("\n");
            sb.Append("  SignerPasswordField: ").Append(SignerPasswordField).Append("\n");
            sb.Append("  UserFirstNameField: ").Append(UserFirstNameField).Append("\n");
            sb.Append("  UserFullNameField: ").Append(UserFullNameField).Append("\n");
            sb.Append("  UserLastNameField: ").Append(UserLastNameField).Append("\n");
            sb.Append("  WorkflowUserFieldsField: ").Append(WorkflowUserFieldsField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FullWorkflowRequestWorkflowUsersListField);
        }

        /// <summary>
        /// Returns true if FullWorkflowRequestWorkflowUsersListField instances are equal
        /// </summary>
        /// <param name="input">Instance of FullWorkflowRequestWorkflowUsersListField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FullWorkflowRequestWorkflowUsersListField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActionField == input.ActionField ||
                    this.ActionField.Equals(input.ActionField)
                ) && 
                (
                    this.AllowProxyField == input.AllowProxyField ||
                    this.AllowProxyField.Equals(input.AllowProxyField)
                ) && 
                (
                    this.AutoSignField == input.AutoSignField ||
                    this.AutoSignField.Equals(input.AutoSignField)
                ) && 
                (
                    this.EmailAddressField == input.EmailAddressField ||
                    (this.EmailAddressField != null &&
                    this.EmailAddressField.Equals(input.EmailAddressField))
                ) && 
                (
                    this.GroupStepField == input.GroupStepField ||
                    (this.GroupStepField != null &&
                    this.GroupStepField.Equals(input.GroupStepField))
                ) && 
                (
                    this.LanguageCodeField == input.LanguageCodeField ||
                    (this.LanguageCodeField != null &&
                    this.LanguageCodeField.Equals(input.LanguageCodeField))
                ) && 
                (
                    this.LatitudeField == input.LatitudeField ||
                    (this.LatitudeField != null &&
                    this.LatitudeField.Equals(input.LatitudeField))
                ) && 
                (
                    this.LongitudeField == input.LongitudeField ||
                    (this.LongitudeField != null &&
                    this.LongitudeField.Equals(input.LongitudeField))
                ) && 
                (
                    this.MobileNumberField == input.MobileNumberField ||
                    (this.MobileNumberField != null &&
                    this.MobileNumberField.Equals(input.MobileNumberField))
                ) && 
                (
                    this.PreloadedFaceToFaceSignersField == input.PreloadedFaceToFaceSignersField ||
                    this.PreloadedFaceToFaceSignersField != null &&
                    input.PreloadedFaceToFaceSignersField != null &&
                    this.PreloadedFaceToFaceSignersField.SequenceEqual(input.PreloadedFaceToFaceSignersField)
                ) && 
                (
                    this.SignReasonField == input.SignReasonField ||
                    (this.SignReasonField != null &&
                    this.SignReasonField.Equals(input.SignReasonField))
                ) && 
                (
                    this.SignerPasswordField == input.SignerPasswordField ||
                    (this.SignerPasswordField != null &&
                    this.SignerPasswordField.Equals(input.SignerPasswordField))
                ) && 
                (
                    this.UserFirstNameField == input.UserFirstNameField ||
                    (this.UserFirstNameField != null &&
                    this.UserFirstNameField.Equals(input.UserFirstNameField))
                ) && 
                (
                    this.UserFullNameField == input.UserFullNameField ||
                    (this.UserFullNameField != null &&
                    this.UserFullNameField.Equals(input.UserFullNameField))
                ) && 
                (
                    this.UserLastNameField == input.UserLastNameField ||
                    (this.UserLastNameField != null &&
                    this.UserLastNameField.Equals(input.UserLastNameField))
                ) && 
                (
                    this.WorkflowUserFieldsField == input.WorkflowUserFieldsField ||
                    this.WorkflowUserFieldsField != null &&
                    input.WorkflowUserFieldsField != null &&
                    this.WorkflowUserFieldsField.SequenceEqual(input.WorkflowUserFieldsField)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ActionField.GetHashCode();
                hashCode = hashCode * 59 + this.AllowProxyField.GetHashCode();
                hashCode = hashCode * 59 + this.AutoSignField.GetHashCode();
                if (this.EmailAddressField != null)
                    hashCode = hashCode * 59 + this.EmailAddressField.GetHashCode();
                if (this.GroupStepField != null)
                    hashCode = hashCode * 59 + this.GroupStepField.GetHashCode();
                if (this.LanguageCodeField != null)
                    hashCode = hashCode * 59 + this.LanguageCodeField.GetHashCode();
                if (this.LatitudeField != null)
                    hashCode = hashCode * 59 + this.LatitudeField.GetHashCode();
                if (this.LongitudeField != null)
                    hashCode = hashCode * 59 + this.LongitudeField.GetHashCode();
                if (this.MobileNumberField != null)
                    hashCode = hashCode * 59 + this.MobileNumberField.GetHashCode();
                if (this.PreloadedFaceToFaceSignersField != null)
                    hashCode = hashCode * 59 + this.PreloadedFaceToFaceSignersField.GetHashCode();
                if (this.SignReasonField != null)
                    hashCode = hashCode * 59 + this.SignReasonField.GetHashCode();
                if (this.SignerPasswordField != null)
                    hashCode = hashCode * 59 + this.SignerPasswordField.GetHashCode();
                if (this.UserFirstNameField != null)
                    hashCode = hashCode * 59 + this.UserFirstNameField.GetHashCode();
                if (this.UserFullNameField != null)
                    hashCode = hashCode * 59 + this.UserFullNameField.GetHashCode();
                if (this.UserLastNameField != null)
                    hashCode = hashCode * 59 + this.UserLastNameField.GetHashCode();
                if (this.WorkflowUserFieldsField != null)
                    hashCode = hashCode * 59 + this.WorkflowUserFieldsField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EmailAddressField (string) minLength
            if(this.EmailAddressField != null && this.EmailAddressField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailAddressField, length must be greater than 1.", new [] { "EmailAddressField" });
            }

            // LanguageCodeField (string) minLength
            if(this.LanguageCodeField != null && this.LanguageCodeField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LanguageCodeField, length must be greater than 1.", new [] { "LanguageCodeField" });
            }

            // LatitudeField (string) minLength
            if(this.LatitudeField != null && this.LatitudeField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LatitudeField, length must be greater than 1.", new [] { "LatitudeField" });
            }

            // LongitudeField (string) minLength
            if(this.LongitudeField != null && this.LongitudeField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LongitudeField, length must be greater than 1.", new [] { "LongitudeField" });
            }

            // MobileNumberField (string) minLength
            if(this.MobileNumberField != null && this.MobileNumberField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MobileNumberField, length must be greater than 1.", new [] { "MobileNumberField" });
            }

            // SignReasonField (string) minLength
            if(this.SignReasonField != null && this.SignReasonField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SignReasonField, length must be greater than 1.", new [] { "SignReasonField" });
            }

            // SignerPasswordField (string) minLength
            if(this.SignerPasswordField != null && this.SignerPasswordField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SignerPasswordField, length must be greater than 1.", new [] { "SignerPasswordField" });
            }

            // UserFirstNameField (string) minLength
            if(this.UserFirstNameField != null && this.UserFirstNameField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserFirstNameField, length must be greater than 1.", new [] { "UserFirstNameField" });
            }

            // UserFullNameField (string) minLength
            if(this.UserFullNameField != null && this.UserFullNameField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserFullNameField, length must be greater than 1.", new [] { "UserFullNameField" });
            }

            // UserLastNameField (string) minLength
            if(this.UserLastNameField != null && this.UserLastNameField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserLastNameField, length must be greater than 1.", new [] { "UserLastNameField" });
            }

            yield break;
        }
    }

}
