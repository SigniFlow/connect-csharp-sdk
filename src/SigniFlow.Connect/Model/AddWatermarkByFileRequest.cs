/*
 * SigniFlow API
 *
 * API for adding watermarks to documents
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigniFlow.Connect.Client.OpenAPIDateConverter;

namespace SigniFlow.CertifyCeremonyAPI.Model
{
    /// <summary>
    /// AddWatermarkByFileRequest
    /// </summary>
    [DataContract(Name = "AddWatermarkByFileRequest")]
    public partial class AddWatermarkByFileRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddWatermarkByFileRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddWatermarkByFileRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddWatermarkByFileRequest" /> class.
        /// </summary>
        /// <param name="allPagesField">Apply watermark to all pages.</param>
        /// <param name="baseFileField">Base64 encoded file content or string content (required).</param>
        /// <param name="downloadFileNameField">Name of the file to be downloaded (required).</param>
        /// <param name="fillOpacityField">Opacity level of the watermark fill.</param>
        /// <param name="fontNameField">Font name for watermark text.</param>
        /// <param name="fontSizeField">Font size for watermark text.</param>
        /// <param name="pagesListField">List of page numbers to apply the watermark to.</param>
        /// <param name="strokeOpacityField">Opacity level of the watermark stroke.</param>
        /// <param name="textAngleField">Angle of the watermark text.</param>
        /// <param name="textRGBColorField">textRGBColorField.</param>
        /// <param name="tokenExpiryField">Token expiry date in /Date() format.</param>
        /// <param name="tokenField">Authentication token.</param>
        /// <param name="watermarkTextField">Text content for the watermark (required).</param>
        public AddWatermarkByFileRequest(bool allPagesField = default(bool), string baseFileField = default(string), string downloadFileNameField = default(string), decimal fillOpacityField = default(decimal), string fontNameField = default(string), decimal fontSizeField = default(decimal), List<int> pagesListField = default(List<int>), decimal strokeOpacityField = default(decimal), decimal textAngleField = default(decimal), AddWatermarkByFileRequestTextRGBColorField textRGBColorField = default(AddWatermarkByFileRequestTextRGBColorField), string tokenExpiryField = default(string), string tokenField = default(string), string watermarkTextField = default(string))
        {
            // to ensure "baseFileField" is required (not null)
            if (baseFileField == null)
            {
                throw new ArgumentNullException("baseFileField is a required property for AddWatermarkByFileRequest and cannot be null");
            }
            this.BaseFileField = baseFileField;
            // to ensure "downloadFileNameField" is required (not null)
            if (downloadFileNameField == null)
            {
                throw new ArgumentNullException("downloadFileNameField is a required property for AddWatermarkByFileRequest and cannot be null");
            }
            this.DownloadFileNameField = downloadFileNameField;
            // to ensure "watermarkTextField" is required (not null)
            if (watermarkTextField == null)
            {
                throw new ArgumentNullException("watermarkTextField is a required property for AddWatermarkByFileRequest and cannot be null");
            }
            this.WatermarkTextField = watermarkTextField;
            this.AllPagesField = allPagesField;
            this.FillOpacityField = fillOpacityField;
            this.FontNameField = fontNameField;
            this.FontSizeField = fontSizeField;
            this.PagesListField = pagesListField;
            this.StrokeOpacityField = strokeOpacityField;
            this.TextAngleField = textAngleField;
            this.TextRGBColorField = textRGBColorField;
            this.TokenExpiryField = tokenExpiryField;
            this.TokenField = tokenField;
        }

        /// <summary>
        /// Apply watermark to all pages
        /// </summary>
        /// <value>Apply watermark to all pages</value>
        [DataMember(Name = "AllPagesField", EmitDefaultValue = true)]
        public bool AllPagesField { get; set; }

        /// <summary>
        /// Base64 encoded file content or string content
        /// </summary>
        /// <value>Base64 encoded file content or string content</value>
        [DataMember(Name = "BaseFileField", IsRequired = true, EmitDefaultValue = true)]
        public string BaseFileField { get; set; }

        /// <summary>
        /// Name of the file to be downloaded
        /// </summary>
        /// <value>Name of the file to be downloaded</value>
        [DataMember(Name = "DownloadFileNameField", IsRequired = true, EmitDefaultValue = true)]
        public string DownloadFileNameField { get; set; }

        /// <summary>
        /// Opacity level of the watermark fill
        /// </summary>
        /// <value>Opacity level of the watermark fill</value>
        [DataMember(Name = "FillOpacityField", EmitDefaultValue = true)]
        public decimal FillOpacityField { get; set; }

        /// <summary>
        /// Font name for watermark text
        /// </summary>
        /// <value>Font name for watermark text</value>
        [DataMember(Name = "FontNameField", EmitDefaultValue = true)]
        public string FontNameField { get; set; }

        /// <summary>
        /// Font size for watermark text
        /// </summary>
        /// <value>Font size for watermark text</value>
        [DataMember(Name = "FontSizeField", EmitDefaultValue = true)]
        public decimal FontSizeField { get; set; }

        /// <summary>
        /// List of page numbers to apply the watermark to
        /// </summary>
        /// <value>List of page numbers to apply the watermark to</value>
        [DataMember(Name = "PagesListField", EmitDefaultValue = true)]
        public List<int> PagesListField { get; set; }

        /// <summary>
        /// Opacity level of the watermark stroke
        /// </summary>
        /// <value>Opacity level of the watermark stroke</value>
        [DataMember(Name = "StrokeOpacityField", EmitDefaultValue = true)]
        public decimal StrokeOpacityField { get; set; }

        /// <summary>
        /// Angle of the watermark text
        /// </summary>
        /// <value>Angle of the watermark text</value>
        [DataMember(Name = "TextAngleField", EmitDefaultValue = true)]
        public decimal TextAngleField { get; set; }

        /// <summary>
        /// Gets or Sets TextRGBColorField
        /// </summary>
        [DataMember(Name = "TextRGBColorField", EmitDefaultValue = true)]
        public AddWatermarkByFileRequestTextRGBColorField TextRGBColorField { get; set; }

        /// <summary>
        /// Token expiry date in /Date() format
        /// </summary>
        /// <value>Token expiry date in /Date() format</value>
        [DataMember(Name = "TokenExpiryField", EmitDefaultValue = true)]
        public string TokenExpiryField { get; set; }

        /// <summary>
        /// Authentication token
        /// </summary>
        /// <value>Authentication token</value>
        [DataMember(Name = "TokenField", EmitDefaultValue = true)]
        public string TokenField { get; set; }

        /// <summary>
        /// Text content for the watermark
        /// </summary>
        /// <value>Text content for the watermark</value>
        [DataMember(Name = "WatermarkTextField", IsRequired = true, EmitDefaultValue = true)]
        public string WatermarkTextField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddWatermarkByFileRequest {\n");
            sb.Append("  AllPagesField: ").Append(AllPagesField).Append("\n");
            sb.Append("  BaseFileField: ").Append(BaseFileField).Append("\n");
            sb.Append("  DownloadFileNameField: ").Append(DownloadFileNameField).Append("\n");
            sb.Append("  FillOpacityField: ").Append(FillOpacityField).Append("\n");
            sb.Append("  FontNameField: ").Append(FontNameField).Append("\n");
            sb.Append("  FontSizeField: ").Append(FontSizeField).Append("\n");
            sb.Append("  PagesListField: ").Append(PagesListField).Append("\n");
            sb.Append("  StrokeOpacityField: ").Append(StrokeOpacityField).Append("\n");
            sb.Append("  TextAngleField: ").Append(TextAngleField).Append("\n");
            sb.Append("  TextRGBColorField: ").Append(TextRGBColorField).Append("\n");
            sb.Append("  TokenExpiryField: ").Append(TokenExpiryField).Append("\n");
            sb.Append("  TokenField: ").Append(TokenField).Append("\n");
            sb.Append("  WatermarkTextField: ").Append(WatermarkTextField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
