/*
 * WorkFlow API
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigniFlow.Connect.Client.OpenAPIDateConverter;

namespace SigniFlow.Connect.Model
{
    /// <summary>
    /// SigningCeremonyV2RequestTextFieldsListField
    /// </summary>
    [DataContract]
    public partial class SigningCeremonyV2RequestTextFieldsListField :  IEquatable<SigningCeremonyV2RequestTextFieldsListField>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SigningCeremonyV2RequestTextFieldsListField" /> class.
        /// </summary>
        /// <param name="textFieldHField">Text field height..</param>
        /// <param name="textFieldPageField">The page on which the text field is..</param>
        /// <param name="textFieldValueField">The value of the text field..</param>
        /// <param name="textFieldWField">Text field width..</param>
        /// <param name="textFieldXField">Text field x-coordinates..</param>
        /// <param name="textFieldYField">Text field y-coordinates..</param>
        public SigningCeremonyV2RequestTextFieldsListField(decimal textFieldHField = default(decimal), decimal textFieldPageField = default(decimal), string textFieldValueField = default(string), decimal textFieldWField = default(decimal), decimal textFieldXField = default(decimal), decimal textFieldYField = default(decimal))
        {
            this.TextFieldHField = textFieldHField;
            this.TextFieldPageField = textFieldPageField;
            this.TextFieldValueField = textFieldValueField;
            this.TextFieldWField = textFieldWField;
            this.TextFieldXField = textFieldXField;
            this.TextFieldYField = textFieldYField;
        }

        /// <summary>
        /// Text field height.
        /// </summary>
        /// <value>Text field height.</value>
        [DataMember(Name="TextFieldHField", EmitDefaultValue=false)]        public decimal TextFieldHField { get; set; }

        /// <summary>
        /// The page on which the text field is.
        /// </summary>
        /// <value>The page on which the text field is.</value>
        [DataMember(Name="TextFieldPageField", EmitDefaultValue=false)]        public decimal TextFieldPageField { get; set; }

        /// <summary>
        /// The value of the text field.
        /// </summary>
        /// <value>The value of the text field.</value>
        [DataMember(Name="TextFieldValueField", EmitDefaultValue=false)]        public string TextFieldValueField { get; set; }

        /// <summary>
        /// Text field width.
        /// </summary>
        /// <value>Text field width.</value>
        [DataMember(Name="TextFieldWField", EmitDefaultValue=false)]        public decimal TextFieldWField { get; set; }

        /// <summary>
        /// Text field x-coordinates.
        /// </summary>
        /// <value>Text field x-coordinates.</value>
        [DataMember(Name="TextFieldXField", EmitDefaultValue=false)]        public decimal TextFieldXField { get; set; }

        /// <summary>
        /// Text field y-coordinates.
        /// </summary>
        /// <value>Text field y-coordinates.</value>
        [DataMember(Name="TextFieldYField", EmitDefaultValue=false)]        public decimal TextFieldYField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SigningCeremonyV2RequestTextFieldsListField {\n");
            sb.Append("  TextFieldHField: ").Append(TextFieldHField).Append("\n");
            sb.Append("  TextFieldPageField: ").Append(TextFieldPageField).Append("\n");
            sb.Append("  TextFieldValueField: ").Append(TextFieldValueField).Append("\n");
            sb.Append("  TextFieldWField: ").Append(TextFieldWField).Append("\n");
            sb.Append("  TextFieldXField: ").Append(TextFieldXField).Append("\n");
            sb.Append("  TextFieldYField: ").Append(TextFieldYField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SigningCeremonyV2RequestTextFieldsListField);
        }

        /// <summary>
        /// Returns true if SigningCeremonyV2RequestTextFieldsListField instances are equal
        /// </summary>
        /// <param name="input">Instance of SigningCeremonyV2RequestTextFieldsListField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SigningCeremonyV2RequestTextFieldsListField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TextFieldHField == input.TextFieldHField ||
                    (this.TextFieldHField != null &&
                    this.TextFieldHField.Equals(input.TextFieldHField))
                ) && 
                (
                    this.TextFieldPageField == input.TextFieldPageField ||
                    (this.TextFieldPageField != null &&
                    this.TextFieldPageField.Equals(input.TextFieldPageField))
                ) && 
                (
                    this.TextFieldValueField == input.TextFieldValueField ||
                    (this.TextFieldValueField != null &&
                    this.TextFieldValueField.Equals(input.TextFieldValueField))
                ) && 
                (
                    this.TextFieldWField == input.TextFieldWField ||
                    (this.TextFieldWField != null &&
                    this.TextFieldWField.Equals(input.TextFieldWField))
                ) && 
                (
                    this.TextFieldXField == input.TextFieldXField ||
                    (this.TextFieldXField != null &&
                    this.TextFieldXField.Equals(input.TextFieldXField))
                ) && 
                (
                    this.TextFieldYField == input.TextFieldYField ||
                    (this.TextFieldYField != null &&
                    this.TextFieldYField.Equals(input.TextFieldYField))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TextFieldHField != null)
                    hashCode = hashCode * 59 + this.TextFieldHField.GetHashCode();
                if (this.TextFieldPageField != null)
                    hashCode = hashCode * 59 + this.TextFieldPageField.GetHashCode();
                if (this.TextFieldValueField != null)
                    hashCode = hashCode * 59 + this.TextFieldValueField.GetHashCode();
                if (this.TextFieldWField != null)
                    hashCode = hashCode * 59 + this.TextFieldWField.GetHashCode();
                if (this.TextFieldXField != null)
                    hashCode = hashCode * 59 + this.TextFieldXField.GetHashCode();
                if (this.TextFieldYField != null)
                    hashCode = hashCode * 59 + this.TextFieldYField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // TextFieldValueField (string) minLength
            if(this.TextFieldValueField != null && this.TextFieldValueField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TextFieldValueField, length must be greater than 1.", new [] { "TextFieldValueField" });
            }
 
            yield break;
        }
    }

}
