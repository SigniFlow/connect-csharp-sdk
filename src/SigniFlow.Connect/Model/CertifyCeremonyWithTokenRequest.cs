/*
 * Certify Ceremony API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigniFlow.Connect.Client.OpenAPIDateConverter;

namespace SigniFlow.Connect.Model
{
    /// <summary>
    /// CertifyCeremonyWithTokenRequest
    /// </summary>
    [DataContract(Name = "CertifyCeremonyWithTokenRequest")]
    public partial class CertifyCeremonyWithTokenRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertifyCeremonyWithTokenRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CertifyCeremonyWithTokenRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CertifyCeremonyWithTokenRequest" /> class.
        /// </summary>
        /// <param name="docField">Document content (required).</param>
        /// <param name="docNameField">Document name (required).</param>
        /// <param name="signerEmailField">Signer&#39;s email (required).</param>
        /// <param name="signerFullNameField">Signer&#39;s full name (required).</param>
        /// <param name="signerIdentificationNumberField">Signer&#39;s identification number (required).</param>
        /// <param name="signerLocationField">Signer&#39;s location (required).</param>
        /// <param name="signerMobileNumberField">Signer&#39;s mobile number (required).</param>
        /// <param name="signerReasonField">Reason for signing (required).</param>
        /// <param name="signerTrustOriginField">Trust origin of the signer (required).</param>
        /// <param name="signerTrustReferenceField">Trust reference of the signer (required).</param>
        /// <param name="tokenField">tokenField (required).</param>
        /// <param name="signaturePageField"></param>
        /// <param name="signatureXField"></param>
        /// <param name="signatureYField"></param>
        /// <param name="signatureWField"></param>
        /// <param name="signatureHField"></param>
        /// <param name="signatureImageField"></param>
        /// <param name="signatureImageIncludeBorderField"></param>
        /// <param name="signatureImageIncludeReasonField"></param>
        /// <param name="signatureImageIncludeSignedByField"></param>
        /// <param name="signatureImageIncludeSignedDateField"></param>
        public CertifyCeremonyWithTokenRequest(string docField = default(string),string docNameField = default(string),string signerEmailField = default(string),string signerFullNameField = default(string), string signerIdentificationNumberField = default(string), string signerLocationField = default(string),string signerMobileNumberField = default(string),
    string signerReasonField = default(string),string signerTrustOriginField = default(string),
    string signerTrustReferenceField = default(string),TokenField tokenField = default(TokenField),int signaturePageField = default(int), int signatureXField = default(int),int signatureYField = default(int),int signatureWField = default(int),int signatureHField = default(int),
    string signatureImageField = default(string),bool signatureImageIncludeBorderField = default(bool),
    bool signatureImageIncludeReasonField = default(bool), bool signatureImageIncludeSignedByField = default(bool),bool signatureImageIncludeSignedDateField = default(bool))
        {
            // Ensure "docField" is required (not null)
            if (docField == null)
            {
                throw new ArgumentNullException("docField is a required property for CertifyCeremonyWithTokenRequest and cannot be null");
            }
            this.DocField = docField;

            // Ensure "docNameField" is required (not null)
            if (docNameField == null)
            {
                throw new ArgumentNullException("docNameField is a required property for CertifyCeremonyWithTokenRequest and cannot be null");
            }
            this.DocNameField = docNameField;

            // Ensure "signerEmailField" is required (not null)
            if (signerEmailField == null)
            {
                throw new ArgumentNullException("signerEmailField is a required property for CertifyCeremonyWithTokenRequest and cannot be null");
            }
            this.SignerEmailField = signerEmailField;

            // Ensure "signerFullNameField" is required (not null)
            if (signerFullNameField == null)
            {
                throw new ArgumentNullException("signerFullNameField is a required property for CertifyCeremonyWithTokenRequest and cannot be null");
            }
            this.SignerFullNameField = signerFullNameField;

            // Ensure "signerIdentificationNumberField" is required (not null)
            if (signerIdentificationNumberField == null)
            {
                throw new ArgumentNullException("signerIdentificationNumberField is a required property for CertifyCeremonyWithTokenRequest and cannot be null");
            }
            this.SignerIdentificationNumberField = signerIdentificationNumberField;

            // Ensure "signerLocationField" is required (not null)
            if (signerLocationField == null)
            {
                throw new ArgumentNullException("signerLocationField is a required property for CertifyCeremonyWithTokenRequest and cannot be null");
            }
            this.SignerLocationField = signerLocationField;

            // Ensure "signerMobileNumberField" is required (not null)
            if (signerMobileNumberField == null)
            {
                throw new ArgumentNullException("signerMobileNumberField is a required property for CertifyCeremonyWithTokenRequest and cannot be null");
            }
            this.SignerMobileNumberField = signerMobileNumberField;

            // Ensure "signerReasonField" is required (not null)
            if (signerReasonField == null)
            {
                throw new ArgumentNullException("signerReasonField is a required property for CertifyCeremonyWithTokenRequest and cannot be null");
            }
            this.SignerReasonField = signerReasonField;

            // Ensure "signerTrustOriginField" is required (not null)
            if (signerTrustOriginField == null)
            {
                throw new ArgumentNullException("signerTrustOriginField is a required property for CertifyCeremonyWithTokenRequest and cannot be null");
            }
            this.SignerTrustOriginField = signerTrustOriginField;

            // Ensure "signerTrustReferenceField" is required (not null)
            if (signerTrustReferenceField == null)
            {
                throw new ArgumentNullException("signerTrustReferenceField is a required property for CertifyCeremonyWithTokenRequest and cannot be null");
            }
            this.SignerTrustReferenceField = signerTrustReferenceField;

            // Ensure "tokenField" is required (not null)
            if (tokenField == null)
            {
                throw new ArgumentNullException("tokenField is a required property for CertifyCeremonyWithTokenRequest and cannot be null");
            }
            this.TokenField = tokenField;
            this.SignatureXField = signatureXField;
            this.SignatureYField = signatureYField;
            this.SignatureWField = signatureWField;
            this.SignatureHField = signatureHField;
            this.SignatureImageField = signatureImageField;
            this.SignatureImageIncludeBorderField = signatureImageIncludeBorderField;
            this.SignatureImageIncludeReasonField = signatureImageIncludeReasonField;
            this.SignatureImageIncludeSignedByField = signatureImageIncludeSignedByField;
            this.SignatureImageIncludeSignedDateField = signatureImageIncludeSignedDateField;
        }


        /// <summary>
        /// Document content
        /// </summary>
        /// <value>Document content</value>
        [DataMember(Name = "DocField", IsRequired = true, EmitDefaultValue = true)]
        public string DocField { get; set; }

        /// <summary>
        /// Document name
        /// </summary>
        /// <value>Document name</value>
        [DataMember(Name = "DocNameField", IsRequired = true, EmitDefaultValue = true)]
        public string DocNameField { get; set; }

        /// <summary>
        /// Signer&#39;s email
        /// </summary>
        /// <value>Signer&#39;s email</value>
        [DataMember(Name = "SignerEmailField", IsRequired = true, EmitDefaultValue = true)]
        public string SignerEmailField { get; set; }
        /// <summary>
        /// User Name of the creator
        /// </summary>
        /// <value>User Name of the creator</value>
        [DataMember(Name = "UserNameField", IsRequired = true, EmitDefaultValue = true)]
        public string UserNameField { get; set; }

        /// <summary>
        /// Signer&#39;s full name
        /// </summary>
        /// <value>Signer&#39;s full name</value>
        [DataMember(Name = "SignerFullNameField", IsRequired = true, EmitDefaultValue = true)]
        public string SignerFullNameField { get; set; }

        /// <summary>
        /// Signer&#39;s identification number
        /// </summary>
        /// <value>Signer&#39;s identification number</value>
        [DataMember(Name = "SignerIdentificationNumberField", IsRequired = true, EmitDefaultValue = true)]
        public string SignerIdentificationNumberField { get; set; }

        /// <summary>
        /// Signer&#39;s location
        /// </summary>
        /// <value>Signer&#39;s location</value>
        [DataMember(Name = "SignerLocationField", IsRequired = true, EmitDefaultValue = true)]
        public string SignerLocationField { get; set; }

        /// <summary>
        /// Signer&#39;s mobile number
        /// </summary>
        /// <value>Signer&#39;s mobile number</value>
        [DataMember(Name = "SignerMobileNumberField", IsRequired = true, EmitDefaultValue = true)]
        public string SignerMobileNumberField { get; set; }

        /// <summary>
        /// Reason for signing
        /// </summary>
        /// <value>Reason for signing</value>
        [DataMember(Name = "SignerReasonField", IsRequired = true, EmitDefaultValue = true)]
        public string SignerReasonField { get; set; }

        /// <summary>
        /// Trust origin of the signer
        /// </summary>
        /// <value>Trust origin of the signer</value>
        [DataMember(Name = "SignerTrustOriginField", IsRequired = true, EmitDefaultValue = true)]
        public string SignerTrustOriginField { get; set; }

        /// <summary>
        /// Trust reference of the signer
        /// </summary>
        /// <value>Trust reference of the signer</value>
        [DataMember(Name = "SignerTrustReferenceField", IsRequired = true, EmitDefaultValue = true)]
        public string SignerTrustReferenceField { get; set; }


        /// <summary>
        /// Signature Page for the signature
        /// </summary>
        /// <value>Signature Page </value>
        [DataMember(Name = "SignaturePageField", IsRequired = true, EmitDefaultValue = true)]
        public int SignaturePageField { get; set; }


        // Updated properties with correct DataMember attributes and descriptions
        /// <summary>
        /// Width of the signature image field
        /// </summary>
        /// <value>Width of the signature image field</value>
        [DataMember(Name = "SignatureWField", IsRequired = true, EmitDefaultValue = true)]
        public int SignatureWField { get; set; }

        /// <summary>
        /// X position of the signature image field
        /// </summary>
        /// <value>X position of the signature image field</value>
        [DataMember(Name = "SignatureXField", IsRequired = true, EmitDefaultValue = true)]
        public int SignatureXField { get; set; }

        /// <summary>
        /// Y position of the signature image field
        /// </summary>
        /// <value>Y position of the signature image field</value>
        [DataMember(Name = "SignatureYField", IsRequired = true, EmitDefaultValue = true)]
        public int SignatureYField { get; set; }

        /// <summary>
        /// Base64 of signature image field
        /// </summary>
        /// <value>Base64 of signature image field</value>
        [DataMember(Name = "SignatureImageField", IsRequired = true, EmitDefaultValue = true)]
        public string SignatureImageField { get; set; }


        /// <summary>
        /// Signature Image Include the Border
        /// </summary>
        /// <value>Signature Image Include the Border</value>
        [DataMember(Name = "SignatureImageIncludeBorderField", IsRequired = true, EmitDefaultValue = true)]
        public bool SignatureImageIncludeBorderField { get; set; }

        /// <summary>
        /// Signature Image Include the Reason
        /// </summary>
        /// <value>Signature Image Include the Reason</value>
        [DataMember(Name = "SignatureImageIncludeReasonField", IsRequired = true, EmitDefaultValue = true)]
        public bool SignatureImageIncludeReasonField { get; set; }
        /// <summary>
        /// Signature Image Include the Border
        /// </summary>
        /// <value>Signature Image Include the Border</value>
        [DataMember(Name = "SignatureImageIncludeSignedByField", IsRequired = true, EmitDefaultValue = true)]
        public bool SignatureImageIncludeSignedByField { get; set; }

        /// <summary>
        /// Signature Image Include the Signed Date
        /// </summary>
        /// <value>Signature Image Include the Signed Date</value>
        [DataMember(Name = "SignatureImageIncludeSignedDateField", IsRequired = true, EmitDefaultValue = true)]
        public bool SignatureImageIncludeSignedDateField { get; set; }

        /// <summary>
        /// H position of the signature image field
        /// </summary>
        /// <value>H position of the signature image field</value>
        [DataMember(Name = "SignatureHField", IsRequired = true, EmitDefaultValue = true)]
        public int SignatureHField { get; set; }
        /// <summary>
        /// Gets or Sets TokenField
        /// </summary>
        /// <value>TokenField information</value>
        [DataMember(Name = "TokenField", IsRequired = true, EmitDefaultValue = true)]
        public TokenField TokenField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CertifyCeremonyWithTokenRequest {\n");
            sb.Append("  DocField: ").Append(DocField).Append("\n");
            sb.Append("  DocNameField: ").Append(DocNameField).Append("\n");
            sb.Append("  UserNameField: ").Append(UserNameField).Append("\n");
            sb.Append("  SignerEmailField: ").Append(SignerEmailField).Append("\n");
            sb.Append("  SignerFullNameField: ").Append(SignerFullNameField).Append("\n");
            sb.Append("  SignerIdentificationNumberField: ").Append(SignerIdentificationNumberField).Append("\n");
            sb.Append("  SignerLocationField: ").Append(SignerLocationField).Append("\n");
            sb.Append("  SignerMobileNumberField: ").Append(SignerMobileNumberField).Append("\n");
            sb.Append("  SignerReasonField: ").Append(SignerReasonField).Append("\n");
            sb.Append("  SignerTrustOriginField: ").Append(SignerTrustOriginField).Append("\n");
            sb.Append("  SignerTrustReferenceField: ").Append(SignerTrustReferenceField).Append("\n");
            sb.Append("  SignaturePageField: ").Append(SignaturePageField).Append("\n");
            sb.Append("  SignatureXField: ").Append(SignatureXField).Append("\n");
            sb.Append("  SignatureYField: ").Append(SignatureYField).Append("\n");
            sb.Append("  SignatureWField: ").Append(SignatureWField).Append("\n");
            sb.Append("  SignatureHField: ").Append(SignatureHField).Append("\n");
            sb.Append("  SignatureImageField: ").Append(SignatureImageField).Append("\n");
            sb.Append("  SignatureImageIncludeBorderField: ").Append(SignatureImageIncludeBorderField).Append("\n");
            sb.Append("  SignatureImageIncludeReasonField: ").Append(SignatureImageIncludeReasonField).Append("\n");
            sb.Append("  SignatureImageIncludeSignedByField: ").Append(SignatureImageIncludeSignedByField).Append("\n");
            sb.Append("  SignatureImageIncludeSignedDateField: ").Append(SignatureImageIncludeSignedDateField).Append("\n");
            sb.Append("  TokenField: ").Append(TokenField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
