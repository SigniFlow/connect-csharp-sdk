/*
 * WorkFlow API
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigniFlow.Connect.Client.OpenAPIDateConverter;

namespace SigniFlow.Connect.Model
{
    /// <summary>
    /// GetPrepperTemplateResponsePrepperTemplateValuesField
    /// </summary>
    [DataContract(Name = "GetPrepperTemplateResponse_PrepperTemplateValuesField")]
    public partial class GetPrepperTemplateResponsePrepperTemplateValuesField : IEquatable<GetPrepperTemplateResponsePrepperTemplateValuesField>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets FieldTypeField
        /// </summary>
        [DataMember(Name = "FieldTypeField", IsRequired = true, EmitDefaultValue = true)]
        public FieldType FieldTypeField { get; set; }
//    
//    
//        /// <summary>
//        /// Initializes a new instance of the <see cref="GetPrepperTemplateResponsePrepperTemplateValuesField" /> class.
//        /// </summary>
//        [JsonConstructorAttribute]
//        
//        protected GetPrepperTemplateResponsePrepperTemplateValuesField() { }
//        
//        
//    
//    
        /// <summary>
        /// Initializes a new instance of the <see cref="GetPrepperTemplateResponsePrepperTemplateValuesField" /> class.
        /// </summary>
        /// <param name="colorField">The color assigned to the fields of each user, each user has a predefined color. (required).</param>
        /// <param name="docFieldIDField">Document field ID (required).</param>
        /// <param name="docIDField">Document ID (required).</param>
        /// <param name="fieldTypeField">fieldTypeField (required).</param>
        /// <param name="heightField">The height of the field. (required).</param>
        /// <param name="pageNumberField">Field page number. (required).</param>
        /// <param name="userFullNameField">The user&#39;s full name. (required).</param>
        /// <param name="userIDField">The user&#39;s ID. (required).</param>
        /// <param name="valueField">If you would like to fill in a predefined value that will appear on the document - you can fill it in here - this can be editted by the end user..</param>
        /// <param name="widthField">The width of the field. (required).</param>
        /// <param name="xCoordinateField">The x-coordinates of the fields. (required).</param>
        /// <param name="yCoordinateField">The y-coordinates of the fields (required).</param>
        public GetPrepperTemplateResponsePrepperTemplateValuesField(string colorField = default(string), string docFieldIDField = default(string), decimal docIDField = default(decimal), FieldType fieldTypeField = default(FieldType), decimal heightField = default(decimal), decimal pageNumberField = default(decimal), string userFullNameField = default(string), decimal userIDField = default(decimal), string valueField = default(string), decimal widthField = default(decimal), decimal xCoordinateField = default(decimal), decimal yCoordinateField = default(decimal))
        {
            // to ensure "colorField" is required (not null)
            this.ColorField = colorField ?? throw new ArgumentNullException("colorField is a required property for GetPrepperTemplateResponsePrepperTemplateValuesField and cannot be null");
            // to ensure "docFieldIDField" is required (not null)
            this.DocFieldIDField = docFieldIDField ?? throw new ArgumentNullException("docFieldIDField is a required property for GetPrepperTemplateResponsePrepperTemplateValuesField and cannot be null");
            this.DocIDField = docIDField;
            this.FieldTypeField = fieldTypeField;
            this.HeightField = heightField;
            this.PageNumberField = pageNumberField;
            // to ensure "userFullNameField" is required (not null)
            this.UserFullNameField = userFullNameField ?? throw new ArgumentNullException("userFullNameField is a required property for GetPrepperTemplateResponsePrepperTemplateValuesField and cannot be null");
            this.UserIDField = userIDField;
            this.WidthField = widthField;
            this.XCoordinateField = xCoordinateField;
            this.YCoordinateField = yCoordinateField;
            this.ValueField = valueField;
        }

        /// <summary>
        /// The color assigned to the fields of each user, each user has a predefined color.
        /// </summary>
        /// <value>The color assigned to the fields of each user, each user has a predefined color.</value>
        [DataMember(Name = "ColorField", IsRequired = true, EmitDefaultValue = true)]
        public string ColorField { get; set; }

        /// <summary>
        /// Document field ID
        /// </summary>
        /// <value>Document field ID</value>
        [DataMember(Name = "DocFieldIDField", IsRequired = true, EmitDefaultValue = true)]
        public string DocFieldIDField { get; set; }

        /// <summary>
        /// Document ID
        /// </summary>
        /// <value>Document ID</value>
        [DataMember(Name = "DocIDField", IsRequired = true, EmitDefaultValue = true)]
        public decimal DocIDField { get; set; }

        /// <summary>
        /// The height of the field.
        /// </summary>
        /// <value>The height of the field.</value>
        [DataMember(Name = "HeightField", IsRequired = true, EmitDefaultValue = true)]
        public decimal HeightField { get; set; }

        /// <summary>
        /// Field page number.
        /// </summary>
        /// <value>Field page number.</value>
        [DataMember(Name = "PageNumberField", IsRequired = true, EmitDefaultValue = true)]
        public decimal PageNumberField { get; set; }

        /// <summary>
        /// The user&#39;s full name.
        /// </summary>
        /// <value>The user&#39;s full name.</value>
        [DataMember(Name = "UserFullNameField", IsRequired = true, EmitDefaultValue = true)]
        public string UserFullNameField { get; set; }

        /// <summary>
        /// The user&#39;s ID.
        /// </summary>
        /// <value>The user&#39;s ID.</value>
        [DataMember(Name = "UserIDField", IsRequired = true, EmitDefaultValue = true)]
        public decimal UserIDField { get; set; }

        /// <summary>
        /// If you would like to fill in a predefined value that will appear on the document - you can fill it in here - this can be editted by the end user.
        /// </summary>
        /// <value>If you would like to fill in a predefined value that will appear on the document - you can fill it in here - this can be editted by the end user.</value>
        [DataMember(Name = "ValueField", EmitDefaultValue = true)]
        public string ValueField { get; set; }

        /// <summary>
        /// The width of the field.
        /// </summary>
        /// <value>The width of the field.</value>
        [DataMember(Name = "WidthField", IsRequired = true, EmitDefaultValue = true)]
        public decimal WidthField { get; set; }

        /// <summary>
        /// The x-coordinates of the fields.
        /// </summary>
        /// <value>The x-coordinates of the fields.</value>
        [DataMember(Name = "XCoordinateField", IsRequired = true, EmitDefaultValue = true)]
        public decimal XCoordinateField { get; set; }

        /// <summary>
        /// The y-coordinates of the fields
        /// </summary>
        /// <value>The y-coordinates of the fields</value>
        [DataMember(Name = "YCoordinateField", IsRequired = true, EmitDefaultValue = true)]
        public decimal YCoordinateField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetPrepperTemplateResponsePrepperTemplateValuesField {\n");
            sb.Append("  ColorField: ").Append(ColorField).Append("\n");
            sb.Append("  DocFieldIDField: ").Append(DocFieldIDField).Append("\n");
            sb.Append("  DocIDField: ").Append(DocIDField).Append("\n");
            sb.Append("  FieldTypeField: ").Append(FieldTypeField).Append("\n");
            sb.Append("  HeightField: ").Append(HeightField).Append("\n");
            sb.Append("  PageNumberField: ").Append(PageNumberField).Append("\n");
            sb.Append("  UserFullNameField: ").Append(UserFullNameField).Append("\n");
            sb.Append("  UserIDField: ").Append(UserIDField).Append("\n");
            sb.Append("  ValueField: ").Append(ValueField).Append("\n");
            sb.Append("  WidthField: ").Append(WidthField).Append("\n");
            sb.Append("  XCoordinateField: ").Append(XCoordinateField).Append("\n");
            sb.Append("  YCoordinateField: ").Append(YCoordinateField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetPrepperTemplateResponsePrepperTemplateValuesField);
        }

        /// <summary>
        /// Returns true if GetPrepperTemplateResponsePrepperTemplateValuesField instances are equal
        /// </summary>
        /// <param name="input">Instance of GetPrepperTemplateResponsePrepperTemplateValuesField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetPrepperTemplateResponsePrepperTemplateValuesField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ColorField == input.ColorField ||
                    (this.ColorField != null &&
                    this.ColorField.Equals(input.ColorField))
                ) && 
                (
                    this.DocFieldIDField == input.DocFieldIDField ||
                    (this.DocFieldIDField != null &&
                    this.DocFieldIDField.Equals(input.DocFieldIDField))
                ) && 
                (
                    this.DocIDField == input.DocIDField ||
                    this.DocIDField.Equals(input.DocIDField)
                ) && 
                (
                    this.FieldTypeField == input.FieldTypeField ||
                    this.FieldTypeField.Equals(input.FieldTypeField)
                ) && 
                (
                    this.HeightField == input.HeightField ||
                    this.HeightField.Equals(input.HeightField)
                ) && 
                (
                    this.PageNumberField == input.PageNumberField ||
                    this.PageNumberField.Equals(input.PageNumberField)
                ) && 
                (
                    this.UserFullNameField == input.UserFullNameField ||
                    (this.UserFullNameField != null &&
                    this.UserFullNameField.Equals(input.UserFullNameField))
                ) && 
                (
                    this.UserIDField == input.UserIDField ||
                    this.UserIDField.Equals(input.UserIDField)
                ) && 
                (
                    this.ValueField == input.ValueField ||
                    (this.ValueField != null &&
                    this.ValueField.Equals(input.ValueField))
                ) && 
                (
                    this.WidthField == input.WidthField ||
                    this.WidthField.Equals(input.WidthField)
                ) && 
                (
                    this.XCoordinateField == input.XCoordinateField ||
                    this.XCoordinateField.Equals(input.XCoordinateField)
                ) && 
                (
                    this.YCoordinateField == input.YCoordinateField ||
                    this.YCoordinateField.Equals(input.YCoordinateField)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ColorField != null)
                    hashCode = hashCode * 59 + this.ColorField.GetHashCode();
                if (this.DocFieldIDField != null)
                    hashCode = hashCode * 59 + this.DocFieldIDField.GetHashCode();
                hashCode = hashCode * 59 + this.DocIDField.GetHashCode();
                hashCode = hashCode * 59 + this.FieldTypeField.GetHashCode();
                hashCode = hashCode * 59 + this.HeightField.GetHashCode();
                hashCode = hashCode * 59 + this.PageNumberField.GetHashCode();
                if (this.UserFullNameField != null)
                    hashCode = hashCode * 59 + this.UserFullNameField.GetHashCode();
                hashCode = hashCode * 59 + this.UserIDField.GetHashCode();
                if (this.ValueField != null)
                    hashCode = hashCode * 59 + this.ValueField.GetHashCode();
                hashCode = hashCode * 59 + this.WidthField.GetHashCode();
                hashCode = hashCode * 59 + this.XCoordinateField.GetHashCode();
                hashCode = hashCode * 59 + this.YCoordinateField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ColorField (string) minLength
            if(this.ColorField != null && this.ColorField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ColorField, length must be greater than 1.", new [] { "ColorField" });
            }

            // DocFieldIDField (string) minLength
            if(this.DocFieldIDField != null && this.DocFieldIDField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocFieldIDField, length must be greater than 1.", new [] { "DocFieldIDField" });
            }

            // UserFullNameField (string) minLength
            if(this.UserFullNameField != null && this.UserFullNameField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserFullNameField, length must be greater than 1.", new [] { "UserFullNameField" });
            }

            // ValueField (string) minLength
            if(this.ValueField != null && this.ValueField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ValueField, length must be greater than 1.", new [] { "ValueField" });
            }

            yield break;
        }
    }

}
