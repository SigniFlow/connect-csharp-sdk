/*
 * WorkFlow API
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigniFlow.Connect.Client.OpenAPIDateConverter;

namespace SigniFlow.Connect.Model
{
    /// <summary>
    /// #### The request sent when fields are added to a document using a FlowID.
    /// </summary>
    [DataContract]
    public partial class DocPrepperAddFieldsFlowIDRequest :  IEquatable<DocPrepperAddFieldsFlowIDRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DocFieldTypeField
        /// </summary>
        [DataMember(Name="DocFieldTypeField", EmitDefaultValue=true)]
        public FieldType DocFieldTypeField { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocPrepperAddFieldsFlowIDRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocPrepperAddFieldsFlowIDRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocPrepperAddFieldsFlowIDRequest" /> class.
        /// </summary>
        /// <param name="docFieldTypeField">docFieldTypeField (required).</param>
        /// <param name="docIDField">Document ID. (required).</param>
        /// <param name="flowIDField">Document Flow ID. (required).</param>
        /// <param name="heightField">Field height. (required).</param>
        /// <param name="widthField">Field width. (required).</param>
        /// <param name="isInvisibleField">Is the field invisible. Only applicable to signatures..</param>
        /// <param name="linkToField">Document link..</param>
        /// <param name="pageNumberField">Field page number. (required).</param>
        /// <param name="nameField">Field name field..</param>
        /// <param name="userEmailField">User email address field. (required).</param>
        /// <param name="xCoordinateField">Document field x-coordinates. (required).</param>
        /// <param name="yCoordinateField">Document field y-coordinates. (required).</param>
        /// <param name="tokenField">tokenField (required).</param>
        public DocPrepperAddFieldsFlowIDRequest(FieldType docFieldTypeField = default(FieldType), decimal docIDField = default(decimal), decimal flowIDField = default(decimal), string heightField = default(string), string widthField = default(string), bool isInvisibleField = default(bool), string linkToField = default(string), decimal pageNumberField = default(decimal), string nameField = default(string), string userEmailField = default(string), string xCoordinateField = default(string), string yCoordinateField = default(string), TokenField tokenField = default(TokenField))
        {
            // to ensure "docFieldTypeField" is required (not null)
            if (docFieldTypeField == null)
            {
                throw new InvalidDataException("docFieldTypeField is a required property for DocPrepperAddFieldsFlowIDRequest and cannot be null");
            }
            else
            {
                this.DocFieldTypeField = docFieldTypeField;
            }

            // to ensure "docIDField" is required (not null)
            if (docIDField == null)
            {
                throw new InvalidDataException("docIDField is a required property for DocPrepperAddFieldsFlowIDRequest and cannot be null");
            }
            else
            {
                this.DocIDField = docIDField;
            }

            // to ensure "flowIDField" is required (not null)
            if (flowIDField == null)
            {
                throw new InvalidDataException("flowIDField is a required property for DocPrepperAddFieldsFlowIDRequest and cannot be null");
            }
            else
            {
                this.FlowIDField = flowIDField;
            }

            // to ensure "heightField" is required (not null)
            if (heightField == null)
            {
                throw new InvalidDataException("heightField is a required property for DocPrepperAddFieldsFlowIDRequest and cannot be null");
            }
            else
            {
                this.HeightField = heightField;
            }

            // to ensure "widthField" is required (not null)
            if (widthField == null)
            {
                throw new InvalidDataException("widthField is a required property for DocPrepperAddFieldsFlowIDRequest and cannot be null");
            }
            else
            {
                this.WidthField = widthField;
            }

            // to ensure "pageNumberField" is required (not null)
            if (pageNumberField == null)
            {
                throw new InvalidDataException("pageNumberField is a required property for DocPrepperAddFieldsFlowIDRequest and cannot be null");
            }
            else
            {
                this.PageNumberField = pageNumberField;
            }

            // to ensure "userEmailField" is required (not null)
            if (userEmailField == null)
            {
                throw new InvalidDataException("userEmailField is a required property for DocPrepperAddFieldsFlowIDRequest and cannot be null");
            }
            else
            {
                this.UserEmailField = userEmailField;
            }

            // to ensure "xCoordinateField" is required (not null)
            if (xCoordinateField == null)
            {
                throw new InvalidDataException("xCoordinateField is a required property for DocPrepperAddFieldsFlowIDRequest and cannot be null");
            }
            else
            {
                this.XCoordinateField = xCoordinateField;
            }

            // to ensure "yCoordinateField" is required (not null)
            if (yCoordinateField == null)
            {
                throw new InvalidDataException("yCoordinateField is a required property for DocPrepperAddFieldsFlowIDRequest and cannot be null");
            }
            else
            {
                this.YCoordinateField = yCoordinateField;
            }

            // to ensure "tokenField" is required (not null)
            if (tokenField == null)
            {
                throw new InvalidDataException("tokenField is a required property for DocPrepperAddFieldsFlowIDRequest and cannot be null");
            }
            else
            {
                this.TokenField = tokenField;
            }

            this.IsInvisibleField = isInvisibleField;
            this.LinkToField = linkToField;
            this.NameField = nameField;
        }


        /// <summary>
        /// Document ID.
        /// </summary>
        /// <value>Document ID.</value>
        [DataMember(Name="DocIDField", EmitDefaultValue=true)]        public decimal DocIDField { get; set; }

        /// <summary>
        /// Document Flow ID.
        /// </summary>
        /// <value>Document Flow ID.</value>
        [DataMember(Name="FlowIDField", EmitDefaultValue=true)]        public decimal FlowIDField { get; set; }

        /// <summary>
        /// Field height.
        /// </summary>
        /// <value>Field height.</value>
        [DataMember(Name="HeightField", EmitDefaultValue=true)]        public string HeightField { get; set; }

        /// <summary>
        /// Field width.
        /// </summary>
        /// <value>Field width.</value>
        [DataMember(Name="WidthField", EmitDefaultValue=true)]        public string WidthField { get; set; }

        /// <summary>
        /// Is the field invisible. Only applicable to signatures.
        /// </summary>
        /// <value>Is the field invisible. Only applicable to signatures.</value>
        [DataMember(Name="IsInvisibleField", EmitDefaultValue=false)]        public bool IsInvisibleField { get; set; }

        /// <summary>
        /// Document link.
        /// </summary>
        /// <value>Document link.</value>
        [DataMember(Name="LinkToField", EmitDefaultValue=false)]        public string LinkToField { get; set; }

        /// <summary>
        /// Field page number.
        /// </summary>
        /// <value>Field page number.</value>
        [DataMember(Name="PageNumberField", EmitDefaultValue=true)]        public decimal PageNumberField { get; set; }

        /// <summary>
        /// Field name field.
        /// </summary>
        /// <value>Field name field.</value>
        [DataMember(Name="NameField", EmitDefaultValue=false)]        public string NameField { get; set; }

        /// <summary>
        /// User email address field.
        /// </summary>
        /// <value>User email address field.</value>
        [DataMember(Name="UserEmailField", EmitDefaultValue=true)]        public string UserEmailField { get; set; }

        /// <summary>
        /// Document field x-coordinates.
        /// </summary>
        /// <value>Document field x-coordinates.</value>
        [DataMember(Name="XCoordinateField", EmitDefaultValue=true)]        public string XCoordinateField { get; set; }

        /// <summary>
        /// Document field y-coordinates.
        /// </summary>
        /// <value>Document field y-coordinates.</value>
        [DataMember(Name="YCoordinateField", EmitDefaultValue=true)]        public string YCoordinateField { get; set; }

        /// <summary>
        /// Gets or Sets TokenField
        /// </summary>
        [DataMember(Name="TokenField", EmitDefaultValue=true)]        public TokenField TokenField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocPrepperAddFieldsFlowIDRequest {\n");
            sb.Append("  DocFieldTypeField: ").Append(DocFieldTypeField).Append("\n");
            sb.Append("  DocIDField: ").Append(DocIDField).Append("\n");
            sb.Append("  FlowIDField: ").Append(FlowIDField).Append("\n");
            sb.Append("  HeightField: ").Append(HeightField).Append("\n");
            sb.Append("  WidthField: ").Append(WidthField).Append("\n");
            sb.Append("  IsInvisibleField: ").Append(IsInvisibleField).Append("\n");
            sb.Append("  LinkToField: ").Append(LinkToField).Append("\n");
            sb.Append("  PageNumberField: ").Append(PageNumberField).Append("\n");
            sb.Append("  NameField: ").Append(NameField).Append("\n");
            sb.Append("  UserEmailField: ").Append(UserEmailField).Append("\n");
            sb.Append("  XCoordinateField: ").Append(XCoordinateField).Append("\n");
            sb.Append("  YCoordinateField: ").Append(YCoordinateField).Append("\n");
            sb.Append("  TokenField: ").Append(TokenField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocPrepperAddFieldsFlowIDRequest);
        }

        /// <summary>
        /// Returns true if DocPrepperAddFieldsFlowIDRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DocPrepperAddFieldsFlowIDRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocPrepperAddFieldsFlowIDRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocFieldTypeField == input.DocFieldTypeField ||
                    (this.DocFieldTypeField != null &&
                    this.DocFieldTypeField.Equals(input.DocFieldTypeField))
                ) && 
                (
                    this.DocIDField == input.DocIDField ||
                    (this.DocIDField != null &&
                    this.DocIDField.Equals(input.DocIDField))
                ) && 
                (
                    this.FlowIDField == input.FlowIDField ||
                    (this.FlowIDField != null &&
                    this.FlowIDField.Equals(input.FlowIDField))
                ) && 
                (
                    this.HeightField == input.HeightField ||
                    (this.HeightField != null &&
                    this.HeightField.Equals(input.HeightField))
                ) && 
                (
                    this.WidthField == input.WidthField ||
                    (this.WidthField != null &&
                    this.WidthField.Equals(input.WidthField))
                ) && 
                (
                    this.IsInvisibleField == input.IsInvisibleField ||
                    (this.IsInvisibleField != null &&
                    this.IsInvisibleField.Equals(input.IsInvisibleField))
                ) && 
                (
                    this.LinkToField == input.LinkToField ||
                    (this.LinkToField != null &&
                    this.LinkToField.Equals(input.LinkToField))
                ) && 
                (
                    this.PageNumberField == input.PageNumberField ||
                    (this.PageNumberField != null &&
                    this.PageNumberField.Equals(input.PageNumberField))
                ) && 
                (
                    this.NameField == input.NameField ||
                    (this.NameField != null &&
                    this.NameField.Equals(input.NameField))
                ) && 
                (
                    this.UserEmailField == input.UserEmailField ||
                    (this.UserEmailField != null &&
                    this.UserEmailField.Equals(input.UserEmailField))
                ) && 
                (
                    this.XCoordinateField == input.XCoordinateField ||
                    (this.XCoordinateField != null &&
                    this.XCoordinateField.Equals(input.XCoordinateField))
                ) && 
                (
                    this.YCoordinateField == input.YCoordinateField ||
                    (this.YCoordinateField != null &&
                    this.YCoordinateField.Equals(input.YCoordinateField))
                ) && 
                (
                    this.TokenField == input.TokenField ||
                    (this.TokenField != null &&
                    this.TokenField.Equals(input.TokenField))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocFieldTypeField != null)
                    hashCode = hashCode * 59 + this.DocFieldTypeField.GetHashCode();
                if (this.DocIDField != null)
                    hashCode = hashCode * 59 + this.DocIDField.GetHashCode();
                if (this.FlowIDField != null)
                    hashCode = hashCode * 59 + this.FlowIDField.GetHashCode();
                if (this.HeightField != null)
                    hashCode = hashCode * 59 + this.HeightField.GetHashCode();
                if (this.WidthField != null)
                    hashCode = hashCode * 59 + this.WidthField.GetHashCode();
                if (this.IsInvisibleField != null)
                    hashCode = hashCode * 59 + this.IsInvisibleField.GetHashCode();
                if (this.LinkToField != null)
                    hashCode = hashCode * 59 + this.LinkToField.GetHashCode();
                if (this.PageNumberField != null)
                    hashCode = hashCode * 59 + this.PageNumberField.GetHashCode();
                if (this.NameField != null)
                    hashCode = hashCode * 59 + this.NameField.GetHashCode();
                if (this.UserEmailField != null)
                    hashCode = hashCode * 59 + this.UserEmailField.GetHashCode();
                if (this.XCoordinateField != null)
                    hashCode = hashCode * 59 + this.XCoordinateField.GetHashCode();
                if (this.YCoordinateField != null)
                    hashCode = hashCode * 59 + this.YCoordinateField.GetHashCode();
                if (this.TokenField != null)
                    hashCode = hashCode * 59 + this.TokenField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // HeightField (string) minLength
            if(this.HeightField != null && this.HeightField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HeightField, length must be greater than 1.", new [] { "HeightField" });
            }
 

            // WidthField (string) minLength
            if(this.WidthField != null && this.WidthField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WidthField, length must be greater than 1.", new [] { "WidthField" });
            }
 

            // LinkToField (string) minLength
            if(this.LinkToField != null && this.LinkToField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LinkToField, length must be greater than 1.", new [] { "LinkToField" });
            }
 

            // NameField (string) minLength
            if(this.NameField != null && this.NameField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NameField, length must be greater than 1.", new [] { "NameField" });
            }
 

            // UserEmailField (string) minLength
            if(this.UserEmailField != null && this.UserEmailField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserEmailField, length must be greater than 1.", new [] { "UserEmailField" });
            }
 

            // XCoordinateField (string) minLength
            if(this.XCoordinateField != null && this.XCoordinateField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for XCoordinateField, length must be greater than 1.", new [] { "XCoordinateField" });
            }
 

            // YCoordinateField (string) minLength
            if(this.YCoordinateField != null && this.YCoordinateField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for YCoordinateField, length must be greater than 1.", new [] { "YCoordinateField" });
            }
 
            yield break;
        }
    }

}
