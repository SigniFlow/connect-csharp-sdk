/*
 * WorkFlow API
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigniFlow.Connect.Client.OpenAPIDateConverter;

namespace SigniFlow.Connect.Model
{
    /// <summary>
    /// DocPrepperAddAdvancedFieldsRequestFieldInfoListField
    /// </summary>
    [DataContract]
    public partial class DocPrepperAddAdvancedFieldsRequestFieldInfoListField :  IEquatable<DocPrepperAddAdvancedFieldsRequestFieldInfoListField>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets AdvancedFieldTypeField
        /// </summary>
        [DataMember(Name="AdvancedFieldTypeField", EmitDefaultValue=true)]
        public AdvancedFieldType AdvancedFieldTypeField { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocPrepperAddAdvancedFieldsRequestFieldInfoListField" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocPrepperAddAdvancedFieldsRequestFieldInfoListField() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocPrepperAddAdvancedFieldsRequestFieldInfoListField" /> class.
        /// </summary>
        /// <param name="advancedFieldTypeField">advancedFieldTypeField (required).</param>
        /// <param name="docIDField">Document ID field. (required).</param>
        /// <param name="fieldOptionsListField">fieldOptionsListField.</param>
        /// <param name="flowIDField">Document Flow ID field. (required).</param>
        /// <param name="fontFamilyField">Font family of the text in the field. If its a text field the font in the text field will be the selected font..</param>
        /// <param name="fontSizeField">Font size of the text in the field (required).</param>
        /// <param name="heightField">Field height (required).</param>
        /// <param name="widthField">Field Width (required).</param>
        /// <param name="linkToField">This field is used to link fields together and allow users to fill in specific portions of the document based on a checkbox with the same NameField. (required).</param>
        /// <param name="nameField">This field is used when you need to define the field embedded in the document with a unique name that can be referenced later. Ex. all checkbosgroups should have the same NameField. (required).</param>
        /// <param name="pageNumberField">Field page number. (required).</param>
        /// <param name="searchableField">Used to indicate whether a dropdown field should contain a search option. (required).</param>
        /// <param name="userEmailField">User email address. (required).</param>
        /// <param name="valueField">If you would like to fill in a predefined value that will appear on the document - you can fill it in here - this can be editted by the end user..</param>
        /// <param name="xCoordinateField">X-coordinates of field on the page (required).</param>
        /// <param name="yCoordinateField">Y-coordinates of field on the page (required).</param>
        public DocPrepperAddAdvancedFieldsRequestFieldInfoListField(AdvancedFieldType advancedFieldTypeField = default(AdvancedFieldType), decimal docIDField = default(decimal), List<DocPrepperAddAdvancedFieldsRequestFieldOptionsListField> fieldOptionsListField = default(List<DocPrepperAddAdvancedFieldsRequestFieldOptionsListField>), decimal flowIDField = default(decimal), string fontFamilyField = default(string), decimal fontSizeField = default(decimal), string heightField = default(string), string widthField = default(string), string linkToField = default(string), string nameField = default(string), decimal pageNumberField = default(decimal), bool searchableField = default(bool), string userEmailField = default(string), string valueField = default(string), string xCoordinateField = default(string), string yCoordinateField = default(string))
        {
            // to ensure "advancedFieldTypeField" is required (not null)
            if (advancedFieldTypeField == null)
            {
                throw new InvalidDataException("advancedFieldTypeField is a required property for DocPrepperAddAdvancedFieldsRequestFieldInfoListField and cannot be null");
            }
            else
            {
                this.AdvancedFieldTypeField = advancedFieldTypeField;
            }

            // to ensure "docIDField" is required (not null)
            if (docIDField == null)
            {
                throw new InvalidDataException("docIDField is a required property for DocPrepperAddAdvancedFieldsRequestFieldInfoListField and cannot be null");
            }
            else
            {
                this.DocIDField = docIDField;
            }

            // to ensure "flowIDField" is required (not null)
            if (flowIDField == null)
            {
                throw new InvalidDataException("flowIDField is a required property for DocPrepperAddAdvancedFieldsRequestFieldInfoListField and cannot be null");
            }
            else
            {
                this.FlowIDField = flowIDField;
            }

            // to ensure "fontSizeField" is required (not null)
            if (fontSizeField == null)
            {
                throw new InvalidDataException("fontSizeField is a required property for DocPrepperAddAdvancedFieldsRequestFieldInfoListField and cannot be null");
            }
            else
            {
                this.FontSizeField = fontSizeField;
            }

            // to ensure "heightField" is required (not null)
            if (heightField == null)
            {
                throw new InvalidDataException("heightField is a required property for DocPrepperAddAdvancedFieldsRequestFieldInfoListField and cannot be null");
            }
            else
            {
                this.HeightField = heightField;
            }

            // to ensure "widthField" is required (not null)
            if (widthField == null)
            {
                throw new InvalidDataException("widthField is a required property for DocPrepperAddAdvancedFieldsRequestFieldInfoListField and cannot be null");
            }
            else
            {
                this.WidthField = widthField;
            }

            // to ensure "linkToField" is required (not null)
            if (linkToField == null)
            {
                throw new InvalidDataException("linkToField is a required property for DocPrepperAddAdvancedFieldsRequestFieldInfoListField and cannot be null");
            }
            else
            {
                this.LinkToField = linkToField;
            }

            // to ensure "nameField" is required (not null)
            if (nameField == null)
            {
                throw new InvalidDataException("nameField is a required property for DocPrepperAddAdvancedFieldsRequestFieldInfoListField and cannot be null");
            }
            else
            {
                this.NameField = nameField;
            }

            // to ensure "pageNumberField" is required (not null)
            if (pageNumberField == null)
            {
                throw new InvalidDataException("pageNumberField is a required property for DocPrepperAddAdvancedFieldsRequestFieldInfoListField and cannot be null");
            }
            else
            {
                this.PageNumberField = pageNumberField;
            }

            // to ensure "searchableField" is required (not null)
            if (searchableField == null)
            {
                throw new InvalidDataException("searchableField is a required property for DocPrepperAddAdvancedFieldsRequestFieldInfoListField and cannot be null");
            }
            else
            {
                this.SearchableField = searchableField;
            }

            // to ensure "userEmailField" is required (not null)
            if (userEmailField == null)
            {
                throw new InvalidDataException("userEmailField is a required property for DocPrepperAddAdvancedFieldsRequestFieldInfoListField and cannot be null");
            }
            else
            {
                this.UserEmailField = userEmailField;
            }

            // to ensure "xCoordinateField" is required (not null)
            if (xCoordinateField == null)
            {
                throw new InvalidDataException("xCoordinateField is a required property for DocPrepperAddAdvancedFieldsRequestFieldInfoListField and cannot be null");
            }
            else
            {
                this.XCoordinateField = xCoordinateField;
            }

            // to ensure "yCoordinateField" is required (not null)
            if (yCoordinateField == null)
            {
                throw new InvalidDataException("yCoordinateField is a required property for DocPrepperAddAdvancedFieldsRequestFieldInfoListField and cannot be null");
            }
            else
            {
                this.YCoordinateField = yCoordinateField;
            }

            this.FieldOptionsListField = fieldOptionsListField;
            this.FontFamilyField = fontFamilyField;
            this.ValueField = valueField;
        }


        /// <summary>
        /// Document ID field.
        /// </summary>
        /// <value>Document ID field.</value>
        [DataMember(Name="DocIDField", EmitDefaultValue=true)]        public decimal DocIDField { get; set; }

        /// <summary>
        /// Gets or Sets FieldOptionsListField
        /// </summary>
        [DataMember(Name="FieldOptionsListField", EmitDefaultValue=false)]        public List<DocPrepperAddAdvancedFieldsRequestFieldOptionsListField> FieldOptionsListField { get; set; }

        /// <summary>
        /// Document Flow ID field.
        /// </summary>
        /// <value>Document Flow ID field.</value>
        [DataMember(Name="FlowIDField", EmitDefaultValue=true)]        public decimal FlowIDField { get; set; }

        /// <summary>
        /// Font family of the text in the field. If its a text field the font in the text field will be the selected font.
        /// </summary>
        /// <value>Font family of the text in the field. If its a text field the font in the text field will be the selected font.</value>
        [DataMember(Name="FontFamilyField", EmitDefaultValue=false)]        public string FontFamilyField { get; set; }

        /// <summary>
        /// Font size of the text in the field
        /// </summary>
        /// <value>Font size of the text in the field</value>
        [DataMember(Name="FontSizeField", EmitDefaultValue=true)]        public decimal FontSizeField { get; set; }

        /// <summary>
        /// Field height
        /// </summary>
        /// <value>Field height</value>
        [DataMember(Name="HeightField", EmitDefaultValue=true)]        public string HeightField { get; set; }

        /// <summary>
        /// Field Width
        /// </summary>
        /// <value>Field Width</value>
        [DataMember(Name="WidthField", EmitDefaultValue=true)]        public string WidthField { get; set; }

        /// <summary>
        /// This field is used to link fields together and allow users to fill in specific portions of the document based on a checkbox with the same NameField.
        /// </summary>
        /// <value>This field is used to link fields together and allow users to fill in specific portions of the document based on a checkbox with the same NameField.</value>
        [DataMember(Name="LinkToField", EmitDefaultValue=true)]        public string LinkToField { get; set; }

        /// <summary>
        /// This field is used when you need to define the field embedded in the document with a unique name that can be referenced later. Ex. all checkbosgroups should have the same NameField.
        /// </summary>
        /// <value>This field is used when you need to define the field embedded in the document with a unique name that can be referenced later. Ex. all checkbosgroups should have the same NameField.</value>
        [DataMember(Name="NameField", EmitDefaultValue=true)]        public string NameField { get; set; }

        /// <summary>
        /// Field page number.
        /// </summary>
        /// <value>Field page number.</value>
        [DataMember(Name="PageNumberField", EmitDefaultValue=true)]        public decimal PageNumberField { get; set; }

        /// <summary>
        /// Used to indicate whether a dropdown field should contain a search option.
        /// </summary>
        /// <value>Used to indicate whether a dropdown field should contain a search option.</value>
        [DataMember(Name="SearchableField", EmitDefaultValue=true)]        public bool SearchableField { get; set; }

        /// <summary>
        /// User email address.
        /// </summary>
        /// <value>User email address.</value>
        [DataMember(Name="UserEmailField", EmitDefaultValue=true)]        public string UserEmailField { get; set; }

        /// <summary>
        /// If you would like to fill in a predefined value that will appear on the document - you can fill it in here - this can be editted by the end user.
        /// </summary>
        /// <value>If you would like to fill in a predefined value that will appear on the document - you can fill it in here - this can be editted by the end user.</value>
        [DataMember(Name="ValueField", EmitDefaultValue=false)]        public string ValueField { get; set; }

        /// <summary>
        /// X-coordinates of field on the page
        /// </summary>
        /// <value>X-coordinates of field on the page</value>
        [DataMember(Name="XCoordinateField", EmitDefaultValue=true)]        public string XCoordinateField { get; set; }

        /// <summary>
        /// Y-coordinates of field on the page
        /// </summary>
        /// <value>Y-coordinates of field on the page</value>
        [DataMember(Name="YCoordinateField", EmitDefaultValue=true)]        public string YCoordinateField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocPrepperAddAdvancedFieldsRequestFieldInfoListField {\n");
            sb.Append("  AdvancedFieldTypeField: ").Append(AdvancedFieldTypeField).Append("\n");
            sb.Append("  DocIDField: ").Append(DocIDField).Append("\n");
            sb.Append("  FieldOptionsListField: ").Append(FieldOptionsListField).Append("\n");
            sb.Append("  FlowIDField: ").Append(FlowIDField).Append("\n");
            sb.Append("  FontFamilyField: ").Append(FontFamilyField).Append("\n");
            sb.Append("  FontSizeField: ").Append(FontSizeField).Append("\n");
            sb.Append("  HeightField: ").Append(HeightField).Append("\n");
            sb.Append("  WidthField: ").Append(WidthField).Append("\n");
            sb.Append("  LinkToField: ").Append(LinkToField).Append("\n");
            sb.Append("  NameField: ").Append(NameField).Append("\n");
            sb.Append("  PageNumberField: ").Append(PageNumberField).Append("\n");
            sb.Append("  SearchableField: ").Append(SearchableField).Append("\n");
            sb.Append("  UserEmailField: ").Append(UserEmailField).Append("\n");
            sb.Append("  ValueField: ").Append(ValueField).Append("\n");
            sb.Append("  XCoordinateField: ").Append(XCoordinateField).Append("\n");
            sb.Append("  YCoordinateField: ").Append(YCoordinateField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocPrepperAddAdvancedFieldsRequestFieldInfoListField);
        }

        /// <summary>
        /// Returns true if DocPrepperAddAdvancedFieldsRequestFieldInfoListField instances are equal
        /// </summary>
        /// <param name="input">Instance of DocPrepperAddAdvancedFieldsRequestFieldInfoListField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocPrepperAddAdvancedFieldsRequestFieldInfoListField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdvancedFieldTypeField == input.AdvancedFieldTypeField ||
                    (this.AdvancedFieldTypeField != null &&
                    this.AdvancedFieldTypeField.Equals(input.AdvancedFieldTypeField))
                ) && 
                (
                    this.DocIDField == input.DocIDField ||
                    (this.DocIDField != null &&
                    this.DocIDField.Equals(input.DocIDField))
                ) && 
                (
                    this.FieldOptionsListField == input.FieldOptionsListField ||
                    this.FieldOptionsListField != null &&
                    input.FieldOptionsListField != null &&
                    this.FieldOptionsListField.SequenceEqual(input.FieldOptionsListField)
                ) && 
                (
                    this.FlowIDField == input.FlowIDField ||
                    (this.FlowIDField != null &&
                    this.FlowIDField.Equals(input.FlowIDField))
                ) && 
                (
                    this.FontFamilyField == input.FontFamilyField ||
                    (this.FontFamilyField != null &&
                    this.FontFamilyField.Equals(input.FontFamilyField))
                ) && 
                (
                    this.FontSizeField == input.FontSizeField ||
                    (this.FontSizeField != null &&
                    this.FontSizeField.Equals(input.FontSizeField))
                ) && 
                (
                    this.HeightField == input.HeightField ||
                    (this.HeightField != null &&
                    this.HeightField.Equals(input.HeightField))
                ) && 
                (
                    this.WidthField == input.WidthField ||
                    (this.WidthField != null &&
                    this.WidthField.Equals(input.WidthField))
                ) && 
                (
                    this.LinkToField == input.LinkToField ||
                    (this.LinkToField != null &&
                    this.LinkToField.Equals(input.LinkToField))
                ) && 
                (
                    this.NameField == input.NameField ||
                    (this.NameField != null &&
                    this.NameField.Equals(input.NameField))
                ) && 
                (
                    this.PageNumberField == input.PageNumberField ||
                    (this.PageNumberField != null &&
                    this.PageNumberField.Equals(input.PageNumberField))
                ) && 
                (
                    this.SearchableField == input.SearchableField ||
                    (this.SearchableField != null &&
                    this.SearchableField.Equals(input.SearchableField))
                ) && 
                (
                    this.UserEmailField == input.UserEmailField ||
                    (this.UserEmailField != null &&
                    this.UserEmailField.Equals(input.UserEmailField))
                ) && 
                (
                    this.ValueField == input.ValueField ||
                    (this.ValueField != null &&
                    this.ValueField.Equals(input.ValueField))
                ) && 
                (
                    this.XCoordinateField == input.XCoordinateField ||
                    (this.XCoordinateField != null &&
                    this.XCoordinateField.Equals(input.XCoordinateField))
                ) && 
                (
                    this.YCoordinateField == input.YCoordinateField ||
                    (this.YCoordinateField != null &&
                    this.YCoordinateField.Equals(input.YCoordinateField))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdvancedFieldTypeField != null)
                    hashCode = hashCode * 59 + this.AdvancedFieldTypeField.GetHashCode();
                if (this.DocIDField != null)
                    hashCode = hashCode * 59 + this.DocIDField.GetHashCode();
                if (this.FieldOptionsListField != null)
                    hashCode = hashCode * 59 + this.FieldOptionsListField.GetHashCode();
                if (this.FlowIDField != null)
                    hashCode = hashCode * 59 + this.FlowIDField.GetHashCode();
                if (this.FontFamilyField != null)
                    hashCode = hashCode * 59 + this.FontFamilyField.GetHashCode();
                if (this.FontSizeField != null)
                    hashCode = hashCode * 59 + this.FontSizeField.GetHashCode();
                if (this.HeightField != null)
                    hashCode = hashCode * 59 + this.HeightField.GetHashCode();
                if (this.WidthField != null)
                    hashCode = hashCode * 59 + this.WidthField.GetHashCode();
                if (this.LinkToField != null)
                    hashCode = hashCode * 59 + this.LinkToField.GetHashCode();
                if (this.NameField != null)
                    hashCode = hashCode * 59 + this.NameField.GetHashCode();
                if (this.PageNumberField != null)
                    hashCode = hashCode * 59 + this.PageNumberField.GetHashCode();
                if (this.SearchableField != null)
                    hashCode = hashCode * 59 + this.SearchableField.GetHashCode();
                if (this.UserEmailField != null)
                    hashCode = hashCode * 59 + this.UserEmailField.GetHashCode();
                if (this.ValueField != null)
                    hashCode = hashCode * 59 + this.ValueField.GetHashCode();
                if (this.XCoordinateField != null)
                    hashCode = hashCode * 59 + this.XCoordinateField.GetHashCode();
                if (this.YCoordinateField != null)
                    hashCode = hashCode * 59 + this.YCoordinateField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

 

            // FontFamilyField (string) minLength
            if(this.FontFamilyField != null && this.FontFamilyField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FontFamilyField, length must be greater than 1.", new [] { "FontFamilyField" });
            }
 

            // HeightField (string) minLength
            if(this.HeightField != null && this.HeightField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HeightField, length must be greater than 1.", new [] { "HeightField" });
            }
 

            // WidthField (string) minLength
            if(this.WidthField != null && this.WidthField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WidthField, length must be greater than 1.", new [] { "WidthField" });
            }
 

            // LinkToField (string) minLength
            if(this.LinkToField != null && this.LinkToField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LinkToField, length must be greater than 1.", new [] { "LinkToField" });
            }
 

            // NameField (string) minLength
            if(this.NameField != null && this.NameField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NameField, length must be greater than 1.", new [] { "NameField" });
            }
 

            // UserEmailField (string) minLength
            if(this.UserEmailField != null && this.UserEmailField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserEmailField, length must be greater than 1.", new [] { "UserEmailField" });
            }
 

            // ValueField (string) minLength
            if(this.ValueField != null && this.ValueField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ValueField, length must be greater than 1.", new [] { "ValueField" });
            }
 

            // XCoordinateField (string) minLength
            if(this.XCoordinateField != null && this.XCoordinateField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for XCoordinateField, length must be greater than 1.", new [] { "XCoordinateField" });
            }
 

            // YCoordinateField (string) minLength
            if(this.YCoordinateField != null && this.YCoordinateField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for YCoordinateField, length must be greater than 1.", new [] { "YCoordinateField" });
            }
 
            yield break;
        }
    }

}
