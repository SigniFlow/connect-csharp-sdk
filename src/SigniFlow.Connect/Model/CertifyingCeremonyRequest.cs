/*
 * SigniFlow API
 *
 * API for Certifying Ceremonies
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;


namespace SigniFlow.CertifyCeremonyAPI.Model
{
    /// <summary>
    /// CertifyingCeremonyRequest
    /// </summary>
    [DataContract(Name = "CertifyingCeremonyRequest")]
    public partial class CertifyingCeremonyRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertifyingCeremonyRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CertifyingCeremonyRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CertifyingCeremonyRequest" /> class.
        /// </summary>
        /// <param name="docField">Document field content as base64 (required).</param>
        /// <param name="docNameField">Name of the document (required).</param>
        /// <param name="loginPasswordField">Password for user login (required).</param>
        /// <param name="loginUserNameField">Username for login (required).</param>
        /// <param name="signerEmailField">Signer&#39;s email (required).</param>
        /// <param name="signerFullNameField">Full name of the signer (required).</param>
        /// <param name="signerIdentificationNumberField">Signer&#39;s ID number.</param>
        /// <param name="signerLocationField">Signer&#39;s location.</param>
        /// <param name="signerMobileNumberField">Signer&#39;s mobile number.</param>
        /// <param name="signerReasonField">Reason for signing.</param>
        /// <param name="signerTrustOriginField">Trust origin for signer.</param>
        /// <param name="signerTrustReferenceField">Trust reference for signer.</param>
        public CertifyingCeremonyRequest(string docField = default(string), string docNameField = default(string), string loginPasswordField = default(string), string loginUserNameField = default(string), string signerEmailField = default(string), string signerFullNameField = default(string), string signerIdentificationNumberField = default(string), string signerLocationField = default(string), string signerMobileNumberField = default(string), string signerReasonField = default(string), string signerTrustOriginField = default(string), string signerTrustReferenceField = default(string))
        {
            // to ensure "docField" is required (not null)
            if (docField == null)
            {
                throw new ArgumentNullException("docField is a required property for CertifyingCeremonyRequest and cannot be null");
            }
            this.DocField = docField;
            // to ensure "docNameField" is required (not null)
            if (docNameField == null)
            {
                throw new ArgumentNullException("docNameField is a required property for CertifyingCeremonyRequest and cannot be null");
            }
            this.DocNameField = docNameField;
            // to ensure "loginPasswordField" is required (not null)
            if (loginPasswordField == null)
            {
                throw new ArgumentNullException("loginPasswordField is a required property for CertifyingCeremonyRequest and cannot be null");
            }
            this.LoginPasswordField = loginPasswordField;
            // to ensure "loginUserNameField" is required (not null)
            if (loginUserNameField == null)
            {
                throw new ArgumentNullException("loginUserNameField is a required property for CertifyingCeremonyRequest and cannot be null");
            }
            this.LoginUserNameField = loginUserNameField;
            // to ensure "signerEmailField" is required (not null)
            if (signerEmailField == null)
            {
                throw new ArgumentNullException("signerEmailField is a required property for CertifyingCeremonyRequest and cannot be null");
            }
            this.SignerEmailField = signerEmailField;
            // to ensure "signerFullNameField" is required (not null)
            if (signerFullNameField == null)
            {
                throw new ArgumentNullException("signerFullNameField is a required property for CertifyingCeremonyRequest and cannot be null");
            }
            this.SignerFullNameField = signerFullNameField;
            this.SignerIdentificationNumberField = signerIdentificationNumberField;
            this.SignerLocationField = signerLocationField;
            this.SignerMobileNumberField = signerMobileNumberField;
            this.SignerReasonField = signerReasonField;
            this.SignerTrustOriginField = signerTrustOriginField;
            this.SignerTrustReferenceField = signerTrustReferenceField;
        }

        /// <summary>
        /// Document field content as base64
        /// </summary>
        /// <value>Document field content as base64</value>
        [DataMember(Name = "DocField", IsRequired = true, EmitDefaultValue = true)]
        public string DocField { get; set; }

        /// <summary>
        /// Name of the document
        /// </summary>
        /// <value>Name of the document</value>
        [DataMember(Name = "DocNameField", IsRequired = true, EmitDefaultValue = true)]
        public string DocNameField { get; set; }

        /// <summary>
        /// Password for user login
        /// </summary>
        /// <value>Password for user login</value>
        [DataMember(Name = "LoginPasswordField", IsRequired = true, EmitDefaultValue = true)]
        public string LoginPasswordField { get; set; }

        /// <summary>
        /// Username for login
        /// </summary>
        /// <value>Username for login</value>
        [DataMember(Name = "LoginUserNameField", IsRequired = true, EmitDefaultValue = true)]
        public string LoginUserNameField { get; set; }

        /// <summary>
        /// Signer&#39;s email
        /// </summary>
        /// <value>Signer&#39;s email</value>
        [DataMember(Name = "SignerEmailField", IsRequired = true, EmitDefaultValue = true)]
        public string SignerEmailField { get; set; }

        /// <summary>
        /// Full name of the signer
        /// </summary>
        /// <value>Full name of the signer</value>
        [DataMember(Name = "SignerFullNameField", IsRequired = true, EmitDefaultValue = true)]
        public string SignerFullNameField { get; set; }

        /// <summary>
        /// Signer&#39;s ID number
        /// </summary>
        /// <value>Signer&#39;s ID number</value>
        [DataMember(Name = "SignerIdentificationNumberField", EmitDefaultValue = true)]
        public string SignerIdentificationNumberField { get; set; }

        /// <summary>
        /// Signer&#39;s location
        /// </summary>
        /// <value>Signer&#39;s location</value>
        [DataMember(Name = "SignerLocationField", EmitDefaultValue = true)]
        public string SignerLocationField { get; set; }

        /// <summary>
        /// Signer&#39;s mobile number
        /// </summary>
        /// <value>Signer&#39;s mobile number</value>
        [DataMember(Name = "SignerMobileNumberField", EmitDefaultValue = true)]
        public string SignerMobileNumberField { get; set; }

        /// <summary>
        /// Reason for signing
        /// </summary>
        /// <value>Reason for signing</value>
        [DataMember(Name = "SignerReasonField", EmitDefaultValue = true)]
        public string SignerReasonField { get; set; }

        /// <summary>
        /// Trust origin for signer
        /// </summary>
        /// <value>Trust origin for signer</value>
        [DataMember(Name = "SignerTrustOriginField", EmitDefaultValue = true)]
        public string SignerTrustOriginField { get; set; }

        /// <summary>
        /// Trust reference for signer
        /// </summary>
        /// <value>Trust reference for signer</value>
        [DataMember(Name = "SignerTrustReferenceField", EmitDefaultValue = true)]
        public string SignerTrustReferenceField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CertifyingCeremonyRequest {\n");
            sb.Append("  DocField: ").Append(DocField).Append("\n");
            sb.Append("  DocNameField: ").Append(DocNameField).Append("\n");
            sb.Append("  LoginPasswordField: ").Append(LoginPasswordField).Append("\n");
            sb.Append("  LoginUserNameField: ").Append(LoginUserNameField).Append("\n");
            sb.Append("  SignerEmailField: ").Append(SignerEmailField).Append("\n");
            sb.Append("  SignerFullNameField: ").Append(SignerFullNameField).Append("\n");
            sb.Append("  SignerIdentificationNumberField: ").Append(SignerIdentificationNumberField).Append("\n");
            sb.Append("  SignerLocationField: ").Append(SignerLocationField).Append("\n");
            sb.Append("  SignerMobileNumberField: ").Append(SignerMobileNumberField).Append("\n");
            sb.Append("  SignerReasonField: ").Append(SignerReasonField).Append("\n");
            sb.Append("  SignerTrustOriginField: ").Append(SignerTrustOriginField).Append("\n");
            sb.Append("  SignerTrustReferenceField: ").Append(SignerTrustReferenceField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
