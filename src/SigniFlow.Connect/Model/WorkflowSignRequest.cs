/*
 * WorkFlow API
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigniFlow.Connect.Client.OpenAPIDateConverter;

namespace SigniFlow.Connect.Model
{
    /// <summary>
    /// #### This request is sent when a document workflow needs to be signed.
    /// </summary>
    [DataContract(Name = "WorkflowSignRequest")]
    public partial class WorkflowSignRequest : IEquatable<WorkflowSignRequest>, IValidatableObject
    {
//    
//    
//        /// <summary>
//        /// Initializes a new instance of the <see cref="WorkflowSignRequest" /> class.
//        /// </summary>
//        [JsonConstructorAttribute]
//        
//        protected WorkflowSignRequest() { }
//        
//        
//    
//    
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowSignRequest" /> class.
        /// </summary>
        /// <param name="docIDField">Document ID (required).</param>
        /// <param name="latitudeField">The current GPS lattitude location where the signing is taking place from.  Needs to be paired with the longitude Field..</param>
        /// <param name="loginPasswordField">User password. (required).</param>
        /// <param name="loginUserNameField">User&#39;s username. (required).</param>
        /// <param name="longitudeField">The current GPS longitude location where the signing is taking place from.  Needs to be paired with the lattitude field..</param>
        /// <param name="signReasonField">Reason for signature..</param>
        /// <param name="timeZoneOffsetField">The user&#39;s timezone offset. (required).</param>
        /// <param name="tokenField">tokenField (required).</param>
        public WorkflowSignRequest(string docIDField = default(string), string latitudeField = default(string), string loginPasswordField = default(string), string loginUserNameField = default(string), string longitudeField = default(string), string signReasonField = default(string), decimal timeZoneOffsetField = default(decimal), TokenField tokenField = default(TokenField))
        {
            // to ensure "docIDField" is required (not null)
            this.DocIDField = docIDField ?? throw new ArgumentNullException("docIDField is a required property for WorkflowSignRequest and cannot be null");
            // to ensure "loginPasswordField" is required (not null)
            this.LoginPasswordField = loginPasswordField ?? throw new ArgumentNullException("loginPasswordField is a required property for WorkflowSignRequest and cannot be null");
            // to ensure "loginUserNameField" is required (not null)
            this.LoginUserNameField = loginUserNameField ?? throw new ArgumentNullException("loginUserNameField is a required property for WorkflowSignRequest and cannot be null");
            this.TimeZoneOffsetField = timeZoneOffsetField;
            // to ensure "tokenField" is required (not null)
            this.TokenField = tokenField ?? throw new ArgumentNullException("tokenField is a required property for WorkflowSignRequest and cannot be null");
            this.LatitudeField = latitudeField;
            this.LongitudeField = longitudeField;
            this.SignReasonField = signReasonField;
        }

        /// <summary>
        /// Document ID
        /// </summary>
        /// <value>Document ID</value>
        [DataMember(Name = "DocIDField", IsRequired = true, EmitDefaultValue = true)]
        public string DocIDField { get; set; }

        /// <summary>
        /// The current GPS lattitude location where the signing is taking place from.  Needs to be paired with the longitude Field.
        /// </summary>
        /// <value>The current GPS lattitude location where the signing is taking place from.  Needs to be paired with the longitude Field.</value>
        [DataMember(Name = "LatitudeField", EmitDefaultValue = true)]
        public string LatitudeField { get; set; }

        /// <summary>
        /// User password.
        /// </summary>
        /// <value>User password.</value>
        [DataMember(Name = "LoginPasswordField", IsRequired = true, EmitDefaultValue = true)]
        public string LoginPasswordField { get; set; }

        /// <summary>
        /// User&#39;s username.
        /// </summary>
        /// <value>User&#39;s username.</value>
        [DataMember(Name = "LoginUserNameField", IsRequired = true, EmitDefaultValue = true)]
        public string LoginUserNameField { get; set; }

        /// <summary>
        /// The current GPS longitude location where the signing is taking place from.  Needs to be paired with the lattitude field.
        /// </summary>
        /// <value>The current GPS longitude location where the signing is taking place from.  Needs to be paired with the lattitude field.</value>
        [DataMember(Name = "LongitudeField", EmitDefaultValue = true)]
        public string LongitudeField { get; set; }

        /// <summary>
        /// Reason for signature.
        /// </summary>
        /// <value>Reason for signature.</value>
        [DataMember(Name = "SignReasonField", EmitDefaultValue = true)]
        public string SignReasonField { get; set; }

        /// <summary>
        /// The user&#39;s timezone offset.
        /// </summary>
        /// <value>The user&#39;s timezone offset.</value>
        [DataMember(Name = "TimeZoneOffsetField", IsRequired = true, EmitDefaultValue = true)]
        public decimal TimeZoneOffsetField { get; set; }

        /// <summary>
        /// Gets or Sets TokenField
        /// </summary>
        [DataMember(Name = "TokenField", IsRequired = true, EmitDefaultValue = true)]
        public TokenField TokenField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowSignRequest {\n");
            sb.Append("  DocIDField: ").Append(DocIDField).Append("\n");
            sb.Append("  LatitudeField: ").Append(LatitudeField).Append("\n");
            sb.Append("  LoginPasswordField: ").Append(LoginPasswordField).Append("\n");
            sb.Append("  LoginUserNameField: ").Append(LoginUserNameField).Append("\n");
            sb.Append("  LongitudeField: ").Append(LongitudeField).Append("\n");
            sb.Append("  SignReasonField: ").Append(SignReasonField).Append("\n");
            sb.Append("  TimeZoneOffsetField: ").Append(TimeZoneOffsetField).Append("\n");
            sb.Append("  TokenField: ").Append(TokenField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkflowSignRequest);
        }

        /// <summary>
        /// Returns true if WorkflowSignRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkflowSignRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowSignRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocIDField == input.DocIDField ||
                    (this.DocIDField != null &&
                    this.DocIDField.Equals(input.DocIDField))
                ) && 
                (
                    this.LatitudeField == input.LatitudeField ||
                    (this.LatitudeField != null &&
                    this.LatitudeField.Equals(input.LatitudeField))
                ) && 
                (
                    this.LoginPasswordField == input.LoginPasswordField ||
                    (this.LoginPasswordField != null &&
                    this.LoginPasswordField.Equals(input.LoginPasswordField))
                ) && 
                (
                    this.LoginUserNameField == input.LoginUserNameField ||
                    (this.LoginUserNameField != null &&
                    this.LoginUserNameField.Equals(input.LoginUserNameField))
                ) && 
                (
                    this.LongitudeField == input.LongitudeField ||
                    (this.LongitudeField != null &&
                    this.LongitudeField.Equals(input.LongitudeField))
                ) && 
                (
                    this.SignReasonField == input.SignReasonField ||
                    (this.SignReasonField != null &&
                    this.SignReasonField.Equals(input.SignReasonField))
                ) && 
                (
                    this.TimeZoneOffsetField == input.TimeZoneOffsetField ||
                    this.TimeZoneOffsetField.Equals(input.TimeZoneOffsetField)
                ) && 
                (
                    this.TokenField == input.TokenField ||
                    (this.TokenField != null &&
                    this.TokenField.Equals(input.TokenField))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocIDField != null)
                    hashCode = hashCode * 59 + this.DocIDField.GetHashCode();
                if (this.LatitudeField != null)
                    hashCode = hashCode * 59 + this.LatitudeField.GetHashCode();
                if (this.LoginPasswordField != null)
                    hashCode = hashCode * 59 + this.LoginPasswordField.GetHashCode();
                if (this.LoginUserNameField != null)
                    hashCode = hashCode * 59 + this.LoginUserNameField.GetHashCode();
                if (this.LongitudeField != null)
                    hashCode = hashCode * 59 + this.LongitudeField.GetHashCode();
                if (this.SignReasonField != null)
                    hashCode = hashCode * 59 + this.SignReasonField.GetHashCode();
                hashCode = hashCode * 59 + this.TimeZoneOffsetField.GetHashCode();
                if (this.TokenField != null)
                    hashCode = hashCode * 59 + this.TokenField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DocIDField (string) minLength
            if(this.DocIDField != null && this.DocIDField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocIDField, length must be greater than 1.", new [] { "DocIDField" });
            }

            // LatitudeField (string) minLength
            if(this.LatitudeField != null && this.LatitudeField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LatitudeField, length must be greater than 1.", new [] { "LatitudeField" });
            }

            // LoginPasswordField (string) minLength
            if(this.LoginPasswordField != null && this.LoginPasswordField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoginPasswordField, length must be greater than 1.", new [] { "LoginPasswordField" });
            }

            // LoginUserNameField (string) minLength
            if(this.LoginUserNameField != null && this.LoginUserNameField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoginUserNameField, length must be greater than 1.", new [] { "LoginUserNameField" });
            }

            // LongitudeField (string) minLength
            if(this.LongitudeField != null && this.LongitudeField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LongitudeField, length must be greater than 1.", new [] { "LongitudeField" });
            }

            // SignReasonField (string) minLength
            if(this.SignReasonField != null && this.SignReasonField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SignReasonField, length must be greater than 1.", new [] { "SignReasonField" });
            }

            yield break;
        }
    }

}
