/*
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SigniFlow.Connect.Client.OpenAPIDateConverter;

namespace SigniFlow.Connect.Model
{
    /// <summary>
    /// #### The request sent to start the signing process of a document.
    /// </summary>
    [DataContract(Name = "SigningCeremonyV2Request")]
    public partial class SigningCeremonyV2Request : IEquatable<SigningCeremonyV2Request>, IValidatableObject
    {
//    
//    
//        /// <summary>
//        /// Initializes a new instance of the <see cref="SigningCeremonyV2Request" /> class.
//        /// </summary>
//        [JsonConstructorAttribute]
//        
//        protected SigningCeremonyV2Request() { }
//        
//        
//    
//    
        /// <summary>
        /// Initializes a new instance of the <see cref="SigningCeremonyV2Request" /> class.
        /// </summary>
        /// <param name="checkboxFieldsListField">checkboxFieldsListField (required).</param>
        /// <param name="docField">docField (required).</param>
        /// <param name="docNameField">docNameField (required).</param>
        /// <param name="initialFieldsListField">initialFieldsListField (required).</param>
        /// <param name="loginPasswordField">loginPasswordField (required).</param>
        /// <param name="loginUserNameField">loginUserNameField (required).</param>
        /// <param name="signatureHField">signatureHField (required).</param>
        /// <param name="signatureImageField">signatureImageField (required).</param>
        /// <param name="signatureImageIncludeBorderField">signatureImageIncludeBorderField (required).</param>
        /// <param name="signatureImageIncludeReasonField">signatureImageIncludeReasonField (required).</param>
        /// <param name="signatureImageIncludeSignedByField">signatureImageIncludeSignedByField (required).</param>
        /// <param name="signatureImageIncludeSignedDateField">signatureImageIncludeSignedDateField (required).</param>
        /// <param name="signatureImageTypeField">signatureImageTypeField (required).</param>
        /// <param name="signaturePageField">signaturePageField (required).</param>
        /// <param name="signatureWField">signatureWField (required).</param>
        /// <param name="signatureXField">signatureXField (required).</param>
        /// <param name="signatureYField">signatureYField (required).</param>
        /// <param name="signerEmailField">signerEmailField (required).</param>
        /// <param name="signerFullNameField">signerFullNameField (required).</param>
        /// <param name="signerIdentificationNumberField">signerIdentificationNumberField (required).</param>
        /// <param name="signerLocationField">signerLocationField (required).</param>
        /// <param name="signerMobileNumberField">signerMobileNumberField (required).</param>
        /// <param name="signerReasonField">signerReasonField (required).</param>
        /// <param name="signerTrustOriginField">signerTrustOriginField (required).</param>
        /// <param name="signerTrustReferenceField">signerTrustReferenceField (required).</param>
        /// <param name="textFieldsListField">textFieldsListField (required).</param>
        public SigningCeremonyV2Request(List<Object> checkboxFieldsListField = default(List<Object>), string docField = default(string), string docNameField = default(string), List<Object> initialFieldsListField = default(List<Object>), string loginPasswordField = default(string), string loginUserNameField = default(string), decimal signatureHField = default(decimal), string signatureImageField = default(string), bool signatureImageIncludeBorderField = default(bool), bool signatureImageIncludeReasonField = default(bool), bool signatureImageIncludeSignedByField = default(bool), bool signatureImageIncludeSignedDateField = default(bool), decimal signatureImageTypeField = default(decimal), decimal signaturePageField = default(decimal), decimal signatureWField = default(decimal), decimal signatureXField = default(decimal), decimal signatureYField = default(decimal), string signerEmailField = default(string), string signerFullNameField = default(string), string signerIdentificationNumberField = default(string), string signerLocationField = default(string), string signerMobileNumberField = default(string), string signerReasonField = default(string), string signerTrustOriginField = default(string), string signerTrustReferenceField = default(string), List<Object> textFieldsListField = default(List<Object>))
        {
            // to ensure "checkboxFieldsListField" is required (not null)
            this.CheckboxFieldsListField = checkboxFieldsListField ?? throw new ArgumentNullException("checkboxFieldsListField is a required property for SigningCeremonyV2Request and cannot be null");
            // to ensure "docField" is required (not null)
            this.DocField = docField ?? throw new ArgumentNullException("docField is a required property for SigningCeremonyV2Request and cannot be null");
            // to ensure "docNameField" is required (not null)
            this.DocNameField = docNameField ?? throw new ArgumentNullException("docNameField is a required property for SigningCeremonyV2Request and cannot be null");
            // to ensure "initialFieldsListField" is required (not null)
            this.InitialFieldsListField = initialFieldsListField ?? throw new ArgumentNullException("initialFieldsListField is a required property for SigningCeremonyV2Request and cannot be null");
            // to ensure "loginPasswordField" is required (not null)
            this.LoginPasswordField = loginPasswordField ?? throw new ArgumentNullException("loginPasswordField is a required property for SigningCeremonyV2Request and cannot be null");
            // to ensure "loginUserNameField" is required (not null)
            this.LoginUserNameField = loginUserNameField ?? throw new ArgumentNullException("loginUserNameField is a required property for SigningCeremonyV2Request and cannot be null");
            this.SignatureHField = signatureHField;
            // to ensure "signatureImageField" is required (not null)
            this.SignatureImageField = signatureImageField ?? throw new ArgumentNullException("signatureImageField is a required property for SigningCeremonyV2Request and cannot be null");
            this.SignatureImageIncludeBorderField = signatureImageIncludeBorderField;
            this.SignatureImageIncludeReasonField = signatureImageIncludeReasonField;
            this.SignatureImageIncludeSignedByField = signatureImageIncludeSignedByField;
            this.SignatureImageIncludeSignedDateField = signatureImageIncludeSignedDateField;
            this.SignatureImageTypeField = signatureImageTypeField;
            this.SignaturePageField = signaturePageField;
            this.SignatureWField = signatureWField;
            this.SignatureXField = signatureXField;
            this.SignatureYField = signatureYField;
            // to ensure "signerEmailField" is required (not null)
            this.SignerEmailField = signerEmailField ?? throw new ArgumentNullException("signerEmailField is a required property for SigningCeremonyV2Request and cannot be null");
            // to ensure "signerFullNameField" is required (not null)
            this.SignerFullNameField = signerFullNameField ?? throw new ArgumentNullException("signerFullNameField is a required property for SigningCeremonyV2Request and cannot be null");
            // to ensure "signerIdentificationNumberField" is required (not null)
            this.SignerIdentificationNumberField = signerIdentificationNumberField ?? throw new ArgumentNullException("signerIdentificationNumberField is a required property for SigningCeremonyV2Request and cannot be null");
            // to ensure "signerLocationField" is required (not null)
            this.SignerLocationField = signerLocationField ?? throw new ArgumentNullException("signerLocationField is a required property for SigningCeremonyV2Request and cannot be null");
            // to ensure "signerMobileNumberField" is required (not null)
            this.SignerMobileNumberField = signerMobileNumberField ?? throw new ArgumentNullException("signerMobileNumberField is a required property for SigningCeremonyV2Request and cannot be null");
            // to ensure "signerReasonField" is required (not null)
            this.SignerReasonField = signerReasonField ?? throw new ArgumentNullException("signerReasonField is a required property for SigningCeremonyV2Request and cannot be null");
            // to ensure "signerTrustOriginField" is required (not null)
            this.SignerTrustOriginField = signerTrustOriginField ?? throw new ArgumentNullException("signerTrustOriginField is a required property for SigningCeremonyV2Request and cannot be null");
            // to ensure "signerTrustReferenceField" is required (not null)
            this.SignerTrustReferenceField = signerTrustReferenceField ?? throw new ArgumentNullException("signerTrustReferenceField is a required property for SigningCeremonyV2Request and cannot be null");
            // to ensure "textFieldsListField" is required (not null)
            this.TextFieldsListField = textFieldsListField ?? throw new ArgumentNullException("textFieldsListField is a required property for SigningCeremonyV2Request and cannot be null");
        }

        /// <summary>
        /// Gets or Sets CheckboxFieldsListField
        /// </summary>
        [DataMember(Name = "CheckboxFieldsListField", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> CheckboxFieldsListField { get; set; }

        /// <summary>
        /// Gets or Sets DocField
        /// </summary>
        [DataMember(Name = "DocField", IsRequired = true, EmitDefaultValue = true)]
        public string DocField { get; set; }

        /// <summary>
        /// Gets or Sets DocNameField
        /// </summary>
        [DataMember(Name = "DocNameField", IsRequired = true, EmitDefaultValue = true)]
        public string DocNameField { get; set; }

        /// <summary>
        /// Gets or Sets InitialFieldsListField
        /// </summary>
        [DataMember(Name = "InitialFieldsListField", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> InitialFieldsListField { get; set; }

        /// <summary>
        /// Gets or Sets LoginPasswordField
        /// </summary>
        [DataMember(Name = "LoginPasswordField", IsRequired = true, EmitDefaultValue = true)]
        public string LoginPasswordField { get; set; }

        /// <summary>
        /// Gets or Sets LoginUserNameField
        /// </summary>
        [DataMember(Name = "LoginUserNameField", IsRequired = true, EmitDefaultValue = true)]
        public string LoginUserNameField { get; set; }

        /// <summary>
        /// Gets or Sets SignatureHField
        /// </summary>
        [DataMember(Name = "SignatureHField", IsRequired = true, EmitDefaultValue = true)]
        public decimal SignatureHField { get; set; }

        /// <summary>
        /// Gets or Sets SignatureImageField
        /// </summary>
        [DataMember(Name = "SignatureImageField", IsRequired = true, EmitDefaultValue = true)]
        public string SignatureImageField { get; set; }

        /// <summary>
        /// Gets or Sets SignatureImageIncludeBorderField
        /// </summary>
        [DataMember(Name = "SignatureImageIncludeBorderField", IsRequired = true, EmitDefaultValue = true)]
        public bool SignatureImageIncludeBorderField { get; set; }

        /// <summary>
        /// Gets or Sets SignatureImageIncludeReasonField
        /// </summary>
        [DataMember(Name = "SignatureImageIncludeReasonField", IsRequired = true, EmitDefaultValue = true)]
        public bool SignatureImageIncludeReasonField { get; set; }

        /// <summary>
        /// Gets or Sets SignatureImageIncludeSignedByField
        /// </summary>
        [DataMember(Name = "SignatureImageIncludeSignedByField", IsRequired = true, EmitDefaultValue = true)]
        public bool SignatureImageIncludeSignedByField { get; set; }

        /// <summary>
        /// Gets or Sets SignatureImageIncludeSignedDateField
        /// </summary>
        [DataMember(Name = "SignatureImageIncludeSignedDateField", IsRequired = true, EmitDefaultValue = true)]
        public bool SignatureImageIncludeSignedDateField { get; set; }

        /// <summary>
        /// Gets or Sets SignatureImageTypeField
        /// </summary>
        [DataMember(Name = "SignatureImageTypeField", IsRequired = true, EmitDefaultValue = true)]
        public decimal SignatureImageTypeField { get; set; }

        /// <summary>
        /// Gets or Sets SignaturePageField
        /// </summary>
        [DataMember(Name = "SignaturePageField", IsRequired = true, EmitDefaultValue = true)]
        public decimal SignaturePageField { get; set; }

        /// <summary>
        /// Gets or Sets SignatureWField
        /// </summary>
        [DataMember(Name = "SignatureWField", IsRequired = true, EmitDefaultValue = true)]
        public decimal SignatureWField { get; set; }

        /// <summary>
        /// Gets or Sets SignatureXField
        /// </summary>
        [DataMember(Name = "SignatureXField", IsRequired = true, EmitDefaultValue = true)]
        public decimal SignatureXField { get; set; }

        /// <summary>
        /// Gets or Sets SignatureYField
        /// </summary>
        [DataMember(Name = "SignatureYField", IsRequired = true, EmitDefaultValue = true)]
        public decimal SignatureYField { get; set; }

        /// <summary>
        /// Gets or Sets SignerEmailField
        /// </summary>
        [DataMember(Name = "SignerEmailField", IsRequired = true, EmitDefaultValue = true)]
        public string SignerEmailField { get; set; }

        /// <summary>
        /// Gets or Sets SignerFullNameField
        /// </summary>
        [DataMember(Name = "SignerFullNameField", IsRequired = true, EmitDefaultValue = true)]
        public string SignerFullNameField { get; set; }

        /// <summary>
        /// Gets or Sets SignerIdentificationNumberField
        /// </summary>
        [DataMember(Name = "SignerIdentificationNumberField", IsRequired = true, EmitDefaultValue = true)]
        public string SignerIdentificationNumberField { get; set; }

        /// <summary>
        /// Gets or Sets SignerLocationField
        /// </summary>
        [DataMember(Name = "SignerLocationField", IsRequired = true, EmitDefaultValue = true)]
        public string SignerLocationField { get; set; }

        /// <summary>
        /// Gets or Sets SignerMobileNumberField
        /// </summary>
        [DataMember(Name = "SignerMobileNumberField", IsRequired = true, EmitDefaultValue = true)]
        public string SignerMobileNumberField { get; set; }

        /// <summary>
        /// Gets or Sets SignerReasonField
        /// </summary>
        [DataMember(Name = "SignerReasonField", IsRequired = true, EmitDefaultValue = true)]
        public string SignerReasonField { get; set; }

        /// <summary>
        /// Gets or Sets SignerTrustOriginField
        /// </summary>
        [DataMember(Name = "SignerTrustOriginField", IsRequired = true, EmitDefaultValue = true)]
        public string SignerTrustOriginField { get; set; }

        /// <summary>
        /// Gets or Sets SignerTrustReferenceField
        /// </summary>
        [DataMember(Name = "SignerTrustReferenceField", IsRequired = true, EmitDefaultValue = true)]
        public string SignerTrustReferenceField { get; set; }

        /// <summary>
        /// Gets or Sets TextFieldsListField
        /// </summary>
        [DataMember(Name = "TextFieldsListField", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> TextFieldsListField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SigningCeremonyV2Request {\n");
            sb.Append("  CheckboxFieldsListField: ").Append(CheckboxFieldsListField).Append("\n");
            sb.Append("  DocField: ").Append(DocField).Append("\n");
            sb.Append("  DocNameField: ").Append(DocNameField).Append("\n");
            sb.Append("  InitialFieldsListField: ").Append(InitialFieldsListField).Append("\n");
            sb.Append("  LoginPasswordField: ").Append(LoginPasswordField).Append("\n");
            sb.Append("  LoginUserNameField: ").Append(LoginUserNameField).Append("\n");
            sb.Append("  SignatureHField: ").Append(SignatureHField).Append("\n");
            sb.Append("  SignatureImageField: ").Append(SignatureImageField).Append("\n");
            sb.Append("  SignatureImageIncludeBorderField: ").Append(SignatureImageIncludeBorderField).Append("\n");
            sb.Append("  SignatureImageIncludeReasonField: ").Append(SignatureImageIncludeReasonField).Append("\n");
            sb.Append("  SignatureImageIncludeSignedByField: ").Append(SignatureImageIncludeSignedByField).Append("\n");
            sb.Append("  SignatureImageIncludeSignedDateField: ").Append(SignatureImageIncludeSignedDateField).Append("\n");
            sb.Append("  SignatureImageTypeField: ").Append(SignatureImageTypeField).Append("\n");
            sb.Append("  SignaturePageField: ").Append(SignaturePageField).Append("\n");
            sb.Append("  SignatureWField: ").Append(SignatureWField).Append("\n");
            sb.Append("  SignatureXField: ").Append(SignatureXField).Append("\n");
            sb.Append("  SignatureYField: ").Append(SignatureYField).Append("\n");
            sb.Append("  SignerEmailField: ").Append(SignerEmailField).Append("\n");
            sb.Append("  SignerFullNameField: ").Append(SignerFullNameField).Append("\n");
            sb.Append("  SignerIdentificationNumberField: ").Append(SignerIdentificationNumberField).Append("\n");
            sb.Append("  SignerLocationField: ").Append(SignerLocationField).Append("\n");
            sb.Append("  SignerMobileNumberField: ").Append(SignerMobileNumberField).Append("\n");
            sb.Append("  SignerReasonField: ").Append(SignerReasonField).Append("\n");
            sb.Append("  SignerTrustOriginField: ").Append(SignerTrustOriginField).Append("\n");
            sb.Append("  SignerTrustReferenceField: ").Append(SignerTrustReferenceField).Append("\n");
            sb.Append("  TextFieldsListField: ").Append(TextFieldsListField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SigningCeremonyV2Request);
        }

        /// <summary>
        /// Returns true if SigningCeremonyV2Request instances are equal
        /// </summary>
        /// <param name="input">Instance of SigningCeremonyV2Request to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SigningCeremonyV2Request input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CheckboxFieldsListField == input.CheckboxFieldsListField ||
                    this.CheckboxFieldsListField != null &&
                    input.CheckboxFieldsListField != null &&
                    this.CheckboxFieldsListField.SequenceEqual(input.CheckboxFieldsListField)
                ) && 
                (
                    this.DocField == input.DocField ||
                    (this.DocField != null &&
                    this.DocField.Equals(input.DocField))
                ) && 
                (
                    this.DocNameField == input.DocNameField ||
                    (this.DocNameField != null &&
                    this.DocNameField.Equals(input.DocNameField))
                ) && 
                (
                    this.InitialFieldsListField == input.InitialFieldsListField ||
                    this.InitialFieldsListField != null &&
                    input.InitialFieldsListField != null &&
                    this.InitialFieldsListField.SequenceEqual(input.InitialFieldsListField)
                ) && 
                (
                    this.LoginPasswordField == input.LoginPasswordField ||
                    (this.LoginPasswordField != null &&
                    this.LoginPasswordField.Equals(input.LoginPasswordField))
                ) && 
                (
                    this.LoginUserNameField == input.LoginUserNameField ||
                    (this.LoginUserNameField != null &&
                    this.LoginUserNameField.Equals(input.LoginUserNameField))
                ) && 
                (
                    this.SignatureHField == input.SignatureHField ||
                    this.SignatureHField.Equals(input.SignatureHField)
                ) && 
                (
                    this.SignatureImageField == input.SignatureImageField ||
                    (this.SignatureImageField != null &&
                    this.SignatureImageField.Equals(input.SignatureImageField))
                ) && 
                (
                    this.SignatureImageIncludeBorderField == input.SignatureImageIncludeBorderField ||
                    this.SignatureImageIncludeBorderField.Equals(input.SignatureImageIncludeBorderField)
                ) && 
                (
                    this.SignatureImageIncludeReasonField == input.SignatureImageIncludeReasonField ||
                    this.SignatureImageIncludeReasonField.Equals(input.SignatureImageIncludeReasonField)
                ) && 
                (
                    this.SignatureImageIncludeSignedByField == input.SignatureImageIncludeSignedByField ||
                    this.SignatureImageIncludeSignedByField.Equals(input.SignatureImageIncludeSignedByField)
                ) && 
                (
                    this.SignatureImageIncludeSignedDateField == input.SignatureImageIncludeSignedDateField ||
                    this.SignatureImageIncludeSignedDateField.Equals(input.SignatureImageIncludeSignedDateField)
                ) && 
                (
                    this.SignatureImageTypeField == input.SignatureImageTypeField ||
                    this.SignatureImageTypeField.Equals(input.SignatureImageTypeField)
                ) && 
                (
                    this.SignaturePageField == input.SignaturePageField ||
                    this.SignaturePageField.Equals(input.SignaturePageField)
                ) && 
                (
                    this.SignatureWField == input.SignatureWField ||
                    this.SignatureWField.Equals(input.SignatureWField)
                ) && 
                (
                    this.SignatureXField == input.SignatureXField ||
                    this.SignatureXField.Equals(input.SignatureXField)
                ) && 
                (
                    this.SignatureYField == input.SignatureYField ||
                    this.SignatureYField.Equals(input.SignatureYField)
                ) && 
                (
                    this.SignerEmailField == input.SignerEmailField ||
                    (this.SignerEmailField != null &&
                    this.SignerEmailField.Equals(input.SignerEmailField))
                ) && 
                (
                    this.SignerFullNameField == input.SignerFullNameField ||
                    (this.SignerFullNameField != null &&
                    this.SignerFullNameField.Equals(input.SignerFullNameField))
                ) && 
                (
                    this.SignerIdentificationNumberField == input.SignerIdentificationNumberField ||
                    (this.SignerIdentificationNumberField != null &&
                    this.SignerIdentificationNumberField.Equals(input.SignerIdentificationNumberField))
                ) && 
                (
                    this.SignerLocationField == input.SignerLocationField ||
                    (this.SignerLocationField != null &&
                    this.SignerLocationField.Equals(input.SignerLocationField))
                ) && 
                (
                    this.SignerMobileNumberField == input.SignerMobileNumberField ||
                    (this.SignerMobileNumberField != null &&
                    this.SignerMobileNumberField.Equals(input.SignerMobileNumberField))
                ) && 
                (
                    this.SignerReasonField == input.SignerReasonField ||
                    (this.SignerReasonField != null &&
                    this.SignerReasonField.Equals(input.SignerReasonField))
                ) && 
                (
                    this.SignerTrustOriginField == input.SignerTrustOriginField ||
                    (this.SignerTrustOriginField != null &&
                    this.SignerTrustOriginField.Equals(input.SignerTrustOriginField))
                ) && 
                (
                    this.SignerTrustReferenceField == input.SignerTrustReferenceField ||
                    (this.SignerTrustReferenceField != null &&
                    this.SignerTrustReferenceField.Equals(input.SignerTrustReferenceField))
                ) && 
                (
                    this.TextFieldsListField == input.TextFieldsListField ||
                    this.TextFieldsListField != null &&
                    input.TextFieldsListField != null &&
                    this.TextFieldsListField.SequenceEqual(input.TextFieldsListField)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CheckboxFieldsListField != null)
                    hashCode = hashCode * 59 + this.CheckboxFieldsListField.GetHashCode();
                if (this.DocField != null)
                    hashCode = hashCode * 59 + this.DocField.GetHashCode();
                if (this.DocNameField != null)
                    hashCode = hashCode * 59 + this.DocNameField.GetHashCode();
                if (this.InitialFieldsListField != null)
                    hashCode = hashCode * 59 + this.InitialFieldsListField.GetHashCode();
                if (this.LoginPasswordField != null)
                    hashCode = hashCode * 59 + this.LoginPasswordField.GetHashCode();
                if (this.LoginUserNameField != null)
                    hashCode = hashCode * 59 + this.LoginUserNameField.GetHashCode();
                hashCode = hashCode * 59 + this.SignatureHField.GetHashCode();
                if (this.SignatureImageField != null)
                    hashCode = hashCode * 59 + this.SignatureImageField.GetHashCode();
                hashCode = hashCode * 59 + this.SignatureImageIncludeBorderField.GetHashCode();
                hashCode = hashCode * 59 + this.SignatureImageIncludeReasonField.GetHashCode();
                hashCode = hashCode * 59 + this.SignatureImageIncludeSignedByField.GetHashCode();
                hashCode = hashCode * 59 + this.SignatureImageIncludeSignedDateField.GetHashCode();
                hashCode = hashCode * 59 + this.SignatureImageTypeField.GetHashCode();
                hashCode = hashCode * 59 + this.SignaturePageField.GetHashCode();
                hashCode = hashCode * 59 + this.SignatureWField.GetHashCode();
                hashCode = hashCode * 59 + this.SignatureXField.GetHashCode();
                hashCode = hashCode * 59 + this.SignatureYField.GetHashCode();
                if (this.SignerEmailField != null)
                    hashCode = hashCode * 59 + this.SignerEmailField.GetHashCode();
                if (this.SignerFullNameField != null)
                    hashCode = hashCode * 59 + this.SignerFullNameField.GetHashCode();
                if (this.SignerIdentificationNumberField != null)
                    hashCode = hashCode * 59 + this.SignerIdentificationNumberField.GetHashCode();
                if (this.SignerLocationField != null)
                    hashCode = hashCode * 59 + this.SignerLocationField.GetHashCode();
                if (this.SignerMobileNumberField != null)
                    hashCode = hashCode * 59 + this.SignerMobileNumberField.GetHashCode();
                if (this.SignerReasonField != null)
                    hashCode = hashCode * 59 + this.SignerReasonField.GetHashCode();
                if (this.SignerTrustOriginField != null)
                    hashCode = hashCode * 59 + this.SignerTrustOriginField.GetHashCode();
                if (this.SignerTrustReferenceField != null)
                    hashCode = hashCode * 59 + this.SignerTrustReferenceField.GetHashCode();
                if (this.TextFieldsListField != null)
                    hashCode = hashCode * 59 + this.TextFieldsListField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DocField (string) minLength
            if(this.DocField != null && this.DocField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocField, length must be greater than 1.", new [] { "DocField" });
            }

            // DocNameField (string) minLength
            if(this.DocNameField != null && this.DocNameField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocNameField, length must be greater than 1.", new [] { "DocNameField" });
            }

            // LoginPasswordField (string) minLength
            if(this.LoginPasswordField != null && this.LoginPasswordField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoginPasswordField, length must be greater than 1.", new [] { "LoginPasswordField" });
            }

            // LoginUserNameField (string) minLength
            if(this.LoginUserNameField != null && this.LoginUserNameField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoginUserNameField, length must be greater than 1.", new [] { "LoginUserNameField" });
            }

            // SignatureImageField (string) minLength
            if(this.SignatureImageField != null && this.SignatureImageField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SignatureImageField, length must be greater than 1.", new [] { "SignatureImageField" });
            }

            // SignerEmailField (string) minLength
            if(this.SignerEmailField != null && this.SignerEmailField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SignerEmailField, length must be greater than 1.", new [] { "SignerEmailField" });
            }

            // SignerFullNameField (string) minLength
            if(this.SignerFullNameField != null && this.SignerFullNameField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SignerFullNameField, length must be greater than 1.", new [] { "SignerFullNameField" });
            }

            // SignerIdentificationNumberField (string) minLength
            if(this.SignerIdentificationNumberField != null && this.SignerIdentificationNumberField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SignerIdentificationNumberField, length must be greater than 1.", new [] { "SignerIdentificationNumberField" });
            }

            // SignerLocationField (string) minLength
            if(this.SignerLocationField != null && this.SignerLocationField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SignerLocationField, length must be greater than 1.", new [] { "SignerLocationField" });
            }

            // SignerMobileNumberField (string) minLength
            if(this.SignerMobileNumberField != null && this.SignerMobileNumberField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SignerMobileNumberField, length must be greater than 1.", new [] { "SignerMobileNumberField" });
            }

            // SignerReasonField (string) minLength
            if(this.SignerReasonField != null && this.SignerReasonField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SignerReasonField, length must be greater than 1.", new [] { "SignerReasonField" });
            }

            // SignerTrustOriginField (string) minLength
            if(this.SignerTrustOriginField != null && this.SignerTrustOriginField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SignerTrustOriginField, length must be greater than 1.", new [] { "SignerTrustOriginField" });
            }

            // SignerTrustReferenceField (string) minLength
            if(this.SignerTrustReferenceField != null && this.SignerTrustReferenceField.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SignerTrustReferenceField, length must be greater than 1.", new [] { "SignerTrustReferenceField" });
            }

            yield break;
        }
    }

}
